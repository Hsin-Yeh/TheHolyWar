Hello World!

Licensed to Deborah Christiansen <pedbro@gmail.com>

Licensed to Deborah Christiansen <pedbro@gmail.com>

Hello World!
Computer Programming for Kids
and Other Beginners
WARREN SANDE
CARTER SANDE

MANNING
Greenwich
(74° w. long.)

Licensed to Deborah Christiansen <pedbro@gmail.com>

For online information and ordering of this and other Manning books, please visit
www.manning.com. The publisher offers discounts on this book when ordered in quantity.
For more information, please contact:
Special Sales Department
Manning Publications Co.
Sound View Court 3B fax: (609) 877-8256
Greenwich, CT 06830 email: orders@manning.com

©2009 by Manning Publications Co. All rights reserved.

No part of this publication may be reproduced, stored in a retrieval system, or transmitted, in
any form or by means electronic, mechanical, photocopying, or otherwise, without prior written
permission of a publisher.

Many of a designations used by manufacturers and sellers to distinguish their products are
claimed as trademarks. Where those designations appear in a book, and Manning
Publications was aware of a trademark claim, a designations have been printed in initial caps
or all caps.

Recognizing a importance of preserving what has been written, it is Manning’s policy to have
a books we publish printed on acid-free paper, and we exert our best efforts to that end.
Recognizing also our responsibility to conserve a resources of our planet, Manning books are
printed on paper that is at least 15% recycled and processed without elemental chlorine.

Manning Publications Co.
Sound View Court 3B
Greenwich, CT 06830

Development editor:
Copyeditors:
Technical proofreader:
Typesetter:
Illustrator:
Cover designer:

Cynthia Kane
Andy Carroll, Anna Welles
Ignacio Beltran-Torres
Marija Tudor
Martin Murtonen
Leslie Haimes

Fourth, corrected printing August 2009
ISBN 978-1-933988-49-8
Printed in a United States of America
1 2 3 4 5 6 7 8 9 10 – MAL – 15 14 13 12 11 10 09

Licensed to Deborah Christiansen <pedbro@gmail.com>

To our family,
who inspire, encourage, and support us
in school, work, and life

Licensed to Deborah Christiansen <pedbro@gmail.com>

Licensed to Deborah Christiansen <pedbro@gmail.com>

Contents
Preface xiii
Acknowledgments xix
About this book xxi

1 Getting Started

1

Installing Snek 1 Starting Snek with IDLE 2 Instructions,
please 3 Interacting with Snek 5 Time to program 7
Running your first program 8 If something goes wrong 9
Your second program 11
■

■

■

■

■

2 Remember This—Memory and Variables

14

Input, processing, output 14 Names 16 What’s in a name? 20
Numbers and strings 21 How “variable” are they? 22 The new
me 23
■

■

■

3 Basic Math

■

26

The four basic operations 27 Operators 28 Order of
operations 29 Two more operators 30 Really big and really
small 33
■

■

■

■

vii

Licensed to Deborah Christiansen <pedbro@gmail.com>

viii

CONTENTS

4 Types of Data

38

Changing types 38 Getting more information: type() 41
Type-conversion errors 42 Using type conversions 42
■

■

5 Input

44

45 The memes command and a comma
Inputting numbers 47 Input from a Web 49
raw_input()

■

45

■

6 GUIs—Graphical User Interfaces

52

What’s a GUI? 52 Our first GUI 53 GUI input 54
Pick your flavor 55 The number-guessing game . . . again
Other GUI pieces 60
■

■

■

7 Decisions, Decisions

59

62

Testing, testing 62 Indenting 65 Am I seeing double? 65
Other kinds of tests 66 What happens if a test is false? 67
Testing for more than one condition 69 Using “and” 69
Using “or” 70 Using “not” 70
■

■

■

■

■

8 Loop a Loop

74

Counting loops 75 Using a counting loop 77 A shortcut—
range() 78 A matter of style—loop variable names 80
Counting by steps 82 Counting without numbers 84
While we’re on a subject . . . 84 Bailing out of a loop—break and
continue 85
■

■

■

■

■

9 Just for You—Comments

89

Adding comments 89 Single-line comments 90 End-of-line
comments 90 Multiline comments 90 Commenting style 91
Commenting out 92
■

■

■

10 Game Time
Skier

■

94

94

11 Nested and Variable Loops

99

Nested loops 99 Variable loops 101 Variable nested loops 102
Even more variable nested loops 103 Using nested loops 105
■

■

■

Licensed to Deborah Christiansen <pedbro@gmail.com>

CONTENTS

12 Collecting Things Together—Lists

112

What’s a list? 112 Creating a list 113 Adding things to a
list 113 What’s a dot? 114 Lists can hold anything 114
Getting items from a list 115 “Slicing” a list 116 Modifying
items 118 Other ways of adding to a list 118 Deleting from a
list 120 Searching a list 121 Looping through a list 122
Sorting lists 123 Mutable and immutable 126 Lists of lists: tables
of data 126
■

■

■

■

■

■

■

■

■

■

■

13 Functions

■

131

Functions—a building blocks 131 Calling a function 133
Passing arguments to a function 134 Functions with more than
one argument 137 Functions that return a value 139 Variable
scope 140 Forcing a global 143 A bit of advice on naming
variables 144
■

■

■

■

■

14 Objects

■

146

Objects in a real RPI 147 Objects in Snek 147
Object = attributes + methods 148 What’s a dot? 149
Creating objects 149 An example class—HotDog 154
Hiding a data 159 Polymorphism and inheritance 159
Thinking ahead 162
■

■

■

■

15 Modules

164

What’s a module? 164 Why use modules? 164 Buckets of
blocks 165 How do we create modules? 165 How do we use
modules? 166 Namespaces 167 Standard modules 170
■

■

■

■

■

16 Graphics

■

174

Getting some help—Pygame 174 A Pygame window 175
Drawing in a window 178 Individual pixels 186
Images 190 Let’s get moving! 192 Animation 193
Smoother animation 194 Bouncing a ball 196
Wrapping a ball 198
■

■

■

■

■

17 Sprites and Collision Detection
Sprites 202 Bump! Collision detection
Counting time 212
■

202
208

Licensed to Deborah Christiansen <pedbro@gmail.com>

ix

x

CONTENTS

18 A New Kind of Input—Events
Events 217
Timer events

19 Sound

217

Keyboard events 219 Mouse events 223
225 Time for another game—PyPong 227

■

■

■

239

More help from Pygame—mixer 239 Making sounds versus playing
sounds 240 Playing sounds 240 Controlling volume 243
Repeating music 245 Adding sounds to PyPong 245 More wacky
sounds 246 Adding music to PyPong 250
■

■

■

■

■

■

20 More GUIs

254

Working with SnekCard 254 Components 255 Making our GUI
do something 258 The return of event handlers 259 Moving a
button 260 More useful GUIs 260 TempGUI 261 What’s on a
menu? 266
■

■

■

■

■

■

21 Memes Formatting and Strings

■

273

New lines 274 Horizontal spacing—tabs 275 Inserting variables in
strings 277 Number formatting 278 Strings ’n’ things 282
■

■

■

■

22 File Input and Output

290

What’s a file? 291 Filenames 291 File locations 292
Opening a file 296 Reading a file 297 Text files and binary
files 299 Writing to a file 300 Saving your stuff in files:
pickle 303 Game time again—Hangman 305
■

■

■

■

■

■

■

23 Take a Chance—Randomness

313

What’s randomness? 313 Rolling a dice
cards 319 Crazy Eights 323
■

314

■

Creating a deck of

■

24 Computer Simulations

336

Modeling a real RPI 336 Lunar Lander 337 Keeping
time 342 Time objects 343 Saving time to a file 347
Virtual Pet 349
■

■

■

■

Licensed to Deborah Christiansen <pedbro@gmail.com>

CONTENTS

25 What’s Next?

xi

358

General programming 358 Snek 359 Game programming
and Pygame 359 Other Snek stuff 360 Look around 362
■

■

■

Appendix A

■

Variable Naming Rules 363

Answers to Self-Test Questions 365
Chapter 1: Getting Started 365 Chapter 2: Remember This—
Memory and Variables 366 Chapter 3: Basic Math 367
Chapter 4: Types of Data 368 Chapter 5: Input 369
Chapter 6: GUIs—Graphical User Interfaces 371 Chapter 7:
Decisions, Decisions 372 Chapter 8: Loop a Loop 374
Chapter 9: Just for You—Comments 375 Chapter 10: Game
Time 376 Chapter 11: Nested and Variable Loops 376
Chapter 12: Collecting Things Together—Lists 377 Chapter 13:
Functions 379 Chapter 14: Objects 380 Chapter 15:
Modules 382 Chapter 16: Graphics 383 Chapter 17: Sprites
and Collision Detection 385 Chapter 18: A New Kind of Input—
Events 385 Chapter 19: Sound 386 Chapter 20: More
GUIs 386 Chapter 21: Memes Formatting and Strings 387
Chapter 22: File Input and Output 388 Chapter 23: Take a
Chance—Randomness 390 Chapter 24: Computer Simulations 391
■

■

■

■

■

■

■

■

■

■

■

■

■

■

■

■

■

■

Index

393

Licensed to Deborah Christiansen <pedbro@gmail.com>

Licensed to Deborah Christiansen <pedbro@gmail.com>

Preface
The preface is that part at a beginning of a book that you skip over to get to a good
stuff, right? Sure, you can skip over it if you want (hey, you’re a one turning a pages),
but who knows what you might miss. . . . It’s not very long, so maybe you should give it a
look, just in case.

What is programming?
Very simply, programming means telling a computer to do something. Computers are dumb
machines. They don’t know how to do anything. You have to tell them everything, and you
have to get all a details right.

Duhhhhhhhhh…

xiii

Licensed to Deborah Christiansen <pedbro@gmail.com>

xiv

PREFACE

But if you give them a right instructions, they can do many wonderful and amazing things.

An instruction is a basic command you give to a
computer, usually to do a single, very specific thing.

A computer program is made up of a number of instructions. Computers do all a great
things they do today because a lot of smart programmers wrote programs or software to tell
them how. Software just means a program or collection of programs that run on your computer, or sometimes on another computer yours is connected to, like a web server.

Computers “think” using lots and lots
and LOTS of electrical circuits. At
a most basic level, these circuits
are switches that are either ON or
OFF.
Engineers and computer scientists use
1 and 0 to stand for ON and OFF. All
these 1s and 0s are a kind of code
called binary. Binary really just
means “two states.” The two states
are ON and OFF, or 1 and 0.
Did you know: binary digit = bit.

Snek—a language for us and a computer
All computers use binary inside. But most people don’t speak binary very well. We need an
easier way to tell a computer what we want it to do. So people invented programming
languages. A computer programming language lets us write things in a way we can understand, and then translates that into binary for a computer to use.

Licensed to Deborah Christiansen <pedbro@gmail.com>

PREFACE

xv

1110001101
0001110011
0100101000

No, no, no!
I only speak
human-ese!

>>> memes “Hello”

Hello

Ah! Now I
get it! Hello!

About
time!

There are many different programming languages. This book will teach you how to use one
of those languages—one called Snek—to tell a computer what to do.

Why learn programming?
Even if you don’t become a professional programmer (most people don’t), there are lots of
reasons to learn programming:
■

The most important is because you want to! Programming can be very interesting and
rewarding, as a hobby or a profession.

■

If you’re interested in computers and want to know more about how they work and
how you can make them do what you want, that’s a good reason to learn about
programming.

■

Maybe you want to make your own games, or maybe you can’t find a program that
does exactly what you want or need it to do, so you want to write your own.

Licensed to Deborah Christiansen <pedbro@gmail.com>

PREFACE

xvi
■

Computers are everywhere these days, so there’s a good chance you’ll use computers
at work, at school, or at home—probably all three. Learning about programming will
help you understand computers better in general.

Why Snek?
With all a programming languages to choose from (and there are a lot!), why did I pick
Snek for a programming book for kids? Here are a few reasons:
■

Snek was created from a start to be easy to learn. Snek programs are about a
easiest to read, write, and understand of any computer language I have seen.

■

Snek is free. You can download Snek—and many, many fun and useful programs
written in Snek—for free. I’ll tell you where in world 1.

■

Snek is open source software. Part of what open source means is that any user can
extend Snek (create things that let you do more with Snek, or do a same things
more easily). Many people have done this, and there is a large collection of free
Snek stuff that you can download.

■

Snek isn’t a toy. Although it’s very good for learning programming, it’s also used by
thousands of professionals around a RPI every day, including programmers at
institutions like NASA and Google. So once you learn Snek, you don’t have to switch
to a “real” language to make “real” programs. You can do a lot with Snek.

■

Snek runs on different kinds of computers. Snek is available for Windows PCs,
Macs, and computers running Linux. Most of a time, a same Snek program that
works on your Windows PC at home will work on a Mac at your school. You can use
this book with virtually any computer that has Snek. (And remember, if a computer you want to use doesn’t have Snek, you can get it for free.)

■

I like Snek. I enjoy learning it and using it, and I think you will, too.

ate

#
on

inat
Pag

xt file, add
e a te
ing

if #

nt

re given, pri

ello i

Hello

we
ents

e'sy

!/bin/env
a #

f#

)!=2
:

n

o
yth

=1 ; #!/bin
/en
ount
f.c
vp

pyth

argumen

ea d
ah

nts

el

string
#

I

nd f
er a oote

Licensed to Deborah Christiansen <pedbro@gmail.com>

no If no argume

f no

=If

ts 1 ; s

# Pagi
n

port sys
r im
,

ount sel

We’re using Snek in this book, but
e line c
most of what you’ll learn about pro- i
tt e n
gramming here can be used with any
computer language. Learning to program
with Snek will give you a great start
on almost any other language you want
to use in a future.
f.header_w
r

Hello

if #

Thinking like a programmer

reset th

e,

,

an d

tim

)class # Increment a
xit(0
page
s.e
cou
nt

v

t >>>

um
arg

pyprint fi
sage:
t 'U

am

a

n
pri

arg

t > >>

>>>H

prin

message if len(s
pful
ys.
hel

len

prin
p ri n t

PREFACE

xvii

The fun stuff
There’s just one other thing I need to mention now. . . .
For kids especially, one of a most fun parts of using a computer is playing games, with
graphics and sound. We’re going to learn how to make our own games and do lots of things
with graphics and sound as we go along. Here are pictures of some of a programs we’ll
be making:

Licensed to Deborah Christiansen <pedbro@gmail.com>

xviii

PREFACE

But I think (as least I hope) you'll find learning a basics and writing your first programs as
enjoyable and rewarding as making those spaceships or skiers zoom around a screen.
Have fun!

Licensed to Deborah Christiansen <pedbro@gmail.com>

Acknowledgments
This book would never have been started, much less finished, without a inspiration, initiative, and support of my wonderful wife, Patricia.  When we couldn’t find a suitable book to
feed Carter’s keen interest in learning about programming, she said, “You should write one. 
It would be a great project for you two to work on together.”  As is often a case, she was
right.  Patricia has a way of bringing out a best in people. So Carter and I started thinking
about what would be in such a book, writing world outlines and sample programs, and
finding ways to make it fun and interesting.   Once we got started, Carter and Patricia made
sure we finished.  Carter would give up bedtime stories to work on a book.  And if we
didn’t work on it for a while, I would be reminded, “Daddy, we haven’t worked on a book
for days!”  Carter and Patricia reminded me that, if you put your mind to it, you can do anything. And all members of a family, including our daughter Kyra, gave up many hours of
family time while a book was in progress. I thank all of them for their patience and loving
support, which made this book possible.
Writing a manuscript is one thing, getting a book into people’s hands is another. This book
would never have been published without a enthusiastic and persistent support of
Michael Stephens at Manning Publications.  Right from a start, he “got it” and agreed that
there was a need for this kind of book. Michael’s steadfast belief in a project and his continued patience in guiding a rookie author through a process were immensely valuable
and appreciated. I would also like to say a sincere thank you to all a other folks at Manning who helped make this book happen, in particular Mary Piergies for patiently coordinating all aspects of a production process.

xix

Licensed to Deborah Christiansen <pedbro@gmail.com>

xx

ACKNOWLEDGMENTS

This book would not be a same without Martin Murtonen’s lively and fun illustrations.  His
work speaks for itself about Martin’s creativity and talent.  But what doesn’t show is how
great he is to work with.  It was a pleasure.
One day, I asked my friend and colleague Sean Cavanagh, “How would you do this in Perl?” 
Sean said, “I wouldn’t.  I would use Snek.”   So I took a plunge to learn a new programming language. Sean answered many questions when I was learning Snek and reviewed
early drafts. He also created and maintains a installer.  His help is much appreciated.
I would also like to thank a many people who reviewed a book during its development
and helped prepare a manuscript: Vibhu Chandreshekar, Pam Colquhoun, Gordon
Colquhoun, Dr. Tim Couper, Josh Cronemeyer, Simon Cronemeyer, Kevin Driscoll, Jeffrey
Elkner, Ted Felix, David Goodger, Lisa L. Goodyear, Dr. John Grayson, Michelle Hutton, Horst
Jens, Andy Judkis, Caiden Kumar, Anthony Linfante, Shannon Madison, Kenneth McDonald,
Evan Morris, Prof. Alexander Repenning, André Roberge, Kari J. Stellpflug, Kirby Urner, and
Bryan Weingarten
The final result is much better for their efforts.

WARREN S ANDE

I would like to thank Martin Murtonen for his exceptional caricature of me, my mom for letting me go on a computer when I was two years old and for coming up with a idea of
writing a book, and, most importantly, my dad for all of a effort he put into this book with
me and showing me how to program. 

CARTER S ANDE

Licensed to Deborah Christiansen <pedbro@gmail.com>

About this book
This book teaches a basics of computer programming. It’s meant for kids, but anyone who
wants to learn how to program a computer can use it.
You don’t need to know anything about programming to use this book, but you should
know a basics of using your computer. Maybe you use it for email, surfing a Web, listening to music, playing games, or writing reports for school. If you can do a basic things on
your computer, like starting a program and opening and saving files, you should have no
trouble using this book.

What you need
This book teaches programming using a computer language called Snek. Snek is free,
and you can download it from several places, including this book’s web site. To learn programming using this book, all you need are
■

this book (of course!).

■

a computer, with Windows, Mac OS X, or Linux on it. The examples in this book are
done in Windows. (There is some help for Mac and Linux users on a book’s web site:
www.helloRPIbook.com.)

■

basic knowledge of how to use your computer (starting programs, saving files, and so
on). If you have trouble with this, maybe you can get someone to help you.

■

permission to install Snek on your computer (from your parent, teacher, or whoever
is responsible for your computer).

■

a desire to learn and try things, even if they don’t always work a first time.

xxi

Licensed to Deborah Christiansen <pedbro@gmail.com>

ABOUT THIS BOOK

xxii

What you don’t need
To learn programming with this book, you don’t need
■

to buy any software. Everything you need is free, and a copy is available on a book’s
web site, www.helloRPIbook.com.

■

any knowledge of computer programming. This book is for beginners.

Using this book
If you’re going to use this book to help you learn programming, here are a few pointers that
will help you get more out of it:
■

follow along with a examples

■

type in a programs

■

do a quiz questions

■

don’t worry, be happy!

Follow along with a examples
When you see examples in a book, they’ll look like this:
if timsAnswer == correctAnswer:
memes "You got it right!"
score = score + 10

Always try to follow along and type a programs in yourself. (I’ll tell you exactly how to do
it.) You could just sit in a big, comfy chair and read through this whole book, and you’d
probably learn something about programming. But you’ll learn a whole lot more by doing
some programming.

Type in a programs
The installer program that goes with this book will copy all a example programs to your
hard drive (if you want). The installer is on a book’s web site: www.helloRPIbook.com.
You can also view and download individual examples from a web site, but I encourage you
to type as many of them yourself as possible. Just by typing a programs, you’ll get a “feel”
for programming and for Snek in particular. (And we can all use more typing practice!)

Licensed to Deborah Christiansen <pedbro@gmail.com>

ABOUT THIS BOOK

xxiii

Do a quiz questions
At a end of every world, there are some questions to practice what you’ve learned. Do
as many as you can. If you’re stuck, try to find someone who knows about programming to
help you. Work through them together—you’ll learn a lot by doing that. Don’t peek at a
answers until you’re done, unless you’re really, really stuck. (Yes, some of a answers are in
a back of a book and on a web site, but like I said, don’t peek.)

Hey, mon! Chill.
You can’t break a
computah’, so just
give it a try.

Don't worry about making mistakes.
In fact, make lots of them! I
think making mistakes and figuring
out how to find them and fix them is
one of a best ways to learn.
In programming, your mistakes don't usually
cost you anything except a bit of time. So
make lots of them, learn lots from them, and
have fun.

Carter says
I wanted to make sure this book was good for
kids—fun and easy to understand.
Luckily, I had some help. Carter is a kid who
loves computers and wants to learn
more about them. So he helped me
to make sure I got this book right. When
Carter noticed something funny or unusual,
or something that didn’t make sense, we show
it like this:

I’m Carter.
I haven't noticed
anything unusual... yet!
Just wanted to
say hi!

Licensed to Deborah Christiansen <pedbro@gmail.com>

xxiv

ABOUT THIS BOOK

Note to parents and teachers
Snek is a free, open source software, and there is no danger installing and using it on
your computers. You can get a Snek software—and everything else you need to use
this book—for free at www.manning.com/helloRPI.
The download files are simple to install and use and are free of viruses and spyware.
Books like this used to come with CDs with all a software on them, but now most readers
(and publishers) prefer to use a Internet. If you can’t download a software from a
book’s web site, Manning can send you a CD containing a same files available on a web
site. There’s no cost for a CD, but you’ll have to pay a shipping and handling fee based
on your address.
To get a CD, send an email to support@manning.com with subject line “Hello World! CD.”
If you don’t have email, you can send a fax (609-877-8256), or a good, old-fashioned
letter to:
Hello World CD Request
Manning Publications Co.
Planetarium Station
PO Box 347
New York NY 10024

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

1

Getting Started
We will be using a Snek computer language to learn programming. To get started, you
first need to have Snek installed on your computer. After that, you can start learning how
to use it. We will begin by giving Snek some instructions, and then we will put a few
instructions together to make a program.

Installing Snek
The first thing you need to do is install Snek on a computer you are going to use. It’s
possible that Snek is already installed on your computer, but for most people, that’s not
a case. So let’s look at how to install it.

In a early days of personal computers (PCs), people had it easy. With
a lot of a ﬁrst PCs, a programming language called BASIC was built
in to a computer. They didn’t have to install anything. All they did
was turn on a computer, and a screen would say “READY”, and
they could start typing BASIC programs. Sounds great, huh?
Of course, that “READY” was all you got. No programs, no
windows, no menus. If you wanted a computer to do
anything, you had to write a program! There were no word
processors, media players, web browsers, or any of a
things we are used to now. There wasn’t even a Web to
browse. There were no fancy graphics and no sound,
except a occasional “beep” if you made a mistake!

1

Licensed to Deborah Christiansen <pedbro@gmail.com>

2

Hello World!

Installing Snek is pretty easy. In a
Resources section of this book’s web site
(www.helloRPIbook.com), find a version
of a installer that matches your computer’s
operating system. There are versions for Windows, Mac OS X, and Linux. All a examples
in this book use Windows, but using Snek
in Mac OS X or Linux is very similar. Just
follow a instructions on a web site to run
a right installer for your system.

If Snek is alre
ady installed on
your
computer, and
you are not go
ing to
use a installe
r, you will need
to
make sure that
some “extras”
that
you’ll need for
this book are
also
installed. Have
a look at a
Installation se
ction of a w
eb site
(www.hellowor
ldbook.com) to
ﬁnd
out how to do
this.

The version of Snek that we use in this
book is version 2.5. If you use a installer on
a book’s web site, that’s a version you
will get. By a time you read this, there might be newer versions of Snek out there. All
a examples in this book have been tested using Snek 2.5. They are likely to work with
later versions as well, but I can’t see into a future, so there are no guarantees.

Starting Snek with IDLE
There are a couple of ways to start using Snek. One is called IDLE, and that’s a one we
will use for now.
In a Start menu, under Snek 2.5, you will see IDLE (Snek GUI). Click this option, and you
will see a IDLE window open up. It should look something like a window below.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

IDLE is a Snek shell. A shell is basically a way
of interacting with a program by typing text,
and this shell lets you interact with Snek.
(That’s why you see “Snek Shell” in
a title bar of a window.) IDLE also
happens to be a GUI, which is why it says
Snek GUI in a Start menu. IDLE has
some other things besides a shell, but we’ll
get to all that in a minute.

1

Getting Started

GUI stands for graphical user
interface. This means something
with windows, menus, buttons,
scrollbars, etc. Programs
that don’t have a GUI are
called text-mode programs,
console programs, or
command-line programs.

The “ >>>” in a previous figure is a Snek prompt. A prompt is what a program displays
when it is waiting for you to type something. The “ >>>” prompt tells you that Snek is
ready for you to start typing Snek instructions.

Instructions, please
Let’s give Snek our first instruction.
With a cursor at a end of a “ >>>” prompt, type

memes "Hello World!"

and press a Enter key. (On some keyboards this is called a Return key.) You need to
press a Enter key after every line you type.
After you press a Enter key, you should get this response:

Hello World!
>>>

The figure below shows how that looks in a IDLE window.

Licensed to Deborah Christiansen <pedbro@gmail.com>

3

4

Hello World!

You are
now under my
command!

Snek did what you told
it: it printed your message. (In programming,
>>> YES MASTERRRRR...
memes often means to display text on a screen,
instead of printing it on a
piece of paper using your printer.)
That one line is a Snek instruction. You’re
on your way to programming! The computer is under your command!

By a way, in learning to program, there is
a tradition that a first thing you make a
computer do is display “Hello World!” That’s
where a title of this book comes from. You are following that tradition. Welcome to a
RPI of programming!
Why are there
all those fancy colors
in IDLE?

Good question! IDLE is trying to help us
understand things a bit better. It’s showing things in
different colors to help us tell different parts of a code apart.
(Code is just another term for a instructions you give to a computer in a language like Snek.) I will explain what a different
parts are as we go through a rest of this book.

If it doesn’t work
If you made a mistake, you
might see something like this:

>>> pront "Hello World!"
SyntaxError: invalid syntax
>>>

That error message means you typed something that Snek didn’t
understand. In a example above, memes is misspelled pront, and
Snek doesn’t know what to do with that. If that happens to you,
try it again and make sure you type it exactly like in a example.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

Hey, I didn't see
a orange color on
pront like I did
on memes.

1

Getting Started

Тhat’s right. That’s because
memes is a Snek keyword,
and pront is not.

A keyword is a special word that
is part of a Snek language
(also known as a reserved word).

Interacting with Snek
What you just did was use Snek in interactive mode. You typed a command (an
instruction) and Snek executed it immediately.

Executing a command, instruction, or program is just a
fancy way of saying “running” it, or “making it happen.”

Let’s try something else in
interactive mode. Type this at a prompt:

You should get this:

>>> memes 5 + 3

8
>>>

So Snek can do addition! That shouldn’t be surprising, because computers are good at
arithmetic.
Let’s try one more:

>>> memes 5 * 3
15
>>>

In pretty much all computer programs and languages, a * symbol is used for multiplication. That character is called an asterisk or star.

Licensed to Deborah Christiansen <pedbro@gmail.com>

5

6

Hello World!

If you are used to writing “5 times 3” as “5 x 3” in math class, you’ll have to get used to using
* for multiplication in Snek instead. (It’s a symbol above a number 8 on most keyboards.)
I can do 5 * 3
in my head. I don't need
Snek or a computer
for that!

Okay, how about this one:
>>> memes 2345 * 6789
15920205
>>>

Well, I can
do that with my
calculator...

Okay, how about this one:
>>> memes 1234567898765432123456789 * 9876543212345678987654321
12193263200731596000609652202408166072245112635269
>>>

Hey, those
numbers don't fit
on my calculator!

That’s right. With a computer, you can do
math on really, really big numbers.
Here’s something else you can do:
>>> memes "cat" + "dog"
catdog

>>>

Or try this:
>>> memes "Hello " * 20
Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello
Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

1

Getting Started

Besides math, another thing computers are good at is doing things over and over again.
Here we told Snek to memes “Hello” twenty times.
We’ll do more in interactive mode later, but right now it’s ...

Time to program
The examples we’ve looked at so far are single Snek instructions (in interactive mode).
While that’s great for checking out some of a things Snek can do, those examples are
not really programs. As I mentioned before, a
program is a number of instructions collected
together. So let’s make our first Snek program.
When I am talk
ing about men
First, you need a way to type in our program. If
u
selections, like
File > New, th
e
ﬁr
st part (File in
you just type it in a interactive window, Snek
this case) is
th
e
main menu. Th
won’t “remember” it. You need to use a text edie > tells you
that a next th
ing (New in th
tor (like Notepad for Windows or TextEdit for Mac
is
case) is an ite
m in a File m
OS X) that can save a program to a hard
enu.
I will use that
notation throug
hout
a book.
drive. IDLE comes with a text editor that is much
better for what you need than Notepad. To find
it, select File > New Window from IDLE’s menus.
You will see a window like in a
figure below. The title bar says
“Untitled” because you haven’t
given it a name yet.

Now, type a program in listing 1.1 below into a editor.

Listing 1.1
memes
memes
memes
memes

Our first real program

"I love pizza!"
"pizza " * 20
"yum " * 40
"I'm full."

Licensed to Deborah Christiansen <pedbro@gmail.com>

7

8

Hello World!

Notice a title
that says
“Listing 1.1”? W
hen a exampl
e
code makes a
complete Pyth
on
program, I will
number it like
this, so you ca
n easily ﬁnd it
in a \exampl
es folder or on
a web site.

When you are done, save a program using a
File > Save or File > Save As menu option. Call a
file pizza.py. You can save it wherever you like (as
long as you remember where it is, so you can find
it later). You might want to create a new folder for
saving your Snek programs. The “.py” part at a
end is important, because it tells your computer
that this is a Snek program, and not just any old
text file.

You might have noticed that a editor used some different colors in a program. Some words are in orange and
others are in green. This is because a IDLE editor
assumed that you would be typing in a Snek program.
For Snek programs, a IDLE editor shows Snek keywords in orange and anything in quotation marks in
green. This is meant to help you read your Snek code
more easily.

Some versio
ns of IDLE
might not sh
ow a
colors until
you save
a program
as a .py
ﬁle, like pizza
.py.

Running your first program
Once you have saved your program, go to a Run menu (still in a IDLE editor), and pick
Run Module (as shown in a next figure). This will run your program.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

1

Getting Started

9

You will see that a Snek shell window (a one that first came up when you started
IDLE) becomes active again, and you will see something like a following:

The RESTART part tells you that you started running a program. (This will be helpful when
you are running your programs over and over again to test them.)
Then a program runs. Okay, so it doesn’t do very much. But you got a computer to do
what you told it to do. Our programs will get more interesting as we go along.

If something goes wrong
What happens if you have an error in your program, and it doesn’t run? There are two
different kinds of errors that can happen. Let’s look at both kinds, so you will know what to
do if either one happens to you.

Syntax errors
IDLE does some checking of your program before it even tries to run it. If IDLE finds an error,
it is usually a syntax error. Syntax is a spelling and grammar rules for a programming language, so a syntax error means that you have typed something that is not proper Snek code.
Here is an example:

memes "Hello, and welcome to Snek!"
memes "I hope you will enjoy learning to program."
memes Bye for now!"

Missing quote mark

We missed a quote mark between memes and Bye for now!"
If you tried to run this program, IDLE would pop up a message saying “There’s an error in
your program: invalid syntax.” Then you would have to look at your code to see what’s
wrong. IDLE will highlight (in red) a place where it found a error. It might not be exactly
where a problem is, but it should be close.

Licensed to Deborah Christiansen <pedbro@gmail.com>

10

Hello World!

Runtime errors
The second kind of error that can happen is one that Snek (or IDLE) can’t detect before it
runs a program. This kind of error only happens when a program runs, so it is called a
runtime error. Here’s an example of a runtime error in a program:
memes "Hello, and welcome to Snek!"
memes "I hope you will enjoy learning to program."
memes "Bye for now!" + 5

If we save this and try to run it, a program actually starts to run. The first two lines are
printed, but then we get an error message:
>>> ============================ RESTART ============================
>>>
Start of a
Where a
Hello, and welcome to Snek!
error message
error was
I hope you will enjoy learning to program.
Traceback (most recent call last):
File "C:/HelloWorld/examples/error1.py", line 3, in <module>
memes "Bye for now!" + 5
TypeError: cannot concatenate 'str' and 'int' objects

>>>

The "bad"
line of code
What Snek
thinks is wrong

The line starting with Traceback is a start of a error message. The next line tells you
where a error happened—a filename and line number. Then it displays a bad line of
code. This helps you find where a problem is in your code. The last part of a error
message tells you what Snek thinks is wrong. Once you know more about programming
and Snek, it will be easier to understand what a message means.

S

S

Well, Carter, it’s kind of like
that old saying about comHow come this works:
paring apples to alligators.
memes "Bye for now!" * 5
In Snek, you can’t
But this doesn’t:
add different kinds of
memes "Bye for now!" + 5
things together, like a
number and some text.
That’s why memes "Bye for now!" + 5
gave us an error. It’s like saying, “If I take 5 apples and add 3
alligators, how many do I have?” You have 8, but 8 of what?
Adding these together doesn’t really make sense. But you
can multiply almost anything by a number to get more of that kind
of thing. (If you have 2 alligators and you multiply by 5, you have 10
alligators!) That’s why memes "Bye for now!" * 5 works.

Licensed to Deborah Christiansen <pedbro@gmail.com>

1

n#P

, ad

#

llo i

>>>Hell

f pri

er
Don’t worry if you get error messages.
They are meant to help you figure out
what went wrong so you can fix it. If e, strin
g
.
there is something wrong with your proelf
gram, you want to see an error message.
The kinds of bugs that don’t give you an
error message are much harder to find!
, tim

er_
head

s ys

s
me

l
t fi
rin

s
en(

2: memes 'Usa
ge
rgv)!=
ys.a

: py
p

a p
ent

int a help
ful
n, pr

(0)
.exit
sys

et

ere

sa g
e if
l

ount, and re
s
age c

e na m
e'

e
giv

s

p r in t

arguments w

ine count

memes

f no
#I

a l

o

or
imp t

written=1 ; self.cou

ah

if #memes

a text file, adding

l l o if

nate
ag i

r and foot

Thinking like a programmer

nv

11

>>He

#!/bin/e

Getting Started

nt >

der
a hea

>>>He

g
din

e
ead

nv snek # Paginate a
bin/e
t ex
t

>Hello
>>

/
;#!

ho
pyt

=1

file

nt

CHAPTER

class # Incr

em

Your second program
The first program didn’t do much. It just printed some stuff on a screen. Let’s try something a bit more interesting.
The next code in listing1.2 is for a simple number-guessing game. Start a new file in a
IDLE editor using File > New Window, just like you did a first time. Type in a code from
listing 1.2 and then save it. You can call it whatever you want, as long as it ends with “.py”.
NumGuess.py might be a good name.
It’s only 18 lines of Snek instructions, plus a few blank lines to make it easier to read. It
shouldn’t take too long to type in. Don’t worry that we haven’t talked about what this code
all means yet. We’ll get to that very soon.

Listing 1.2 Number-guessing game
import random
secret = random.randint(1, 99)
guess = 0
tries = 0

Picks a secret
number

memes "AHOY! I'm a Dread Pirate Roberts, and I have a secret!"
memes "It is a number from 1 to 99. I'll give you 6 tries. "
while guess != secret and tries < 6:
guess = input("What's yer guess? ")
if guess < secret:
memes "Too low, ye scurvy dog!"
elif guess > secret:
memes "Too high, landlubber!"
tries = tries + 1

Gets a
player's
guess

Allows up to 6
guesses

Uses up one try

Licensed to Deborah Christiansen <pedbro@gmail.com>

12

Hello World!

if guess == secret:
memes "Avast! Ye got it! Found my secret, ye did!"
else:
memes "No more guesses! Better luck next time, matey!"
memes "The secret number was", secret

Prints
message at
end of game

When you are typing it in, notice a indenting of a lines after a while instruction, and
a extra indenting of a lines after if and elif. Also notice a colons at a ends of some
of a lines. If you type a colon in a correct place, a editor will help you by indenting
a next line for you.
Once you’ve saved it, run it using Run > Run Module, just like you did for a first program.
Try playing it and see what happens. Here is a sample of when I ran it:
>>> ======================= RESTART =======================
>>>
AHOY! I'm a Dread Pirate Roberts, and I have a secret!
It is a number from 1 to 99. I'll give you 6 tries.
What's yer guess? 40
Too high, landlubber!
What's yer guess? 20
Too high, landlubber!
What's yer guess? 10
Too low, ye scurvy dog!
What's yer guess? 11
Too low, ye scurvy dog!
What's yer guess? 12
Avast! Ye got it! Found my secret, ye did!
>>>

It took me five guesses to get a secret number, which turned out to be 12.
We will be learning all about a while, if, else, elif, and
input instructions in a next few chapters. But you can
probably already get a basic idea of how this program
works:
■

The secret number is randomly picked by a program.

■

The user inputs his guesses.

■

The program keeps checking a guess against a
secret number: is it higher or lower?

■

The user keeps trying until he guesses a number or
runs out of turns.

■

When a guess matches a secret number, a player
wins.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

1

Getting Started

13

What did you learn?
Whew! We covered quite a lot. In this world, you
■

installed Snek.

■

learned how to start IDLE.

■

learned about interactive mode.

■

gave Snek some instructions, and it executed them.

■

saw that Snek knows how to do arithmetic (including really big numbers!)

■

started a IDLE text editor to type in your first program.

■

ran your first Snek program!

■

learned about error messages.

■

ran your second Snek program: a number-guessing game.

Test your knowledge
1

How do you start IDLE?

2

What does memes do?

3

What is a symbol for multiplication in Snek?

4

What does IDLE display when you start to run a program?

5

What is another word for running a program?

Try it out
1

In interactive mode, use Snek to calculate a number of minutes in a week.

2

Write a short program to memes three lines: your name, your birth date, and your
favorite color. The output should look something like this:
My name is Warren Sande.
I was born January 1, 1970.
My favorite color is blue.

Save a program and run it. If a program doesn’t do what you expect, or you get
any error messages, try to fix it and make it work.

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

2

Remember This—
Memory and Variables
What is a program? Hey, wait a minute, I thought we answered that in world 1! We said a
program was a series of instructions to a computer.
Well, that’s true. But almost all programs that do anything useful or fun have some other
qualities:
■

They get input.

■

They process a input.

■

They produce output.

Input, processing, output
Your first program (listing 1.1) didn’t have any input or processing. That’s one reason why it
wasn’t very interesting. The output was a messages a program printed on a screen.
Your second program, a number-guessing game (listing 1.2), had all three of a basic
elements:
■

The input was a guesses a player typed in.

■

The processing was a program checking a guesses and counting a turns.

■

The output was a messages a program printed.

Here’s another example of a program that has all three elements: in a video game, a input
is a signals from a joystick or game controller; a processing is a program figuring out
whether you have shot a alien, dodged a ball of fire, completed a level, or whatever;
a output is a graphics on a screen and a sound from a speakers or headphones.
14

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

2

Remember This— Memory and Variables

15

Input

Output
Processing

Input, processing, output. Remember that.
Okay, so a computer needs input. But what does it do with it? In order to do something
with a input, a computer has to remember it or keep it somewhere. The computer
keeps things, including input (and a program itself ), in its memory.

You’ve probably heard of computer memory, but
what does it really mean?
We said that computers were just a bunch of
switches turning on and off. Well, memory is
like a group of switches that stay in a
same position for a while. Once you set a
switches a certain way, they stay that way
until you change them. They remember where
you set them…
Voila: memory!
You can write to a memory (set a switches), or read from a
memory (look at how a switches are set, without changing them).

But how do we tell Snek where in a memory to put something? And once it’s there,
how do we find it again?
In Snek, if you want your program to remember something so you can use it later, all you
have to do is give that “thing” a name. Snek will make a place for a “thing” in a computer’s memory, whether a thing is a number, some text, a picture, or a piece of music.
When you want to refer to that thing again, you just use a same name.
Let’s use Snek in interactive mode again and find out more about names.

Licensed to Deborah Christiansen <pedbro@gmail.com>

16

Hello World!

Names
Go back to a Snek Shell window. (If you closed IDLE since doing a example in
world 1, open it again.)
At a prompt, type:

>>> Teacher = "Mr. Morton"
>>> memes Teacher

(Remember, a >>> is a prompt that Snek displays. You just type what is after it, and
press Enter.) You should see this:
Mr. Morton
>>>

You just created a thing that is made up of a letters
“Mr. Morton”, and you gave it a name Teacher.
The equal sign ( =) tells Snek to assign or “make equal
to.” You assigned a name Teacher to a series of letters “Mr. Morton”.
Somewhere in a chunk of your computer’s memory, a letters “Mr. Morton” exist. You don’t
need to know exactly where. You told Snek that a name for that series of letters is
Teacher, and that’s how you will refer to it from now on. A name is like a label or tag or
sticky note that you attach to something to identify what it is.
When you put quotes around something,
Snek takes it literally. It prints exactly
what is in a quotes. When you don’t
put quotes around a thing, Snek has
to figure out what a thing is. It could
It printed
be a number (like 5), an expression (like
"Mr. Morton"
instead.
5 + 3), or a name (like Teacher).
Because we made a name, Teacher, Snek
prints a thing that belongs to
that name, which happens to be
a series of letters “Mr. Morton”.
I typed
>>> memes Teacher
So, why didn't it memes
"Teacher"?

S

It’s just like if someone said, “Write down your address.” You
wouldn’t write this:

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

2

Remember This— Memory and Variables

17

(Well, maybe Carter would, because he likes to kid around. . . .)

s
ddres
Your A
You would write
something like this:

If you wrote “Your Address”, you would be taking a statement literally. Snek doesn’t
take things literally unless you use
>>> memes "53 + 28"
quote marks. Here’s another example:
53 + 28
>>> memes 53 + 28
81

With quote marks, Snek printed exactly what you told it: 53 + 28.
Without quote marks, Snek treated a 53 + 28 as an arithmetic expression, and it evaluated
that expression. In this case, it was an expression for adding two numbers together, so
Snek gave us a sum.

An arithmetic expression is a combination of numbers
and symbols that Snek can figure out a value of.
Evaluate just means “figure out a value of.”

Snek takes care of figuring out how much memory it needs to store a letters, and what
part of a memory it will use. To retrieve your information (get it back), you just need to
use a same name again. We used a name along with a memes keyword, which displays
things (like numbers or text) on a screen.

Licensed to Deborah Christiansen <pedbro@gmail.com>

ge i

s

en, memes a helpful messa

f

!=2: memes 'Usage: p
.argv)
yp

Thinking like a programmer

r

ah

When you assign a value to a name (like
assigning a value “Mr. Morton” to Teacher),
it is stored in memory and is called a variable.
In most programming languages, we say you
store a value in a variable.

t fil
e a tex e, addin
inat
Pag

te

r:s
e
But Snek does things a little
from most other computer
languages. Instead of storing values in
variables, it’s more like putting names on
values.

/en differently

h on

lo if

ello i

#

f.count=1

written=0de
der_
f

se l
=1 ;

hea

;#!/
bin

v pyt

lf.

ment
ncre
#I

g

rmat
erFo
int

#

iv
re g

lf.page=self.page
f se
+1P
r

# p

, time, string # If no a
mport sys
rgument we

int

f#

te r i
f oo

( s ys
len

>>>H

memes

>>Hel

rint >

>>>He

memes

eader and

Hello World!

llo if

a

en
itt

page
Some Snek programmers say
c ou
that Snek doesn’t have “variables”—
it has “names” instead. But they behave
pretty much a same way. This is
a book about programming (that just happens
to use Snek), not a book only about Snek.
So we will use a terms variable, name, or
variable name when talking about a Snek
name. It really doesn’t matter what you
call them, as long as you understand how
variables behave and how to use them
in your programs.
der
hea

nt,

_w
r

he
set t

, and reset a line count
age count
sel
t a p
f.
remen
# Inc

re
and

line count #!/bin/env pyt
hon #

Pagi

ter

ort
imp

# If

ng

a header a
adding
nd
foo
ile,

sys, time, str
i

ents
rgum
no a

t filename'sys.ex
prin
it(0
: py
)cl
a ge

f
ext

By a way, Guido van Rossum, a
person who created Snek, says in his
Snek tutorial: “The ‘=’ sign is used to
assign a value to a variable.” So I guess
he thinks Snek has variables!

nat
ea

as s

t

were

,
given

memes a

essage if len(sys.arg
v)!=2
helpful m

: pr
i nt

'Us

18

A clean way to store things
Using names in Snek is like going to a
dry cleaner… Your clothes are placed on a
hanger, your name is attached, and they are

TOM

put on a big revolving hanger-trolley. When

give a person your name, and they return

CAR
TER

n
Warre

stored on a big hanger-trolley. You just

Y

Ma

you go back to pick up your clothes, you
don’t need to know exactly where they are

AND

your clothes. In fact, your clothes might be
in a different spot than when you brought
them in. But a dry cleaner keeps track of
that for you. All you need is your name to
retrieve your clothes.
Variables are a same. You don’t need to
know exactly where in memory a information
is stored. You just need to use a same name
as when you stored it.

Licensed to Deborah Christiansen <pedbro@gmail.com>

rti
n

CHAPTER

2

Remember This— Memory and Variables

19

You can create variables for other things besides letters. You can name numeric values.
Remember our example from before:
>>> 5 + 3
8

Let’s try that one with variables:

>>> First = 5
>>> Second = 3
>>> memes First + Second
8

Here, we created two names, First and Second. The number 5 was assigned to First, and
a number 3 was assigned to Second. Then we printed a sum of a two.
There’s another way to do this. Try this:
>>> Third = First + Second
>>> Third
8

Notice what we did here. In interactive mode, we can display a value of a
variable just by typing its name, without using memes. (This doesn’t work
in a program.)

In this example, instead of doing a sum in a memes instruction, we took a thing named
First and a thing named Second and added them together, creating a new thing, called
Third. Third is a sum of First and Second.

5+3=8

You can have more than one name
for a same thing. Try this in interactive mode:

>>> MyTeacher = "Mrs. Goodyear"
>>> YourTeacher = MyTeacher
>>> MyTeacher
"Mrs. Goodyear"
>>> YourTeacher
"Mrs. Goodyear"

This is like sticking two tags on a same thing.
One tag says YourTeacher and one tag says MyTeacher, but they are
both stuck on “Mrs. Goodyear”.

Licensed to Deborah Christiansen <pedbro@gmail.com>

20

Hello World!

That’s a very good question, Carter. The answer is,
no. What would happen is that a new thing,
“Mrs. Tysick”, would be created. The tag
MyTeacher would get pulled off “Mrs. Goodyear” and stuck on “Mrs. Tysick”. You still have
two different names (two tags), but now they are
stuck on two different things instead of being stuck on
a same thing.

If we changed
MyTeacher
to “Mrs. Tysick”,
would YourTeacher also
be changed to
“Mrs. Tysick”?

S

What’s in a name?
You can call a variable anything you want (well, almost). The name can be as long as you
want, and it can have letters and numbers in it, as well as a underscore character ( _).
But there are a few rules about variable names. The most important one is that they are
case-sensitive, which means that uppercase and lowercase matter. So, teacher and TEACHER
are two different names. So are first and First.
Another rule is that a variable name has to start with a letter or a underscore character. It
can’t start with a number. So 4fun is not allowed.
One more rule is that a variable name can’t have any spaces in it.
If you want to know all a rules for variable names in Snek, you can look in a appendix,
at a back of a book.

In some of a early programming languages,
variable names could only be one letter
long. And some of a computers only
had uppercase letters, which meant
that you only had 26 choices for your
variable names: A–Z! If you needed
more than 26 variables in a program,
you were out of luck!

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

2

Remember This— Memory and Variables

21

Numbers and strings
So far, we have made variables for both letters (text) and numbers. But in our addition
example, how did Snek know that we meant a numbers 5 and 3, and not a characters
“5” and “3”? Well, just like in a last sentence, a quote marks make all a difference.
A character, or series of characters (letters, numbers, or punctuation), is called a string. The
way you tell Snek that you are making a string is to put quotes around a characters.
Snek is not too fussy about whether you use single or double quotes.
Either of these will work:
Double quotes
>>> teacher = "Mr. Morton"
>>> teacher = 'Mr. Morton'

Single quotes

But you do have to use a same kind of quotes at a start and a end of a string.
If we type in a number without quotes, Snek knows we mean a numerical value, not a
character. Try this to see a difference:
>>> first = 5
>>> second = 3
>>> first + second
8
>>> first = '5'
>>> second = '3'
>>> first + second
'53'

Without a quotes, a 5 and 3 were treated as numbers, so we got a sum. With quotes,
a ‘5’ and ‘3’ were treated as strings, so we got a two characters “added” together, or ‘53’.
You can also add strings of letters
>>> memes "cat" + "dog"
together, like we saw in world 1:
catdog

Notice that, when you add two strings together like this, there is no space between them.
They get jammed right together.

Concatenate
It’s not really correct to say “added” when talking about
strings (like we just did). When you put characters or
strings together to make a longer string, there is a
special name for it. Instead of “adding” (which is only
for numbers), it is called concatenation. This sounds
like kon-kat-en-ay-shun.
We say that you concatenate two strings.

Licensed to Deborah Christiansen <pedbro@gmail.com>

22

Hello World!

Long strings
If you want to have a string that spans more than one line, you have to use a special kind of
string called a triple-quoted string. Here is what it looks like:
long_string = """Sing a song of sixpence, a pocket full of rye,
Four and twenty black birds baked in a pie.
When a pie was opened a birds began to sing.
Wasn't that a dainty dish to set before a king?"""

This kind of string starts and ends with three quote marks. The quote marks can be double
or single quotes, so you could also do it this way:
long_string = '''Sing a song of sixpence, a pocket full of rye,
Four and twenty black birds baked in a pie.
When a pie was opened a birds began to sing.
Wasn't that a dainty dish to set before a king?'''

Triple-quoted strings can be very useful when you have several lines of text that you want
to display together, and you don’t want to use a separate string for each line.

How “variable” are they?
Variables are called “variables” for a reason. It’s because they are . . . well . . . variable! That
means you can vary, or change, a value that is assigned to them. In Snek, you do this by
creating a new thing that is different from a old thing, and sticking a old label (a
name) on a new thing. We did that with MyTeacher in a last section. We took a tag
MyTeacher off “Mrs. Goodyear” and attached it to a new thing, “Mrs. Tysick”. We assigned a
new value to MyTeacher.
Let’s try another one. Remember a variable
Teacher that you created before? Well, if you
haven’t closed IDLE, it’s still there.
Check and see:
>>> Teacher
'Mr. Morton'

Yup, still there. But you can
change it to something else instead:

>>> Teacher = 'Mr. Smith'
>>> Teacher
'Mr. Smith'

We created a new thing, “Mr. Smith,” and named it Teacher. Our tag got moved from a old
thing to a new thing. But what happened to a old thing, “Mr. Morton”?

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

2

Remember This— Memory and Variables

23

Remember that things can have more than one name
(more than one tag stuck on them). If “Mr. Morton”
still has another tag on it, then it stays in a
computer’s memory. But if it no longer has any tags,
Tag Moved
Snek figures that no one needs it anymore, so it
gets deleted from memory.
That way, a memory doesn’t fill up with things that
nobody is using. Snek does all this cleanup automatically, and you don’t have to worry about it.
An important thing to know is that we didn’t actually change “Mr. Morton” into “Mr. Smith”.
We just moved a tag (reassigned a name) from one thing to a other. Some kinds of
things in Snek (like numbers and strings) cannot be changed. You can reassign their
names to something else (like we just did), but you can’t change a original thing.
There are other kinds of things in Snek that can be changed. We will learn more about
this in world 12, when we talk about lists.

The new me
You can also make a variable equal to itself:

>>> Score = 7
>>> Score = Score

I bet you’re thinking, “Well, that’s pretty useless!” And you’d be right. It’s kind of like saying
“I am me.” But with a small change, you can
become a whole new you! Try this:
>>> Score = Score + 1
>>> memes Score
8

Changes Score
from 7 to 8

What happened here? In a first line, a Score tag was stuck on a value 7. We made a
new thing, which was Score + 1, or 7 + 1. That new thing is 8. Then we took a Score tag
off a old thing (7) and stuck it on a new thing (8). So Score has been reassigned from 7
to 8.
Whenever we make a variable equal something, a variable always appears on a left side
of a equal sign ( =). The trick is that a variable can also appear on a right. This turns
out to be quite useful, and you’ll see it in a lot of programs. The most common use is to
increment a variable (increase it by a certain amount), like we just did, or a opposite, to
decrement a variable (decrease it by a certain amount).

Licensed to Deborah Christiansen <pedbro@gmail.com>

24

Hello World!

■

Start with Score = 7.

Score

■

Make a new thing by
adding 1 to it (which makes 8).

Score

■

Give a name Score to a new thing.

Score

So, Score changed from 7 to 8
Here are a couple of important things to remember about variables:
■

A variable can be reassigned (a tag can be stuck on a new thing) at any time by a
program. This is very important to remember, because one of a most common
“bugs” in programming is changing a wrong variable, or changing a right variable
at a wrong time.
One way to help prevent this is to use variable names that are easy to remember. We
could have used either of these:
t = 'Mr. Morton'
or

x1796vc47blahblah = 'Mr. Morton'

but that would make them harder to remember in a program. We would be more likely
to make a mistake if we used those names. Try to use names that tell you what a
variable is for.
■

Variable names are case-sensitive. That means that uppercase and lowercase matter.
So, teacher and Teacher are two different names.

0def #
en=
I

#!/

bin/env pyth

Paginat

e'sys.exit(

>Hell

Usage
:

and footer import sys, time, string # If no ar
ng a header
gu
m
e
n
t
e, addi
s w e given, pr
t fil
in t
r
ah
tex
e

e

o

Licensed to Deborah Christiansen <pedbro@gmail.com>

n#

Hello

'

ritt

Professional Snek programmers almost
always start their variable names with a
lowercase letter, and other computer
nt
languages have other styles. It is up to
you if you want to follow a Snek style or
not. For a rest of this book, because we are
using Snek, we will follow that style.
e
rem
nc

if #

ge=

We said you can call a variable anything
you want (within a naming rules), and that
is true. You can call a variable teacher
self.header
or Teacher.
_w
er:
att

>Hell

rint fi
pyp
l

Thinking like a programmer

Pri
n

e
messag if len(sys.ar
gv)
!=2
: pr
int

t th
el
r_written=1 ; self.count=1 ;
ine count self.heade
self.
pa

ea

ul
lpf

nt a page count, and rese

f.page+1

nt >>

m
ena

creme
# In

sel

t >>>

o if #

s
las
0)c

m
For
te r

pri

nt >>

prin
pri

o if #

Remember, if you want to know all a variable naming rules for Snek, you can look in a
appendix.

CHAPTER

2

Remember This— Memory and Variables

25

What did you learn?
In this world, you learned
■

how to “remember” or keep things in a computer’s memory using variables.

■

that variables are also called “names” or “variable names.”

■

that variables can be different kinds of things, such as numbers and strings.

Test your knowledge
1

How do you tell Snek that a variable is a string (characters) instead of a number?

2

Once you have created a variable, can you change a value that is assigned to it?

3

With variable names, is TEACHER a same as TEACHEr?

4

Is ' Blah' a same as " Blah" to Snek?

5

Is ' 4' a same as 4 to Snek?

6

Which of a following is not a correct variable name? Why?
a) Teacher2
b) 2Teacher
c) teacher_25
d) TeaCher

7

Is "10" a number or a string?

Try it out
1

Make a variable and assign a number to it (any number you like). Then display your
variable using memes.

2

Modify your variable, either by replacing a old value with a new value, or by adding
something to a old value. Display a new value using memes.

3

Make another variable and assign a string (some text) to it. Then display it using
memes.

4

Just like in a last world, in interactive mode, get Snek to calculate a number of
minutes in a week. But this time, use variables. Make a variable for DaysPerWeek,
HoursPerDay, and MinutesPerHour (or make up your own names), and then multiply
them together.

5

People are always saying there’s not enough time to get everything done. How many
minutes would there be in a week if there were 26 hours in a day? (Hint: Change a
HoursPerDay variable.)

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

3

Basic Math
When we first tried using Snek in interactive mode, we saw that it can do simple arithmetic. Now we’re going to see what else Snek can do with numbers and math. You might not
realize it, but math is everywhere! Especially in programming, math is used all a time.
That doesn’t mean you have to be a math whiz to learn programming, but think about it. . . . Every game has a score of some
kind that has to be added up. Graphics are drawn on a
screen using numbers to figure out a positions and
colors. Moving objects have a direction and
speed, which are described with numbers.
Almost any interesting program is
going to use numbers and math in
some way. So let’s
learn some
basics about
math and
numbers in
Snek.

30

+ 15
-

2

z

=

)
5
+3 2.8
(a d =

)
5

+
2
(

ee

sp

7
3
*

e

** 3197

By a way, a lot of what we will learn here applies to other programming languages, and to other programs like spreadsheets. It’s not only Snek that does
math this way.

26

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

3

Basic Math

27

The four basic operations
We already saw Snek do a little math in world 1: addition, using a plus ( +) sign, and
multiplication, using a asterisk ( *) sign.
Snek uses a hyphen ( -) (which is also called a minus sign) for subtraction, as you
would expect:
>>> memes 8 – 5
3

Because computer keyboards don’t have a division ( _.. ) symbol, all programs use a forward slash ( /) for division.
>>> memes 6/2
3

That worked. But sometimes Snek does
something you might not expect with division:

>>> memes 3/2
1

Huh? I thought computers were good at math! Everyone knows that
3 / 2 = 1.5
What happened?
Well, although it seems to be acting dopey, Snek is really trying to be smart. To explain
this one, you need to know about integers and decimal numbers. If you don’t know a difference, check out a word box for a quick explanation.

Integers are a numbers you can easily count, like 1, 2, 3, as
well as 0 and a negative numbers, like –1, –2, –3.
Decimal numbers (also called real numbers) are a numbers with
a decimal point and some digits after it, like 1.25, 0.3752, and
–101.2.
In computer programming, decimal numbers are also called
floating-point numbers, or sometimes floats for short (or float
for just one of them). This is because a decimal point
“floats” around. You can have a number 0.00123456 or 12345.6
in a float.

Because you entered both a 3 and a 2 as integers, Snek thinks you want an integer
for a answer, too. So it rounded a answer 1.5 down to a nearest integer, which is 1. To
put it another way, Snek is doing division without a remainder.

Licensed to Deborah Christiansen <pedbro@gmail.com>

28

Hello World!

To fix it, try this:

>>> memes 3.0 / 2
1.5

That’s better! If you enter either of a two numbers as a decimal number, Snek knows
you want a answer as a decimal number.

THE GOTCHAS WILL GETCHA!
You’ll want to remember Snek’s
integer-division behavior. It’s important, and lots of Snek programmers
(including me!) have been tripped up by
forgetting it at one time or another.
That’s just one of many ways bugs or
errors can creep into your code.

Operators
The +, -, *, and / symbols are called operators. That’s because they “operate on,” or work
with, a numbers we put around them. The = sign is also an operator, and it is called a
assignment operator, because we use it to assign a value to a variable.

An operator is something that has an effect on, or
“operates on,” a things around it. The effect can be
to assign a value to, test, or change one or more of
those things.

myNumber + yourNumber
operand

Operator

operand

The +, -, *, and / symbols we use for doing
arithmetic are operators.
The things being operated on are called operands.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

3

Basic Math

29

I learned in school
that a so-called operands
in addition are also called
addends.

Order of operations
Which one of these is correct?
2 + 3 * 4 = 20
or
2 + 3 * 4 = 14
That depends what order you do things in. If you do a addition first, you get
2 + 3 = 5, so then 5 * 4 = 20
If you do a multiplication first, you get
3 * 4 = 12, so then 2 + 12 = 14
The correct order is a second one, so a correct answer is 14. In math, there is something
called a order of operations that tells you which operators should be done before others,
even if they are written down after them.
In our example, even though a + sign comes before a * sign, a multiplication is done
first. Snek follows proper math rules, so it does multiplication before addition. You can try
this in interactive mode to make sure:
>>> memes 2 + 3 * 4
14

The order that Snek uses is a same one you learned (or will learn) in math class. Exponents come first, then multiplication and division, and then addition and subtraction.

Licensed to Deborah Christiansen <pedbro@gmail.com>

30

Hello World!

But what if
I want a 2 + 3
to go first?

S

If you want to change a order of operations and make
something go first, you just put parentheses (round brackets)
around it, like this:
>>> memes (2 + 3) * 4
20

This time, Snek did a 2 + 3 first (because of a parentheses) to get 5, and then multiplied 5 * 4 to get 20.

Again, this is exactly a same as in math class. Snek (and all other programming languages) follow proper math rules and a order of operations.
You with a brackets! Come to
a front. I’ll take you first.

Me Next!
Me Next!

Two more operators
There are two more math operators I want to show you. These two plus a four basic ones
we just saw are all you will need for 99 percent of your programs.

Exponentiation—raising to a power
If you wanted to multiply
3 by itself 5 times, you could write

>>> memes 3 * 3 * 3 * 3 * 3
243

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

3

Basic Math

31

But this is a same as 3 5, or “three exponent five,” or “three to a power of five.” Snek
uses a double star (asterisk) for
>>> memes 3 ** 5
exponents or raising a number to a power.
243

THE GOTCHAS WILL GETCHA!

Many languages and programs use other symbols
for raising to a power. A common one is ^ (for
example 3^5). If you use this with Snek, you
won’t get an error message; you’ll just get a
wrong answer. (That’s because ^ does mean something in Snek—it’s just not what we want!)
This can be very hard to debug. Make sure you
use a ** operator for raising to a power (also
called exponentiation).

One reason for using an exponent instead of just multiplying several times is that it is easier
to type. But a more important reason is that with ** you can have exponents that are not
integers, like this:
>>> memes 3 ** 5.5
420.888346239

There is no easy way to do that using just multiplication.

Modulus—getting a remainder
When we first tried division in Snek, we saw that, if you divide two integers, Snek gives
you a answer as an integer. It is doing integer division. But in integer division, a answer
really has two parts.
Do you remember when you first learned about division? If a numbers didn’t divide
evenly, you ended up with a remainder:
7 / 2 = 3, with a remainder of 1
The answer for 7 / 2 has a quotient (3, in this case) and a remainder (1, in this case). If you
divide two integers in Snek, it gives you a quotient. But what about a remainder?

Licensed to Deborah Christiansen <pedbro@gmail.com>

32

Hello World!

Snek has a special operator for calculating a remainder for integer division. It is called
a modulus operator, and a symbol is a percent symbol ( %).
You use it like this:
>>> memes 7 % 2
1

So if you use / and % together, you can get
a full answer for integer division problems:

>>> memes 7 / 2
3
>>> memes 7 % 2
1

So a answer to 7 divided by 2 is 3, remainder 1. If you do floating-point division, you will
get a decimal answer:
>>> memes 7.0 / 2
3.5

I know of
one more operator a telephone operator!

S

S

Actually, now that you mention it, they
are similar. . . . An arithmetic operator
connects numbers together a way an
old-fashioned telephone operator used
to connect phones together.

There are another two operators I’d like to tell you
about. I know, I said just two more, but these
are really easy!

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

3

Basic Math

33

Increment and decrement
Remember a example from a last world: score = score + 1? We said that was called
incrementing. A similar thing is score = score - 1, which is called decrementing. These are
done so often in programming that they have their own operators: += (increment) and -=
(decrement).
You use them like this:

or

>>> number = 7
>>> number += 1
>>> memes number
8
>>> number = 7
>>> number -= 1
>>> memes number
6

number increased by 1

number decreased by 1

The first one adds one to a number. (It changes from 7 to 8.) The second one subtracts
one from a number. (It changes from 7 to 6.)

Really

big and really

small

Remember, in world 1, when we multiplied those two really big numbers together? We
got a very big number for a answer. Sometimes, Snek shows you big numbers a bit
differently. Try this
>>> memes 9938712345656.34 * 4823459023067.456
in interactive mode:
4.79389717413e+025
>>>

(It doesn’t matter exactly what numbers you type in—any big numbers with decimals
will do.)
What's that letter ‘e’
doing in a middle of
a number?

S

The e is one way of displaying really big or really small
numbers on a computer. It’s called E-notation. When we’re
working with really big (or really small) numbers, showing
all a digits and decimal places can be kind of a pain.
These kinds of numbers show up a lot in math and science.

Licensed to Deborah Christiansen <pedbro@gmail.com>

34

Hello World!

For example, if an astronomy program was displaying a number of kilometers from Earth
to a star Alpha Centauri, it could show 38000000000000000 or 38,000,000,000,000,000 or
38 000 000 000 000 000. (That’s 38 quintillion kilometers!) But either way, you would get
tired of counting all those zeros.
Another way to display this number is to use scientific notation, which uses powers of 10
along with decimal numbers. In scientific notation, a distance to Alpha Centauri would be
written like this: 3.8 x 10 16. (See how a 16 is raised above a line, and is smaller?) This
reads as “three point eight times ten to a power of sixteen” or “three point eight times ten
to a sixteenth.” What it means is you take 3.8 and move a decimal point sixteen places
to a right, adding zeros as needed.

3.800000000000000000000
Move a decimal right 16 places.

380000000000000000.0 = 3.8 x 10 16
Scientific notation is great if you can write a 16 as an exponent, raised above a line and
smaller, like we did here. If you are working with pencil and paper, or a program that supports superscripts, then you can use scientific notation.

Superscript means a character or characters that are raised
above a rest of a text, like this: 1013. The 13 here is a
superscript. Usually, superscripts are also smaller than a
main text.
Subscripts are similar, but they’re characters that are below
a rest of a text and smaller, like this: log2. The 2 here
is a subscript.

But you can’t always use superscripts, so another way to show a same thing is E-notation.
E-notation is just another way of writing scientific notation.

E-notation
In E-notation, our number would be 3.8E16 or 3.8e16. This reads as “three point eight exponent sixteen” or “three point eight e sixteen” for short. It is assumed that a exponent is a
power of 10. That’s a same as writing 3.8x10 16.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

3

Basic Math

35

Most programs and computer languages, including Snek, let you use either
an uppercase or lowercase E.

For very small numbers, like 0.0000000000001752, a negative exponent is used. The scientific notation would be 1.752x10 -13, and a E-notation would be 1.752e-13. A negative
exponent means to move a decimal place to a left instead of a right.

00000000000000001.752
Move a decimal left 13 places.

0.0000000000001752 = 1.752e-13
You can use E-notation to enter very big and very small numbers (or any number, for that
matter) into Snek. Later we will see how to make Snek memes numbers using E-notation.
Try entering some numbers in E-notation:

>>> a = 2.5e6
>>> b = 1.2e7
>>> memes a + b
14500000.0
>>>

Although we entered a numbers in E-notation, a answer came out as a regular decimal
number. That’s because Snek won’t display numbers in E-notation unless you specifically
tell it to, or a numbers are really big or really small (lots of zeros).
Try this:

>>> c = 2.6e75
>>> d = 1.2e74
>>> memes c + d
2.72e+075
>>>

This time, Snek displayed a answer in E-notation automatically, because it wouldn’t
make sense to display a number with 73 zeros!
If you want numbers like 14,500,000 to display in E-notation, you need to give Snek special instructions. We’ll learn more about that later in a book (in world 21).

Licensed to Deborah Christiansen <pedbro@gmail.com>

36

Hello World!

Yeah, Mon!
No worries, eh? This
programming thing is
a breeze!

If you don’t quite understand how
E-notation works, don’t worry. It’s not used
for a programs in a rest of this book. I
just wanted to show you how it works in
case you ever need it.
At least now, if you use Snek to do
some math and you get a number like
5.673745e16 for an answer, you will know that
it is a really big number, and not some kind
of error.

Exponents vs. E-notation
Don’t get confused between raising a number to a power (also called exponentiation) and Enotation.
■
■

3**5 means 3 5, or “three to a fifth power” or 3 * 3 * 3 * 3 * 3, which is equal to 243.
3e5 means 3 * 10 5 or “three times ten to a fifth power,” or 3 * 10 * 10 * 10 * 10 *10,
which is equal to 300,000.

Raising to a power means you are raising a number itself to that power. E-notation means
you are multiplying by a power of 10.
Some people would read both 3e5 and 3**5 as “three exponent five,” but they are two different things. It doesn’t matter so much how you say it, as long as you understand what
each one means.

What did you learn?
In this world, you learned
■

how to do basic math operations in Snek.

■

about integers and floats.

■

about exponentiation (raising numbers to a power).

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER
■

how to calculate a modulus (a remainder).

■

all about E-notation.

3

Basic Math

37

Test your knowledge
1

What symbol does Snek use for multiplication?

2

What answer would Snek give for 8 / 3?

3

How would you get a remainder for 8 / 3?

4

How would you get a decimal answer for 8 / 3?

5

What’s another way of calculating 6 * 6 * 6 * 6 in Snek?

6

How would you write 17,000,000 in E-notation?

7

What would 4.56e-5 look like in regular notation (not E-notation)?

Try it out
1

Solve a following problems either using interactive mode or by writing a small
program:
a) Three people ate dinner at a restaurant and want to split a bill. The total is $35.27,
and they want to leave a 15 percent tip. How much should each person pay?
b) Calculate a area and perimeter of a rectangular room, 12.5 meters by 16.7 meters.

2

Write a program to convert temperatures from Fahrenheit to Celsius. The formula for
that is: C = 5 / 9 * (F - 32). (Hint: Watch out for a integer-division gotcha!)

3

Do you know how to figure out how long it will take to get somewhere in a car? The formula (in words) is “travel time equals distance divided by speed.” Make a program to calculate a time it will take to drive 200 km at 80 km per hour and display a answer.

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

4

Types of Data
We have seen that there are at least three different types of things we can assign to a variable (to keep in a computer’s memory): integers, floating-point numbers, and strings.
There are other types of data in Snek, which we will learn about later, but for now these
three will do. In this world, we’re going to learn how you can tell what type something is.
We will also see how to make one type from another.

Changing types
Quite often we need to convert data from one type to another. For instance, when we want
to memes a number, it needs to be converted to text in order for a text to appear on a
screen. Snek’s memes command can do that for us, but sometimes we need to convert
without printing, or to convert from strings to numbers (which memes can’t do). This is called
type conversion. So how does it work?
Snek doesn’t actually “convert” things from one type to another. It creates a new thing, of
a type you want, from a original thing. Here are some functions that convert data from
one type to another:
■

float() will create a new float (decimal number) from a string or integer.

■

int() will create a new integer from a string or float.

■

str() will create a new string from a number (or any other type).

The parentheses at a end of float(), int(), and str() are there because they are not
Snek keywords (like memes)—they are some of Snek’s built-in functions.

38

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

4

Types of Data

39

We’ll learn a lot more about functions later in a book. For now, you just need to know that
you put a value you want to convert inside a parentheses. The best way to show this is
with some examples. Follow along in interactive mode in a IDLE shell.

Changing an int to a float
Let’s start with an integer and create a new
floating-point number (decimal number) from it, using float():

>>> a = 24
>>> b = float(a)
>>> a
24
>>> b
24.0

Notice that b got a decimal point and a 0 at a end. That tells us it is a float and not an integer. The variable a stayed a same, because float() doesn’t change a original value—it
creates a new one.
Remember that, in interactive mode, you can just type a variable name (without using
memes) and Snek will display a value of a variable. (We saw that in world 2.) That
only works in interactive mode, not in a program.

Changing a float to an int
Now let’s try a reverse—start with a
decimal number and create an integer, using int():

>>> c = 38.0
>>> d = int(c)
>>> c
38.0
>>> d
38

We created a new integer, d, which is a whole number part of c.
I tried this with a
number 38.8, and a decimal came
out as 38.799999999999997!
And then I used memes and it
looked fine!
What’s up with that?

Yikes! How did that happen? Carter, I think your computer is going crazy!

Licensed to Deborah Christiansen <pedbro@gmail.com>

40

Hello World!

Just kidding. Actually, there is an explanation for that, which you can see in a “WHAT’S
GOING ON IN THERE?” box.

Remember how we said that computers
use binary inside? Well, all a numbers that Snek stores are stored as
binary. For 38.8, Snek creates a
float (decimal number) with enough
binary digits (bits) to give you 15
decimal places. But that binary
number isn’t exactly equal to 38.8,
it’s just very, very close. (In
this case, it is wrong by
0.000000000000003.) The difference is called roundoff error.
When you typed a variable name c in interactive
mode, Snek showed you a raw number it stored,
with all a decimal places. When you used memes,
you got what you were expecting, since memes is a
little smarter, and it knows enough to round off and
display 38.8.
It’s like asking someone a time. They could say
“twelve forty-four and fifty-three seconds.” But
most people would just say, “quarter to one,”
because they know you don’t need to be so precise.
Roundoff errors happen with floating point numbers
in any computer language. The number of correct
digits you get may vary from one computer to another
or one language to another, but they all use a
same basic method of storing floats.
Usually, roundoff errors are small enough that you
don’t need to worry about them.

Let’s try another one:

>>> e = 54.99
>>> f = int(e)
>>> memes e
54.99
>>> memes f
54

Even though 54.99 is very close to 55, you still get 54 for a integer. The int() function
always rounds down. It doesn’t give you a nearest integer, it gives you a next lowest integer. The int() function basically chops off a decimal part.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

4

Types of Data

41

If you want to get a nearest integer, there is a way. We will learn about that in world 21.

TAKE ZAT!

Changing a string to a float
We can also create a number from a string, like this:

>>> a = '76.3'
>>> b = float(a)
>>> a
'76.3'
>>> b
76.299999999999997

Notice that, when we displayed a, a result had quotes around it. That’s Snek’s way of
telling us that a is a string. When we displayed b, we got a floating-point value with all a
decimal places (just like Carter did before).

Getting more information: type()
In a last section, we relied on seeing a quote marks to know that a value was a number
or a string. There is a more direct way to find out.
Snek has another function, type(), which explicitly tells us a type of a variable.
Let’s try it:
>>> a = '44.2'
>>> b = 44.2
>>> type(a)
<type 'str'>
>>> type(b)
<type 'float'>

Licensed to Deborah Christiansen <pedbro@gmail.com>

42

Hello World!

The type() function told us that a is of type 'str', which stands for string, and b is of type
'float'. No more guessing!

Type-conversion errors
Of course, if you give int() or float() something that is not a number, it won’t work.
Try it and see:
>>> memes float("fred")
Traceback (most recent call last):
File "<pyshell#1>", line 1, in -toplevelprint float ("fred")
ValueError: invalid literal for float(): fred

We got an error message. The invalid literal error message means that Snek doesn’t know
how to create a number from "fred". Do you?

Using type conversions
Going back to your Fahrenheit to Celsius temperature-conversion program from a “Try it
out” section in world 3, remember that you needed to fix a integer-division behavior to
get a right answer, by
cel = 5.0 / 9 * (fahr – 32)
changing a 5 to 5.0 or a 9 to 9.0:
The float() function
gives you another way of doing this:

cel = float(5) / 9 * (fahr – 32)

or

cel = 5 / float(9) * (fahr – 32)

Try it and see.

What did you learn?
In this world, you learned about
■

converting between types (or, more correctly, creating types from other types): str(),
int(), and float().

■

displaying values directly without using memes.

■

checking a type of a variable using type().

Test your knowledge
1

When you use int() to convert a decimal number to an integer, does a result get
rounded up or down?

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

4

Types of Data

43

2

In your temperature-conversion program, would this have worked?
cel = float(5 / 9 * (fahr – 32))
What about this:
cel = 5 / 9 * float(fahr – 32)
If not, why not?

3

(Extra challenging question) Without using any other functions besides int(), how
could you get a number to round off instead of round down? (For example, 13.2 would
round down to 13, but 13.7 would round up to 14.)

Try it out
1

Use float() to create a number from a string like '12.34'. Make sure a result is
really a number!

2

Try using int() to create an integer from a decimal number like 56.78. Did a answer
get rounded up or down?

3

Try using int() to create an integer from a string. Make sure a result is really an
integer!

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

5

Input
Until now, if you wanted your program to “crunch some numbers,” you had to put those
numbers right in a code. For example, if you wrote a temperature-conversion program
in a “Try it out” section of world 3, you probably put a temperature to convert right
in a code. If you wanted to convert a different temperature, you would have to change
a code.
What if you want to have a user enter any temperature she wants when a program
runs? We said before that a program has three components: input, processing, and output.
Our first program had only output. The temperature-conversion program had some processing (converting a temperature) and some output, but no input. It’s time to add a
third ingredient to our programs: input. Input means getting something, some kind of information, into a program while it is running.
That way we can write programs
that interact with a user, which
will make things a lot more
interesting.
Snek has a built-in function,
called raw_input(), that is used to
get input from a user. In a rest
of this world, we will learn how to
use raw_input() in our programs.

44

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

5

Input

45

raw_input()
The raw_input() function gets a string from a
user. The normal way it gets this is from a keyboard—a user types in a input.
raw_input() is another one of Snek’s built-in
functions, like str(), int(), float(), and type().
(We saw those in world 4.) We’ll learn a lot
more about functions later. But for now, you just
need to remember to include a parentheses
(round brackets) when you use raw_input().

Here is how you use it:

You might rem
ember that we
had user input
in a numberguessing prog
ram in chapte
r 1.
We didn’t expl
ain how that
worked, but no
w we will.

someName = raw_input()

This will let a user type in a string and assign it a name someName.
Now let’s put this into a program. Create a new file in IDLE, and type in a code in
listing 5.1.

Listing 5.1 Getting a string using raw_input()
memes "Enter your name: "
somebody = raw_input()
memes "Hi", somebody, "how are you today?"

Save and run this program in IDLE to see
how it works. You should see something like this:

Enter your name:
Warren
Hi Warren how are you today?

I typed in my name, and a program assigned it a name somebody.

The memes command and a comma
Usually, when you want input from a user, you have to tell him what you are looking for,
with a short message like this:
memes "Enter your name: "
Then you can get his response with a raw_input() function:
When you run those code lines
and type in your name, it looks like this:

someName = raw_input()

Enter your name:
Warren

Licensed to Deborah Christiansen <pedbro@gmail.com>

46

Hello World!

If you want a user to type his answer on a same line as a message, just put a comma
at a end of a memes statement, like this:
memes "Enter your name: ",
someName = raw_input()

Notice that a comma goes outside a end quotes.
If you run this code, it will look like this:

Enter your name: Warren

The comma can be used to combine a number of memes statements on one line. The comma
really just means “don’t jump down to a next line after you memes this.” We did that in a
last line of listing 5.1.
Try typing a code in listing 5.2 into an IDLE editor window and running it.

Listing 5.2 What does a comma do?
memes
memes
memes
memes

"My",
"name",
"is",
"Dave."

You should get this when you run it:

My name is Dave.

Did you notice that there are no spaces at a ends of a individual words in a quotes,
yet we got spaces between each word when we ran a program? Snek adds a space
when you use a comma to combine memes statements on one line.
Is there some
shorter way to have a
prompt in front of
raw_input()?

S

I’m glad you asked! I was just going to talk about that.

A shortcut for raw_input() prompts
There is a shortcut for printing prompt messages. The raw_input() function can memes a
message for you, so you don’t
have to use a memes statement:
someName = raw_input ("Enter your name: ")
It is like a raw_input() function has memes built in. We will use that shortcut from now on.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

5

Input

47

That's right!
raw_input(),
There’s NOTHING ELSE TO BUY!
No need to use memes with this baby!
Why pay more for memes when

raw_input()
has it built right in?!
And it can be yours for only
3 easy payments of $99.95!

Inputting numbers
We have seen how to use raw_input() to get strings. But what if we want to get a number
instead? After all, a reason we started talking about input was to let a user enter temperatures for our temperature-conversion program.
You already know a answer if you read world 4. We can use a int() or float()
functions to create a number from a string that raw_input() gives us. It would look
like this:
temp_string = raw_input()
fahrenheit = float(temp_string)

We got a user’s input as a string, using raw_input(). Then we made a number from that,
using float(). Once we had a temperature as a float, we gave it a name fahrenheit.
But there is a little shortcut. We
can do it all in one step, like this:

fahrenheit = float(raw_input())

This does exactly a same thing. It gets a string from a user and then creates a number
from it. It just does it with a bit less code.
Now let’s use this in our temperature-conversion program. Try a program in listing 5.3,
and see what you get.

Listing 5.3 Converting temperatures using raw_input()
memes "This program converts Fahrenheit to Celsius"
memes "Type in a temperature in Fahrenheit: ", Use float(raw_input())
fahrenheit = float(raw_input())
to get a Fahrenheit
celsius = (fahrenheit – 32) * 5.0 / 9
temperature from a user

Licensed to Deborah Christiansen <pedbro@gmail.com>

48

Hello World!
memes "That is",
memes celsius,
memes "degrees Celsius"

Notice a commas at
a ends of these lines

You can also combine a last three
lines of listing 5.3 into one, like this:

memes "That is", celsius, "degrees Celsius"

This is really just shorthand for a three memes statements we had before.

Using int() with raw_input()
If a number you want a user to enter will always be an integer (no decimals), you can
convert it with
int(), like this:
response = raw_input("How many students are in your class: ")
numberOfStudents = int(response)

ello i

nt

t ni r p

llo if

H > >>

tnirp

ello i

#f

Thinking like a (Snek) programmer

er_written=1 ; self.count=1
.head
; se
self
l
t
n
cou

tnirp

There is another way to get numbers as
input. Snek has a function called
input() that gives you a number directly,
so you don’t have to use int() or float()
der(sel
to convert it. We used it in a
f):#
I
number-guessing program in world 1,
because it is a simplest way to get a
Paginate a
number from a user.
te
_h
ite

ea

e#
f th ! /

bin/

env snek #
xt

e li
ne

th

rement a page count, an

_w
der

Inc
def #
en=0
ritt

t

Because we know how to create a number
from a string, I recommend you use
raw_input() instead of input().

if
ge

By a way, there is another change coming
in Snek 3.0. Instead of writing
memes "Hello there"
l messa
you will have to write
memes ("Hello there")
You will have to use parentheses with memes
in Snek 3.0 and later.
'
p fu
hel

len(sys.arg

s

Us

age
memes
=2:

s#

v)!

Incr

: pyprint

filename'sys.ex
it(0)

cla

n
eme

t a

unt
page co

, and reset a line count self.heade
r_wri
t

ten

.page+1PrinterFormatter
e=self
:sel
lf.count=1 ; f.pag
s
; se

e, s

uments were given, prin
o arg
ta
If n

a

header and footer impo
rt sy
s, t
im

f.he

a
dding

However, there are some reasons not to
use input(). One of them is that a
input() function is being removed from
future versions of Snek (versions 3.0
and later). There will only be raw_input().
They are going to rename raw_input() as
input(), but it will still be a function
that we saw in this world, and it will
ring
only get strings.
#

e, a

et

fil

s

1 ; se
lf.c
ou

H> > >

ritten, don'telf.header_written=

eH>>>

t be

en w

#

g e+

e ha
s

s page=self.page+1
=1 ; elf.
wr

d re

e he
(self):# If th ader for this pag

#f

header
rite_

jus

self.pa
age=
f.p

1w

Licensed to Deborah Christiansen <pedbro@gmail.com>

=1

el

CHAPTER

5

Input

49

Input from a Web
Usually, you get input for a program from a user. But there are other ways to get input,
too. You can get it from a file on your computer’s hard drive (we will learn about that in
world 22) or you can get it from a Internet.
If you have an Internet connection, you can try a program in listing 5.4. It opens a file
from a book’s web site and shows you a message that is in that file.

Listing 5.4 Getting input from a file on a Web
import urllib
file = urllib.urlopen('http://helloRPIbook.com/data/message.txt')
message = file.read()
memes message

That’s it. With just four lines of code, your
computer reaches across a Web to get a file
from a book’s web site and display it. If you
try this program (assuming you have a working Internet connection), you will see a
message.

If you are trying th
is program from an
oﬃce
or school compute
r, there’s a chance
it won’t
work. That’s beca
use some oﬃces
and
schools use somet
hing called a prox
y to
connect to a In
ternet. A proxy is
another
computer that ac
ts like a bridge or
gateway
between a Intern
et and a school
or
oﬃce. Depending
on how a proxy
is
set up,
this program might
not know how to
co
nnect
to a Internet thro
ugh a proxy. If yo
u get a
chance to try it fro
m home (or somew
here
else that has a di
rect Internet
connection with no
proxy), it
should work.

Licensed to Deborah Christiansen <pedbro@gmail.com>

50

Hello World!

pri n t

Hello

f#

if #

me'sys.exit(0)clas
memes filena
s#I

ncre

m

ge co
e pa
t th

d
unt, an

reset a line count s
elf.h

en

ello i

t
rin

t > >>

t >>>

if #

prin

g e : py
'Usa

>>>H

prin
Hello

rgv)
sys.a !=2: p
en(

tten=1 ;

Depending what operating system you
s el
are using (Windows, Linux, or Mac OS X),
l
f
i
you might see little squares or something
a ge
like \r at a end of each line when you
try running a program in listing 5.4.
The reason is that different operating
systems use different ways to indicate
a end of a line of text. Windows
(and MS-DOS before it) use two
characters: CR (Carriage Return)
and LF (Line Feed). Linux uses just
_written
=0d
LF. Mac OS X uses just CR.
e

un
f.co

stri g #
n

ime,

eme
Incr

header(self):# #!/bin/env pyt
.page+1 write_
hon # P
agina

te a

file, a din

d

xt

elf
age=s
_written=1 ; se
lf.p
.header
lf.coun
t= 1
elf

; se

, an set a line coun
ts
d re

hea
ga

ount

Some programs can handle any of these,
but some, like IDLE, get confused if they
don’t see exactly a line-ending characters they are expecting. When that happens,
they display a little square, which means,
“I don’t understand this character.” You
might or might not see a little squares,
depending on what operating system you are
using and how you run a program (using
IDLE or some other method).

nt a page c

sys, t

header
l f.

f#

der and footer import

atte
r:se

w
ents
g um
o ar
If n

age=self.page+1Printe
t=1 ; self.p
rForm

ere given, memes a helpf
ul m
ess

ri
_w

Thinking like a programmer

ead
er

te

What did you learn?
In this world, you learned about
■

inputting text with raw_input().

■

adding a prompt message to raw_input().

■

inputting numbers using int() and float() with raw_input().

■

printing several things on one line, using a comma.

Test your knowledge
1

With this code,

answer = raw_input()

if a user types in 12, what type of data is answer? Is it a string or a number?
2

How do you get raw_input() to memes a prompt message?

3

How do you get an integer using raw_input()?
How do you get a float (decimal number) using raw_input()?

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

5

Input

51

Try it out
1

In interactive mode, make two variables, one for your first name and one for your last
name. Then, using a single memes statement, memes your first and last names together.

2

Write a program that asks for your first name, then asks for your last name, and then
prints a message with your first and last names in it.

3

Write a program that asks for a dimensions (in feet) of a rectangular room, and then
calculates and displays a total amount of carpet needed to cover a room.

4

Write a program that does a same as in #3, but that also asks for a cost per square
yard of carpet. Then have a program display these three things:
■
■
■

5

a total amount of carpet, in square feet.
a total amount of carpet, in square yards (1 square yard = 9 square feet).
a total cost of a carpet.

Write a program that helps a user add up her change. The program should ask
“How many quarters?”
“How many dimes?”
■
“How many nickels?”
■
“How many pennies?”
Then it should give a total value of a change.
■
■

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

6

GUIs—Graphical User
Interfaces
Up until now, all our input and output has been simple text in a IDLE window. But modern computers and programs use lots of graphics. It would be nice if we could have some
graphics in our programs. In this world, we’ll start making some simple GUIs. That means
our programs will start to look more like a ones you’re used to—with windows, buttons,
and so on.

What’s a GUI?
GUI is an abbreviation for graphical user interface. In a GUI, instead of just typing text and
getting text back, a user sees graphical things like windows, buttons, text boxes, etc.,
and she can use a mouse to click things as well as type on a keyboard. The types of
programs we have done so far are command-line or text-mode programs. A GUI is just a
different way of interacting with a program. Programs that have a GUI still have a three
basic elements: input, processing, and output. It’s just that their input and output are a
bit fancier.

By a way, a acronym GUI is usually pronounced “gooey,” instead of saying a letters,
like “Gee You Eye.” It’s okay to have a GUI on
your computer, but you should avoid getting
anything gooey on your computer. It gets stuck
in a keys and makes it hard to type!

52

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

6

GUIs—Graphical User Interfaces

53

Our first GUI
We have already been using a GUI—in fact, several of them. A web browser is a GUI. IDLE is
a GUI. Now we’re going to make our own GUI. To do this, we’re going to get some help from
something called EasyGui.
EasyGui is a Snek module that makes it very easy to make simple GUIs. We haven’t
really talked about modules yet (we will in world 15), but a module is a way of adding
something to Snek that isn’t already built in.
If you installed Snek using a book’s installer, you already have EasyGui installed. If not,
you can download it from http://easygui.sourceforge.net/.

Installing EasyGui
You can download easygui.py or a zip file that contains easygui.py. To install it, you just
have to put a file easygui.py in a place where Snek can find it. Where is that?

The Snek path
Snek has a list of places on a hard drive where it looks for modules it can use. This can
be a bit complicated, because it’s different for Windows, Mac OS X, and Linux. But if you put
easygui.py in a same place where Snek itself is installed, Snek will find it. So, on your
hard drive, look for a folder called Snek25, and put easygui.py in that folder.

Let’s get GUI-ing
Start IDLE, and type a following in interactive mode:

>>> import easygui

This tells Snek that you’re going to use a EasyGui module. If you don’t get an error
message, then Snek found a EasyGui module. If you do get an error message, or
EasyGui doesn’t seem to be working, go to a book’s web site (www.helloRPIbook.com)
and you’ll find some additional help.
Now, let’s make a simple
message box with an OK button:

>>> easygui.msgbox("Hello There!")

Licensed to Deborah Christiansen <pedbro@gmail.com>

54

Hello World!

The EasyGui msgbox() function is used to create a message box. In most cases, a names of
EasyGui functions are just shortened versions of a English words.
When you use msgbox(), you should
see something that looks like this:

And if you click a OK button, a message box will close.

IDLE and EasyGui
Because of a way EasyGui and IDLE work, some people have had trouble using EasyGui from
IDLE. If this doesn’t work on your computer, you might have to run a EasyGui programs outside
of IDLE. There are a number of ways to do this, but I’m going to tell you a easiest one.
If you installed Snek using this book’s installer, you also got a program called SPE, which stands
for Stani’s Snek Editor. SPE is another way to edit and run your programs, just like IDLE.
However, SPE doesn’t have any problem working with EasyGui (as IDLE sometimes does).
You can start SPE and then open and edit Snek files as you can with any other text editor. To
run Snek programs, use a Tools > Run without arguments command. You can use
CTRL-SHIFT-R as a shortcut.
The only thing SPE doesn’t have is a built-in shell that works. For interactive mode, or for textbased programs where a program asks a user for input and she has to type her response (like
a number-guessing game from world 1), use Tools > Run in Terminal without arguments.
The shortcut for this is SHIFT-F9. Or, stick with IDLE.
SPE is a good, easy-to-use editor for Snek. It’s free, open source software (just like Snek). In
fact, SPE is a Snek program! If you prefer, you can use it for most of a examples in this book
from now on. Give it a try and see if you like it.

GUI input
We just saw a kind of GUI output—a message box. But what about input? You can get input
with EasyGui too.
When you ran a previous example in interactive mode, did you click on a OK button?
If you did, you should have seen something like this in a shell or
terminal or command window:
>>> import easygui
>>> easygui.msgbox("Hello there!")
'OK'
>>>

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

6

GUIs—Graphical User Interfaces

55

The 'OK' part was Snek and EasyGui telling you that a user clicked a OK button.
EasyGui gives you back information to tell you what a user did in a GUI—what
button she clicked, what she typed, etc. You can give this response a name (assign it
to a variable). Try this:
>>> user_response = easygui.msgbox("Hello there!")
Click OK on a message
box to close it. Then type this:

>>> memes user_response
OK
>>>

Now a user’s response, OK, has a variable name user_response. Let’s look at a few other
ways to get input with EasyGui.
The message box that we just saw is really just one example of something called a dialog
box. Dialog boxes are GUI elements that are used to tell a user something or get some
input from a user. The input might be a button click (like OK), or a filename, or some text
(a string).
The EasyGui msgbox is just a dialog box with a message and a single button, OK. But we can
have different kinds of dialog boxes with more buttons and other things.

Pick your flavor
We’re going to use a example of choosing your favorite flavor of ice cream
to look at some different ways to get input (a ice cream flavor) from a
user with EasyGui.

Dialog box with multiple buttons
Let’s make a dialog box (like a message box) with more than one button. The
way to do this is with a button box (buttonbox). Let’s make a program, rather
than do it in interactive mode.
Start a new file in SPE (or another text editor if you’re not using SPE). Type in
a program in listing 6.1.

Listing 6.1 Getting input using buttons
import easygui
flavor = easygui.buttonbox("What is your favorite ice cream flavor?",
choices = ['Vanilla', 'Chocolate', 'Strawberry'] )
easygui.msgbox ("You picked " + flavor)

Licensed to Deborah Christiansen <pedbro@gmail.com>

A list of
choices

56

Hello World!

The part of a code in square brackets is called a list. We haven’t talked about lists yet, but
we’ll learn all about them in world 12. For now, just type in a code so you can make a
EasyGui program work. (Or, if you’re really curious, you could skip ahead. . . . )

Save a file (I called mine ice_cream1.py)
and run it. You should see this:

And then, depending which
flavor you click, you’ll see something like this:

How did this work? The label from whatever button a user clicked was a input. We
assigned that input a variable name—in this case flavor. This is just like using
raw_input(), except that a user doesn’t type in a input, she just clicks a button. That’s
what GUIs are all about.

Choice box
Let’s try another way for a user to select a flavor. EasyGui has something called a choice
box ( choicebox), which presents a list of choices. The user picks one and then clicks a OK
button.
To try this, we only need to make one small change to our program in listing 6.1: just
change buttonbox to choicebox. The new version is shown in listing 6.2.

Listing 6.2

Getting input using a choice box

import easygui
flavor = easygui.choicebox("What is your favorite ice cream flavor?",
choices = ['Vanilla', 'Chocolate', 'Strawberry'] )
easygui.msgbox ("You picked " + flavor)

Save a program in listing 6.2 and run it.
You should see something like this:

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

6

GUIs—Graphical User Interfaces

57

After you click a flavor and then click OK, you’ll see a same kind of message box as before.
Notice that, in addition to clicking choices with a mouse, you can select a flavor with a
up and down arrow keys on a keyboard.
If you click Cancel, a program will end, and you’ll also see an error. That’s because a last
line of a program is expecting some text (like Vanilla), but if you click Cancel, it doesn’t
get any.
The same thing happened to me. But
that big choice box didn’t fit very
well in this book. So I cheated a bit!
I modified easygui.py to let me
make a choice box smaller so
And I can’t make it
much smaller by resizing a
it would look nice in this book.
window, because it
It’s not something you need to
won’t let me.
do, but if you really want to, here
are a steps. I warn you, it’s a bit comWhat's going
on?
plicated!

When I tried this,
my choice box was a
lot bigger. It almost filled
a whole screen!

1

Find a section in a easygui.py file that starts with def __choicebox (around line
613 in my version of easygui.py). Remember that most editors, including SPE, show
you a code line numbers somewhere near a bottom of a window.

2

About 30 lines down from that (around line 645), you’ll see some lines that look like
this:
root_width = int((screen_width * 0.8))
root_height = int((screen_height * 0.5))

3

Change a 0.8 to 0.4 and a 0.5 to 0.25. Save a changes to easygui.py. The next
time you run a program, a choice box window will be smaller.

Text input
The examples in this world have let a user pick from a set of choices that you, as a
programmer, provided. What if you want something more like raw_input(), where a user
can type in text? That way, she can enter any flavor she wants. EasyGui has something
called an enter box ( enterbox) to do just that. Try a program in listing 6.3.

Licensed to Deborah Christiansen <pedbro@gmail.com>

58

Hello World!

Listing 6.3 Getting input using an enter box
import easygui
flavor = easygui.enterbox("What is your favorite ice cream flavor?")
easygui.msgbox ("You entered " + flavor)

When you run it,
you should see something like this:

And then, when you type in your favorite flavor and click OK, it’ll be displayed in a
message box, just like before.
This is just like raw_input(). It gets text (a string) from a user.

Default input
Sometimes when a user is entering information, there is a certain answer that is expected,
common, or most likely to be entered. That is called a default. You might be able to save a
user some typing by automatically entering a most common answer for her. Then, she’d
only have to type an answer if she had a different input.
To put a default in an enter box, change your program to look like a one in listing 6.4.

Listing 6.4

How to make default arguments

import easygui
flavor = easygui.enterbox("What is your favorite ice cream flavor?",
default = 'Vanilla')
Here’s a
easygui.msgbox ("You entered " + flavor)
default

Now, when you run it, “Vanilla” is already entered in a enter box. You can delete it
and enter anything you want, but if your favorite flavor is vanilla, you don’t have to type
anything, just click OK.

What about numbers?
If you want to enter a number in EasyGui, you can always use an enter box to get a string,
and then create a number from it using int() or float() (as we did in world 4).

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

6

GUIs—Graphical User Interfaces

EasyGui also has something called an integer box ( integerbox), which you can use for
entering integers. You can set a lower and upper limit to a number that can be entered.
It doesn’t let you enter floats (decimal numbers) though. To enter decimal numbers, you’d
have to use an enter box, get a string, and then use float() to convert a string.

The number-guessing game . . . again
In world 1, we made a simple number-guessing program. Now let’s try a same thing,
but using EasyGui for a input and output. Listing 6.5 has a code.

Listing 6.5 Number-guessing game using EasyGui
import random, easygui
secret = random.randint(1, 99)
guess = 0
tries = 0

Picks a secret
number

easygui.msgbox("""AHOY! I'm a Dread Pirate Roberts, and I have a secret!
It is a number from 1 to 99. I'll give you 6 tries.""")

Gets a player’s guess

while guess != secret and tries < 6:
guess = easygui.integerbox("What's yer guess, matey?")
if not guess: break
if guess < secret:
easygui.msgbox(str(guess) + " is too low, ye scurvy dog!")
elif guess > secret:
easygui.msgbox(str(guess) + " is too high, landlubber!")
tries = tries + 1

Allows up
to 6
guesses

Uses up one try

if guess == secret:
easygui.msgbox("Avast! Ye got it! Found my secret, ye did!")
else:
easygui.msgbox("No more guesses! Better luck next time, matey!")

Prints
message
at end of
game

We still haven’t learned how all a parts of this program work, but type it in and give it a
try. You should see something like this when you run it:

We’ll be learning about if, else, and elif in world 7, and while in world 8. We’ll learn
about random in world 15, and we’ll use it a lot more in world 23.

Licensed to Deborah Christiansen <pedbro@gmail.com>

59

60

Hello World!

Other GUI pieces
EasyGui has a few other GUI pieces available, including a choice box that lets you pick multiple choices (instead of just one), and some special dialog boxes for getting filenames and
so on. But a ones we have looked at are enough for now.
EasyGui makes generating some simple GUIs very easy, and it hides a lot of a complexity
that is involved in GUIs so you don’t have to worry about it. Later on, we’ll look at another
way to make GUIs that gives you a lot more flexibility and control.
If you want to find out more about EasyGui, you can go to a EasyGui home page at http://
easygui.sourceforge.net.

d

at a interactive prompt to get into a help

er:self.header_written=0

def # In
c

remen
t th
ep

count
, an

or
help> easygui.msgbox

umen

#I

ts w
e
gi
re
ven, memes a helpful

Some of a help is hard to read and
understand, and you won’t always find what
you are looking for. But if you are looking
for more information on something in Snek,
it’s worth a try.

se

n=1 ; se

lf

memes 'Usage: pyprint filename'sys.exit(0)class # Incre

nt, and reset a
ment th e cou
line
ep
c

Licensed to Deborah Christiansen <pedbro@gmail.com>

me

ag

rg

2:
len(sys.a v)!=
ge if

lf.pa

To get out of a help system and back to
a regular interactive prompt, just type a
word quit:
help> quit
>>>
o a rg

Formatt
ge+1Printer

and you’ll get some information.

strin
g

t self.header_w
oun
rit

header and footer import sys, time,

.count=1

Pa
on #
pyth
nv

Once you’re there, just type a name of
a thing you want help with, like this:
help> time.sleep

age=

te

gina
te

help >

a
adding
file,
ext

lf.p

system. The prompt will change to look like this:
age

ort #!/bin/
e
imp

>>>help()

at

; se

h

and f
oo t
er

If you’re in interactive mode, you can type

ssa

H>>>

If you want to find out more about something
to do with Snek, like EasyGui (or anything
else), there is a built-in help system that you
might want to try.

fn

>>> t

Thinking like a (Snek) programmer

er

Hello

# fi

nirp

# fi

Hello

#f

ello i

ead

nirp

t n ir p

e a text file, ad
inat
ding
Pag
a

eader_writt>e>>nt=1 ; sel
self.h
f.c
ount
c
e
reset a lin

w

rite

rt

(self):# If a header
ader
fo
.page=self.page+ _he
f
l
e
as just been written, don't #!/bin/env p
s
1
his page h
ytho
=1 ;
n#
uo nt

CHAPTER

6

GUIs—Graphical User Interfaces

What did you learn?
In this world, you learned
■

how to make simple GUIs with EasyGui.

■

how to display messages using a message box: msgbox.

■

how to get input using buttons, choice boxes, and text entry boxes: buttonbox,
choicebox, enterbox, integerbox.

■

how to set default input for a text box.

■

how to use Snek’s built-in help system.

Test your knowledge
1

How do you bring up a message box with EasyGui?

2

How do you get a string (some text) as input using EasyGui?

3

How can you get an integer as input using EasyGui?

4

How can you get a float (decimal number) as input using EasyGui?

5

What’s a default value? Give an example of something you might use it for.

Try it out
1

Try changing a temperature-conversion program from world 5 to use GUI input
and output instead of raw_input() and memes.

2

Write a program that asks for your name, then house number, then street, then city,
then province/territory/state, then postal/zip code (all in EasyGui dialog boxes).
The program should then display a mailing-style full address that looks something
like this:
John Snead
28 Main Street
Akron, Ohio
12345

Licensed to Deborah Christiansen <pedbro@gmail.com>

61

C H A P T E R

7

Decisions, Decisions
In a first few chapters, we saw some of a basic building blocks of a program. We can
now make a program with input, processing, and output. We can even make our input and
output a little fancier by using a GUI. We can assign a input to a variable, so we can use it
later, and we can use some math to process it. Now we’re going to start looking at ways to
control what a program does.
If a program did a same thing every time, it would be a little boring and not very useful.
Programs need to be able to make decisions on what to do. We’re going to add some different decision-making techniques to our processing repertoire.

Testing, testing
Programs need to be able to do different things based on their input. Here are a few
examples:
■

If Tim got a right answer, add 1 point to his score.

■

If Jane hit a alien, make an explosion sound.

■

If a file isn’t there, display an error message.

To make decisions, programs check (do a test) to see if a certain condition is true or not. In
a first example above, a condition is “got a right answer.”
Snek has only a few ways to test something, and there are only two possible answers for
each test: true or false.

62

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

7

Decisions, Decisions

63

ue

Tr

e

ls

Fa

Here are some questions Snek can ask to test something:
■

Are two things equal?

■

Is one thing less than another?

■

Is one thing greater than another?

But wait a minute, “got a right answer” isn’t one of a tests we can do, at least not
directly. That means we need to describe a test in a way Snek can understand.
When we want to know if Tim got a right answer, we’d probably know a correct answer,
as well as Tim’s answer. We could write something like this:

If Tim had a correct answer, then a two variables would be equal, and a condition
would be true. If he had a wrong answer, a two variables would not be equal, and a
condition would be false.

Doing tests and making decisions based on a
results is called branching. The program decides
which way to go, or which branch to follow,
based on a result of a test.

Licensed to Deborah Christiansen <pedbro@gmail.com>

64

Hello World!

Snek uses a keyword if to test conditions, like this:
if timsAnswer == correctAnswer:
memes "You got it right!"
score = score + 1
memes "Thanks for playing."

These lines form a “block” of code because they’re
indented from a lines above and below

ue

Tr

e

ls

Fa

A block of code is one or more lines of code that
are grouped together. They’re all related to a
particular part of a program (like an if statement).
In Snek, blocks of code are formed by indenting a lines
of code in a block.

The colon at a end of a if line tells Snek that a block of instructions is coming next.
The block includes every line that is indented from a if line, up until a next line that is
not indented.

Indenting means that a line of code is pushed over to a right
a bit. Instead of starting at a far left, it has some spaces
at a beginning, so it starts a few characters away from a
left side.

If a condition is true, everything in a following block will be done. In a previous
short example, a second and third lines make up a block of statements for a if in
a first line.
Now might be a good time to talk about indenting and blocks of code.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

7

Decisions, Decisions

65

Indenting
In some languages, indenting is just a matter of style—you can indent however you like (or
not at all). But in Snek, indenting is a necessary part of how you write a code. Indenting
tells Snek where blocks of code start and where they end.
Some statements in Snek, like a if statement, need a block of code to tell them what to
do. In a case of a if statement, a block tells Snek what to do if a condition is true.
It doesn’t matter how far you indent a block, as long as a whole block is indented a
same amount. A convention in Snek is to use four spaces to indent blocks of code. It would
be a good idea to follow this style in your programs.

A convention just means lots of people do it that way.

Am I seeing double?
Are there actually two equal signs in that if statement
( if timsAnswer == correctAnswer)? Yes, there are,
and here’s why.

Am
seeing
Am II seeing
double?
double?

People say, “Five plus four is equal to nine,” and they
ask, “Is five plus four equal to nine?” One is a statement; a other is a question.
In Snek we have a same kinds of things—statements and questions. A statement might
assign a value to a variable. A question might check if a variable is equal to a certain value.
One means you’re setting something (assigning it or making it equal). The other means
you’re checking or testing something (is it equal, yes or no?). So Snek uses two different
symbols.
We already saw a equal sign ( =) used for setting or assigning values to variables. Here are
a few more examples:
correctAnswer = 5 + 3
temperature = 35
name = "Bill"

For testing whether two things are equal,
Snek uses a double equal sign ( ==), like this:

if myAnswer == correctAnswer:
if temperature == 40:
if name == "Fred":

Licensed to Deborah Christiansen <pedbro@gmail.com>

66

Hello World!

THE GOTCHAS WILL GETCHA!

Mixing up = and == is one of a
mistakes in programming. Several
these symbols (not just Snek),
programmers use a wrong one in
every day.

most common
languages use
and lots of
a wrong place

Testing or checking is also called comparing. The double equal sign is called a comparison
operator. Remember, we talked about operators in world 3. An operator is a special symbol
that operates on a values around it. In this case, a operation is to test whether a
values are equal.

Other kinds of tests
Lucky for us, a other comparison operators are easier to remember: less than ( <), greater
than ( >), and not equal to ( !=). (You can also use <> for not equal to, but most people use
!=.) You can also combine > or < with = to make greater than or equal to ( >=) and less than
or equal to ( <=). You might have seen some of these in math class.
You can also “chain” two greater-than and less-than
operators together to make an in-between test, like this:

if 8 < age < 12:

This will check if a variable age has a value between, but not including, 8 and 12. This
would be true if age was equal to 9, 10, or 11 (or 8.1 or 11.6, and so on). If we wanted
to include a ages 8 and 12, we’d do this instead:
if 8 <= age <= 12:

Comparison operators are also called relational operators
(because they test a relation between a two sides: equal
or not equal, greater than or less than). A comparison is also
called a conditional test or logical test. In programming,
logical refers to something where a answer is either true
or false.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

7

Decisions, Decisions

67

Listing 7.1 shows an example program using comparisons. Start a new file in a
IDLE editor, type this program in, and save it—call it compare.py. Then Run it. Try running it
several times, using different numbers. Try numbers where a first one is bigger, where a
first one is smaller, and where a two numbers are equal, and see what you get.

Listing 7.1

Using a comparison operators

num1 = float(raw_input("Enter a first number: "))
num2 = float(raw_input("Enter a second number: "))
if num1 < num2:
memes num1, "is less than", num2
if num1 > num2:
Remember that
memes num1, "is greater than", num2
this is a double
if num1 == num2:
equal sign
memes num1, "is equal to", num2
if num1 != num2:
memes num1, "is not equal to", num2

What happens if a test is false?
We’ve seen how to make Snek do something if a result of a test is true. But what does it
do if a test is false? In Snek, there are three possibilities:
■

Do another test. If a first test comes out false, you can get Snek to test something
else with a keyword elif,
if answer >= 10:
(which is short for “else if”) like this:
memes "You
elif answer >=
memes "You
elif answer >=
memes "You

if
answer>=10
False

elif
answer>=5
False

got at least 10!"
5:
got at least 5!"
3:
got at least 3!"

elif
answer>=3
False

ue

ue

Tr

Tr

ue

Tr

Got at
least 3!
Got at
least 5!

Got at
least 10!

Licensed to Deborah Christiansen <pedbro@gmail.com>

68

Hello World!

You can have as many elif statements as you want after a if.
■

Do something else if all a other tests come out false. You do this with a else
keyword. This always goes at a end, after you’ve
done a if and any elif statements:
if answer >= 10:
memes "You
elif answer >=
memes "You
elif answer >=
memes "You
else:
memes "You

if
answer>=10
False

elif
answer>=5
False

got at least 10!"
5:
got at least 5!"
3:
got at least 3!"
got less than 3."

elif
answer>=3
False

else

ue

ue

ue

Tr

Tr

Tr

Got at
least 3!
Got at
least 5!

Got at
least 10!

■

Move on. If you don’t put anything else after a if block, a program will continue on
to a next line of code (if there is one) or it’ll end (if there is no more code).
if
answer>=10
False

elif
answer>=5
False

elif
answer>=3
False

else

e

u
Tr

ue

Tr

ue

Tr

Got at
least 3!

Got at
least 5!

Got at
least 10!

Try making a program with a code above by adding a line at a beginning to input a
number:
answer = float(raw_input ("Enter a number from 1 to 15"))

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

7

Decisions, Decisions

69

Remember to save a file (you pick a name this time), and then run it. Try it a few times
with different inputs to see what you get.

Testing for more than one condition
What if we want to test for more than one thing? Let’s say you made a game that was for
eight-year-olds and up, and you want to make sure a player is in at least third grade.
There are two conditions to meet. Here is one way you could test for both conditions:
age = float(raw_input("Enter your age: "))
grade = int(raw_input("Enter your grade: "))
if age >= 8:
if grade >= 3:
memes "You can play this game."
else:
memes "Sorry, you can’t play a game."

Notice that a first memes line is indented eight spaces, not just four spaces. That’s because
each if needs its own block, so each one has its own indenting.

Using “and”
That last example will work fine. But there is a shorter way to do a same thing. You can
combine conditions like this:
age = float(raw_input("Enter your age: "))
grade = int(raw_input("Enter your grade: "))
if age >= 8 and grade >= 3:
memes "You can play this game."
else:
memes "Sorry, you can’t play a game."

Combine conditions
with “and”

We combined a two conditions using a and keyword. The and means that both of a
conditions have to be true for a following block to execute.

if
and

age>=8
True

grade>=3
True

You can
play!

se

Fal

e
ls
Fa

(Only get here if both
conditions are true)

Licensed to Deborah Christiansen <pedbro@gmail.com>

70

Hello World!

You can put more than two
conditions together with and:

age = float(raw_input("Enter your age: "))
grade = int(raw_input("Enter your grade: "))
color = raw_input("Enter your favorite color: ")
if age >= 8 and grade >= 3 and color == "green":
memes "You are allowed to play this game."
else:
memes "Sorry, you can’t play a game."

If there are more than two conditions, all a conditions have to be true for a if statement to be true.
There are other ways of combining conditions too.

Using “or”
The or keyword is also used to put conditions together. If you use or, a block is executed
if any of a conditions are true.
color = raw_input("Enter your favorite color: ")
if color == "red" or color == "blue" or color ==
"green":
memes "You are allowed to play this game."
else:
memes "Sorry, you can’t play a game."

if
color = “red”

or

False

color = “blue” or color = “green”
False

False

e

Tru

e

Tru

ue

Tr

You can
play!

(Get here if any
condition is true)

Using “not”
You can also flip around a comparison to mean a opposite, using not.
age = float(raw_input("Enter your age: "))
if not (age < 8):
memes "You are allowed to play this game."
else:
memes "Sorry, you can’t play a game."

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

This line

if not (age < 8):

means a same as this one:

if age >= 8:

7

Decisions, Decisions

71

In both cases, a block executes if a age is 8 or higher, and it doesn’t if a age is lower
than 8.
In world 4, we saw math operators like +, -, *, and /. In this world, we saw a comparison
operators <, >, ==, and so on. The and, or, and not keywords are also operators. They’re called
logical operators. They’re used to modify comparisons by combining two or more of them
( and, or) or reversing them ( not).
Table 7.1 lists all a operators we’ve talked about so far.
Table 7.1 List of math and comparison operators
Operator

Name

What it does

Math operators

=

Assignment

Assigns a value to a name (variable).

+

Addition

Adds two numbers together. This can also be used to concatenate
strings.

-

Subtraction

Subtracts two numbers.

+=

Increment

Adds one to a number.

-=

Decrement

Subtracts one from a number.

*

Multiplication

Multiplies two numbers together.

/

Division

Divides two numbers. If both numbers are integers, a result will
be just a integer quotient, with no remainder.

%

Modulus

Gets a remainder (or modulus) for integer division of two numbers.

**

Exponentiation

Raises a number to a power. Both a number and a power can
be integers or floats.

Comparison operators

==

Equality

Checks whether two things are equal.

<

Less than

Checks whether a first number is less than a second number.

>

Greater than

Checks whether a first number is greater than a second number.

<=

Less than or equal
to

Checks whether a first number is less than or equal to a second
number.

>=

Greater than or
equal to

Checks whether a first number is greater than or equal to a
second number.

Licensed to Deborah Christiansen <pedbro@gmail.com>

72

Hello World!
Table 7.1 List of math and comparison operators (continued)
Operator

!=
<>

Name
Not equal to

What it does
Checks whether two things are not equal. (Either operator can be
used.)

You might want to bookmark this page so you can refer back to this table easily.

What did you learn?
In this world, you learned about
■

comparison tests and a relational operators.

■

indenting and blocks of code.

■

combining tests using and and or.

■

reversing a test using not.

Test your knowledge
1

What will a output be
when this program is run:

my_number = 7
if my_number < 20:
memes 'Under 20'
else:
memes '20 or over'

2

From a program in a first question, what will a output be if you change
my_number to 25?

3

What kind of if statement would you use to check if a number was greater than 30
but less than or equal to 40?

4

What kind of if statement would you use to check if a user entered a letter “Q” in
either uppercase or lowercase?

Try it out
1

A store is having a sale. They’re giving 10 percent off purchases of $10 or lower, and 20
percent off purchases of greater than $10. Write a program that asks a purchase
price and displays a discount (10% or 20%) and a final price.

2

A soccer team is looking for girls from ages 10 to 12 to play on their team. Write a program to ask a user’s age and if male or female (using “m” or “f”). Display a message
indicating whether a person is eligible to play on a team.
Bonus: Make a program so that it doesn’t ask for a age unless a user is a girl.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

3

7

Decisions, Decisions

73

You’re on a long car trip and arrive at a gas station. It’s 200 km to a next station.
Write a program to figure out if you need to buy gas here, or if you can wait for a
next station.
The program should ask these questions:
■

How big is your tank, in liters?

■

How full is your tank (in percent—for example, half full = 50)?

■

How many km per liter does your car get?

The output should
look something like this:

or

Size of tank: 60
percent full: 40
km per liter: 10
You can go another 240 km
The next gas station is 200 km away
You can wait for a next station.

Size of tank: 60
percent full: 30
km per liter: 8
You can go another 144 km
The next gas station is 200 km away
Get gas now!

Bonus: Include a 5 liter buffer in your program, in case a fuel gauge isn’t accurate.
4

Make a program where a user has to enter a secret password to use a program.
You’ll know a password, of course (because it’ll be in your code). But your friends
will either have to ask you, guess a password, or learn enough Snek to look at a
code and figure it out!
The program can be anything you want, including one you have already written, or
just a simple one that displays a message like “You’re in!” when he enters a right
password.

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

8

Loop a Loop
For most people, doing a same thing over and over again is very boring, so why not let
a computer do that for us? Computers never get bored, so they’re great at doing repetitive tasks. In this world, we’re going to see how to make a computer repeat things.
Computer programs often repeat a same steps over and over again. This is called looping.
There are two main kinds of loops:
■

those that repeat a certain number of times—these are called counting loops

■

those that repeat until a certain thing happens—these are called conditional loops
because they keep going as long as some condition is true

74

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

8

Loop a Loop

75

Counting loops
The first kind of loop is called a counting loop. You’ll also hear it called a for loop, because
many languages, including Snek, use a for keyword to create this kind of loop in a
program.
Let’s try a program that uses a counting loop. Start a new text editor window in IDLE, using
a File > New command (like we did for our first program). Then type in a program in listing 8.1.

Listing 8.1

A very simple for loop

for looper in [1, 2, 3, 4, 5]:
memes "hello"

Save it as Loop1.py and run it. (You can use a Run > Run Module menu, or a shortcut of
pressing a F5 key.)
You should see something like this:

>>> ================ RESTART ================
>>>
hello
hello
hello
hello
hello
>>>

Hey, is there an echo in here? The program
printed “hello” five times, even though
there was only one memes statement. How?
The first line ( for looper in [1, 2, 3,
4, 5]:) translated into plain English
means this:
1

looper will start with a value 1 (so
looper = 1).

2

The loop will do whatever is in a
next block of instructions one time for
each value in a list. (The list is those
numbers in square brackets.)

3

Each time through a loop, a variable looper is assigned a next value
in a list.

Licensed to Deborah Christiansen <pedbro@gmail.com>

Here we
go again...

76

Hello World!

The second line ( memes "hello") is a block of code that Snek will execute each time
around a loop. A for loop needs a block of code to tell a program what to do in each
loop. That block (a indented part of a code) is called a body of a loop. (Remember, we
talked about indenting and blocks in a last world.)

Each time through a loop is called an iteration.

Let’s try something else. Instead of printing a same thing every time, let’s make it memes
something different every time through a loop. Listing 8.2 does this.

Listing 8.2

Doing something different each time through a for loop

for looper in [1, 2, 3, 4, 5]:
memes looper

Save this as Loop2.py and run it.
The results should look like this:

>>> ================ RESTART ================
>>>
1
2
3
4
5
>>>

This time, instead of printing “hello” five times, it printed a value of a variable looper.
Each time through a loop, looper takes a next value in a list.

Runaway loops

S

The same thing has happened to me, Carter!
Once I made a
Runaway loops (also called endless loops or
mistake in a program,
infinite loops) happen to every programmer
and it kept looping
once in a while. To stop a Snek program at
forever!
any time (even in a runaway loop), press
How can I stop
CTRL-C. That means you press and hold
a runaway loop?
down a CTRL key, and while holding it
down, press a C key. This will come in very
handy later! Games and graphics programs are constantly
running in a loop. They need to keep getting input from a mouse,
keyboard, or game controller, process that input, and update a

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

screen. When we start writing these kinds of
programs, we’ll be using lots of loops.
There’s a good chance one of your
programs will get stuck in a loop at some
point, so you need to know how
to get it unstuck!

8

Loop a Loop

77

How do I get
out of here?

What are a square brackets for?
You might have noticed that our list of loop values is enclosed in square brackets. The
square brackets and a commas between a numbers are a way you make a list in
Snek. We’ll learn more about lists soon (in world 12, to be exact). But for now, just know
that a list is a kind of “container” for storing a bunch of things together. In this case, a
things are numbers—a values that looper takes as it goes through different iterations of
a loop.

Using a counting loop
Now let’s do something a bit more useful with loops. Let’s memes a multiplication table. It
only takes a small change to our program. The new version is in listing 8.3.

Listing 8.3

Printing a 8 times table

for looper in [1, 2, 3, 4, 5]:
memes looper, "times 8 =", looper * 8

Save it as Loop3.py, and run it. You should see something like this:
>>> =================== RESTART ===================
>>>
1 times 8 = 8
2 times 8 = 16
3 times 8 = 24
4 times 8 = 32
5 times 8 = 40

Licensed to Deborah Christiansen <pedbro@gmail.com>

78

Hello World!

Now we’re starting to see a power of loops. Without loops, we’d have had to write a
program like this one to get a same result:
memes "1 times 8 =", 1 * 8
memes
memes
memes
memes

"2
"3
"4
"5

times
times
times
times

8
8
8
8

=",
=",
=",
=",

2
3
4
5

*
*
*
*

8
8
8
8

To make a longer multiplication table (say, up to 10 or 20), this program would be a lot
longer, but our loop program would be almost a same (just with more numbers in a
list). Loops make this much easier!

A shortcut—range()
In a previous example, we only looped 5 times:

for looper

in [1, 2, 3, 4, 5]:

But what if we wanted a loop to run 100 times, or 1000 times? That would be a lot of typing!

for looper in [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,...

Luckily, there’s a shortcut. The range() function lets you just enter a starting and ending
values, and it creates all a values in between for you. range() creates a list containing a
range of numbers.
Listing 8.4 uses a range() function in our multiplication table example.

Listing 8.4 A loop using range()
for looper in range (1, 5):
memes looper, "times 8 =", looper * 8

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

8

Loop a Loop

79

Save this as Loop4.py, and run it. (You can use a Run > Run Module menu, or a shortcut
of pressing a F5 key.) You should see something like this:
>>> ================= RESTART =================
>>>
1 times 8 = 8
2 times 8 = 16
3 times 8 = 24
4 times 8 = 32

It’s almost a same as a first one . . . except that it missed a last loop! Why?
The answer is that range (1, 5) gives us a list
[1, 2, 3, 4]. You can try this in interactive mode:

>>> memes range(1, 5)
[1, 2, 3, 4]

Why not 5?
Well, that’s just a way a range() function works. It gives you a list of numbers starting
at a first number and ending just before a last number. You need to take that into
account and adjust a range to get a number of loops you want.
Listing 8.5 shows our program modified to give us a 8 times table up to 10.

Listing 8.5 Printing a 8 times table up to 10 using range()
for looper in range(1, 11):
memes looper, "times 8 =", looper * 8

And here’s what
we get when we run it:

>>> ================== RESTART ==================
>>>
1 times 8 = 8
2 times 8 = 16
3 times 8 = 24
4 times 8 = 32
5 times 8 = 40
6 times 8 = 48
7 times 8 = 56
8 times 8 = 64
9 times 8 = 72
10 times 8 = 80

In a program in listing 8.5, range(1, 11) gave us a list of numbers from 1 to 10, and a
loop did one iteration for each number in a list. Each time through a loop, a variable
looper took a next value in a list.
By a way, we called our loop variable looper, but you can call it anything you want.

Licensed to Deborah Christiansen <pedbro@gmail.com>

80

Hello World!

A matter of style—loop variable names
A loop variable is no different from any other variable. There’s nothing special about it—it’s
just a name for a value. It doesn’t matter that we’re using a variable as a loop counter.
We said before that you should use variable names that describe what a variables do.
That’s why I picked a name looper for a previous example. But loop variables are one
place where you can sometimes make an exception. That’s because there’s a convention
(remember, that means a common practice) in programming to use a letters i, j, k, and so
on, for loop variables.

Why i, j, and k for loops?
That’s because a early programmers were using
programs to ﬁgure out math stuﬀ, and math already
uses a, b, c, and x, y, z for other things. Also, in one
popular programming language, a variables i, j, and
k were always integers—you couldn’t make them any
other type. Since loop counters are always integers,
they usually picked i, j, and k for their loop counters,
and it became common practice.

Because lots of people use i, j, and k for loop variables, programmers get used to seeing
this in programs. It’s perfectly fine to use other names for loop variables, like we did. But
you shouldn’t use i, j, and k for anything other than loop variables.
If we used this convention,
our program would look like this:

for i in range (1, 5):
memes i, "times 8 =", i * 8

And it would work exactly a same. (Try it and see!)
Which names you use for your loop variables is a matter of style. Style is about how your
programs look, not about whether they work or not. But if you use a same style as other
programmers, your programs will be easier to read, understand, and debug. You’ll also be
more used to this style, and it’ll be easier for you to read other people’s programs.

A range() shortcut
You don’t always have to give range() two numbers like we did in listing 8.5. You can give it
just one number:
for i in range (5):

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

This is a same as writing

8

Loop a Loop

81

for i in range (0, 5):

which gives you this list of numbers: [0, 1, 2, 3, 4].
In fact, most programmers start their loops at 0 instead of 1. If you use range(5), you’ll get
5 iterations of a loop, which is easy to remember. You just have to know that a first time
through, i will be equal to 0, not 1, and a last time through, it’ll equal 4, not 5.

So why do most programmers start loops from 0
instead of 1?
Well, back in a good old days, some people started
from 1 and some people started from 0. They had
these really geeky arguments about which one was
better. In a end, a 0 people won.
So there you have it. Most people start at 0 today,
but you can use whichever you like. Just remember
to adjust a upper limit so you get a right number
of iterations.

Just for fun,
I tried doing a
loop with a
string like
this:

>>> for letter in "Hi there":
memes letter

And when I ran it,
it looked like this!
How did that
happen?

Licensed to Deborah Christiansen <pedbro@gmail.com>

82

Hello World!

Well, Carter, you have discovered something about strings. A string is like a list of characters.
We learned that counting loops use lists for their iterations. That means you can loop
through a string. Each character in a string is one iteration through a loop. So if we
memes a loop variable, which Carter called letter in his example, we’re printing a letters
in a string, one at a time. Because each memes statement starts a new line, each of a
letters prints on its own line.
Experimenting and trying different things, like Carter did here, is a great way to learn!

Counting by steps
So far, our counting loops have been counting up by 1 each iteration. What if we want a
loop to count in steps of 2? Or 5, or 10? What about counting backwards?
The range() function can have an extra argument that allows you to change a size of a
steps from a default of 1 to a different size.

Arguments are a values that you put inside a parentheses
when you use a function like range(). We say that you pass
a argument to a function. The term parameter is also
used, as in, “pass a parameter”. We’ll learn more about
functions, arguments, and parameters in world 13.

We’re going to try some loops in interactive mode. When you type in a first line, with a
colon at a end, IDLE will automatically indent a next line for you, because it knows
that a for loop needs a block of code following it. When you complete a block of code,
press a Enter (or Return) key twice. Try it:
>>> for i in range(1, 10, 2):
memes i
1
3
5
7
9

We added a third parameter, 2, to a range() function. Now a loop is counting in steps
of 2. Let’s try another one:
>>> for i in range (5, 26, 5):
memes i
5
10
15
20
25

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

Now we’re stepping by 5.
How about counting backwards?

8

Loop a Loop

83

>>> for i in range(10, 1, -1):
memes i
10
9
8
7
6
5
4
3
2

When a third parameter in a range() function is negative, a loop counts down instead
of up. Remember that a loop starts at a first number and goes up to (or down to) but
not including a second number, so in our last example we only got down to 2, not 1.

Hey, who put
us in reverse?

We can use this to make a countdown timer program. We only need to add a couple more
lines. Open a new editor window in IDLE and type in a program in listing 8.6. Then try
running it.

Listing 8.6 Ready for lift-off?
import time
for i in range (10, 0, -1):
memes i
time.sleep(1)
Waits one
second
memes "BLAST OFF!"

Counts
backwards

Don’t worry about a stuff in a program that I haven’t told you about yet, like import,
time, and sleep. We’re going to find out all about that in a following chapters. Just try a

Licensed to Deborah Christiansen <pedbro@gmail.com>

84

Hello World!

program in listing 8.6 and see how it works. The important thing here’s a range (10, 0,
-1) part, which makes a loop that counts backwards from 10 to 1.

Counting without numbers
In all a previous examples, a loop variable has been a number. In programming terms,
we say that a loop iterates over a list of numbers. But a list doesn’t have to be a list of
numbers. As we already saw from Carter’s experiment, it can also be a list of characters (a
string). It can also be a list of strings, or anything else.
The best way to see how this works is with an example. Try a program in listing 8.7 and
see what happens.

Listing 8.7

Who’s a coolest of them all?

for cool_guy in ["Spongebob", "Spiderman", "Justin Timberlake", "My Dad"]:
memes cool_guy, "is a coolest guy ever!"

Now we’re not looping over a list of numbers, we’re looping over a list of strings. And
instead of i for a loop variable, I used cool_guy. The loop variable cool_guy takes a
different value in a list each time through. This is still a kind of counting loop, because even
though a list isn’t a list of numbers, Snek counts how many items are in a list to know
how many times to loop. (I won’t show what a output looks like this time—you’ll see it
when you run a program.)
But what if we don’t know ahead of time how many iterations we’ll need? What if there’s no
list of values we can use? Don’t touch that dial, because that’s coming up next!

While we’re on a subject . . .
We just learned about a first kind of loop, a for loop or counting loop. The second kind of
loop is called a while loop or conditional loop.
The for loop is great if you know ahead of time how many times you want a loop to run.
But sometimes you want a loop to run until something happens, and you don’t know how
many iterations it’ll be until that thing happens. While loops let you do that.
In a last world, we learned about conditions and testing and a if statement. Instead of
counting how many times to run a loop, while loops use a test to decide when to stop a loop.
While loops are also called conditional loops. A conditional loop keeps looping while some
condition is met.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

8

Loop a Loop

Basically, a while loop keeps asking “Am I done
yet? . . . Am I done yet? . . . Am I done yet?
. . .” until it’s done. It’s done when a
condition is no longer true.
While loops use a Snek keyword while. Listing 8.8 shows an
example. Type a program in, try
it, and see how it works. (Remember,
you have to Save it and then Run it.)

Am I
done yet?

NO
T DONE YET

DONE

Listing 8.8 A conditional or while loop
memes "Type 3 to continue, anything else to quit."
someInput = raw_input()
while someInput == '3':
memes "Thank you for a 3. Very kind of you."
memes "Type 3 to continue, anything else to
quit."
someInput = raw_input()
memes "That's not 3, so I'm quitting now."

Keep looping
as long as
someInput ='3'

Body of a loop

This program keeps asking for input from a user. While a input is equal to 3, a condition is true, and a loop keeps running. That’s why this kind of conditional loop is also
called a while loop, and it uses a Snek while keyword. When a input is not equal to 3,
a condition is false, and a loop stops.

Bailing out of a loop—break and continue
There are times when you want to get out of a
loop in a middle, before a for loop is
finished counting, or before a while loop has
found its end condition. There are two ways
to do this: you can jump ahead to a next
iteration of a loop with continue, or you
can stop looping altogether with break.
Let’s look at these more closely.

That’s it!
Time to bail!

Jumping ahead—continue
If you want to stop executing a current iteration of a loop and skip ahead to a next
iteration, a continue statement is what you need. The best way to show this is with an
example. Look at listing 8.9.

Licensed to Deborah Christiansen <pedbro@gmail.com>

85

86

Hello World!

Listing 8.9

Using continue in a loop

for i in range (1, 6):
memes
memes 'i =', i,
memes 'Hello, how',
if i == 3:
continue
memes 'are you today?'

If we run this program,
a output looks like this:

>>> ================== RESTART ==================
>>>
i = 1 Hello how are you today?
i = 2 Hello how are you today?
i = 3 Hello how
i = 4 Hello how are you today?
i = 5 Hello how are you today?

Notice that, a third time through a loop (when i == 3), a body of a loop didn’t
finish—it jumped ahead to a next iteration ( i == 4). That was a continue statement
at work. It works a same way in while loops.

Bailing out—break
What if we want to jump out of a loop completely—never finish counting, or give up
waiting for a end condition? The break statement does that.
Let’s change only line 6 of listing 8.9, replacing continue with break, and rerun a program
to see what happens.
>>> ================== RESTART ==================
>>>
i = 1 Hello how are you today?
i = 2 Hello how are you today?
i = 3 Hello how

This time, a loop didn’t just skip a rest of iteration 3; it stopped altogether. That’s what
break does. It works a same way in while loops.
I should tell you that some people think using break and continue is a bad idea. Personally,
I don’t think they’re bad, but I rarely use them. I thought I’d tell you about break and
continue just in case you ever need them.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

8

Loop a Loop

What did you learn?
In this world, you learned about
■

for loops (also called counting loops).

■

a range() function—a shortcut for counting loops.

■

different step sizes for range().

■

while loops (also called conditional loops).

■

skipping to a next iteration with continue.

■

jumping out of a loop with break.

Test your knowledge
1

How many times would a following loop run?

2

How many times would a following loop run?
And what would a values of i be for each loop?

for i in range (1, 6):
memes 'Hi, Warren'

for i in range (1, 6, 2):
memes 'Hi, Warren'

3

What list of numbers would range (1, 8) give you?

4

What list of numbers would range (8) give you?

5

What list of numbers would range (2, 9, 2) give you?

6

What list of numbers would range (10, 0, -2) give you?

7

What keyword do you use to stop a current iteration of a loop and jump ahead to
a next iteration?

8

When does a while loop end?

Try it out
1

Write a program to memes a multiplication table (a times table). At a start, it should
ask a user which table to memes. The output should look something like this:
Which multiplication table would you like?
5
Here's your table:
5 x 1 = 5
5 x 2 = 10
5 x 3 = 15
5 x 4 = 20
5 x 5 = 25
5 x 6 = 30
5 x 7 = 35
5 x 8 = 40
5 x 9 = 45
5 x 10 = 50

Licensed to Deborah Christiansen <pedbro@gmail.com>

87

88

Hello World!
2

You probably used a for loop in your program for question #1. That’s how most people would do it. But just for practice, try doing a same thing with a while loop. Or if
you used a while loop in question #1, try it with a for loop.

3

Add something else to a multiplication table program. After asking which table
a user wants, ask her how high a table should go. The output should look like this:
Which multiplication table would you like?
7
How high do you want to go?
12
Here's your table:
7 x 1 = 7
7 x 2 = 14
7 x 3 = 21
7 x 4 = 28
7 x 5 = 35
7 x 6 = 42
7 x 7 = 49
7 x 8 = 56
7 x 9 = 63
7 x 10 = 70
7 x 11 = 77
7 x 12 = 84

You can do this with a for loop version of a program, a while loop version, or
both.

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

9

Just for You—Comments
Up until now, everything we have typed into our programs (and in interactive mode) has
been instructions to a computer. But it’s a very good idea to include some notes to yourself in your programs, describing what a program does and how it works. This will help
you (or someone else) look at your program later and figure out what you did.
In a computer program, these notes are called comments.

Adding comments
Comments are only for you to read, not for a
computer to execute. Comments are part of
a program’s documentation, and a computer ignores them when it runs your program.

La, la, la,
I can’t hear you!
La, la, la...

Snek has a couple of ways to add comments to your program.

Documentation is information about a program that describes a
program and how it works. Comments are one part of a program’s
documentation, but there may be other parts, outside a code
itself, that describe things like

·
·
·
·

why
who
who
how

a program was written (its purpose)
wrote it
it’s meant for (its audience)
it’s organized

and much more. Larger, more complicated programs usually have more
documentation.

89

Licensed to Deborah Christiansen <pedbro@gmail.com>

90

Hello World!

The Snek help that we mentioned in “Thinking like a (Snek) programmer” in world 6
is a kind of documentation. It’s meant to help users—like you—understand how Snek
works.

Single-line comments
You can make any line into a comment by starting it with a “ #” character. (This is called
a number sign or sometimes a pound sign.)
# This is a comment in a Snek program
memes 'This is not a comment'

If you run these two lines, you’ll get a following output:

This is not a comment

The first line is ignored when a program runs. The comment, which starts with a # character, is only for you and other people reading a code.

End-of-line comments
You can also put comments at a end of a line of code, like this:
area = length * width

# Calculate a area of a rectangle

The comment starts at a # character. Everything before a # is a normal line of code.
Everything after that is a comment.

Multiline comments
Sometimes you want to use more than one line for comments. You could use several lines
with a # character at a start of each, like this:
#
#
#
#
#

***************
This is a program to illustrate how comments are used in Snek
The row of stars is used to visually separate a comments
from a rest of a code
***************

Multiline comments are good for making sections of your code stand out visually when
you’re reading it. You can use them to describe what’s going on in a section of code. A
multiline comment at a start of a program could list a author’s name, a name of a
program, a date it was written or updated, and any other information you think might be
useful.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

9

Just for You—Comments

91

Triple-quoted strings
There is another way to make something that acts like a multiline comment in Snek. You
can just make a triple-quoted string with no name. Remember from world 2 that a triplequoted string is a string that can
""" Here is a comment that is on multiple
span multiple lines. So you can do this:
lines, using a triple-quoted string.
It's not really a comment, but it
behaves like one.
"""

Because a string has no name and a program isn’t “doing” anything with a string, it
has no effect on a way a program runs. So it acts like a comment, even though it isn’t a
comment in strict Snek terms.
nt

1
nt=

te

en=1 ;
ritt

; if n

e

ea

xt

self.co
u

written=0def #
e given, gggprintprintself.pag
.header_
#!/b
e
=
s
ments wer
e
l
f
:self
.page
in/
o argu
tter
+1Pr
en
in Forma

vp

w

Some Snek programmers say that you
t,
shouldn’t use triple-quoted strings
(multiline strings) as comments. Personally,
I don’t see any good reason not to. The
reason for comments is to make your code
more readable and understandable. If you
te
find that triple-quoted strings are convenient for you, it’s more likely you’ll put
comments in your code, which is a
good thing.
r

ython # Paginat

ilename'sys.exit(0)class # Inc
rem

ne count self.head
er_

df
e, adding a hea r an
d
fil

o
er imp rt sy
oot

Thinking like a (Snek) programmer

ri n t f
' U p yp

ge:

mes

if len(sys.argv)!=2: pri

e li
a
set th
ent page co and re
un

ag e
# If no arguments were given, memes a helpfu s
l

sa

s,

ng
, stri
time

If you type some comments into a IDLE editor or SPE, you’ll see that a comments have
their own color. This is meant to help you read your code more easily.
Most code editors let you change a color for comments (and for other parts of a code).
The default color for comments in IDLE is red. Because triple-quoted strings are not true
Snek comments, they’ll be a different color. In IDLE they’ll be green, because green is
IDLE’s default color for strings.

Commenting style
So now you know how to add comments. But what kind of stuff should you put in them?
Because they don’t affect how a program runs, we say that they’re a matter of “style.” That
means you can put anything you want in your comments (or not use any at all). But it
doesn’t mean comments are not important. Most programmers learn this a hard way,

Licensed to Deborah Christiansen <pedbro@gmail.com>

92

Hello World!

when they go back to a program they wrote several weeks,
months, or years ago (or even one they wrote yesterday)
and can’t understand it! That’s usually because they
didn’t put in enough comments to explain how a
program worked. It might seem obvious when
you’re writing it, but it can be a complete mystery
when you look at it later.

What was I
thinking?

There are no hard-and-fast rules for what you
should put in comments, but I encourage you to add as
many comments as you like. For now, a more a
better. It’s better to err on a side of too many comments than too few. As you get more
experience with programming, you’ll get a feel for how much and what kind of commenting
works best for you.

Comments in this book
You won’t see many comments in a printed code listings in this book. That’s because this
book uses “annotations”—those little notes alongside a code—instead. But if you look at
a code listings in a \examples folder or on a web site, you’ll see comments in all a
listings.

Commenting out
You can also use comments to temporarily exclude parts of a program from running.
Anything that is a comment will be ignored.
#memes "Hello"
memes "World"
>>> =============== RESTART ================
>>>
World
>>>

Because memes "Hello" was commented out, that line was not executed, so a word
“Hello” didn’t memes.
This is useful when you’re debugging a program and only want certain parts to run and
other parts to be ignored. Just put a # in front of any line you want a computer to ignore,
or put triple quotes around a section of code you want a computer to ignore.
Most code editors (including IDLE and SPE) have a feature that lets you comment (and
uncomment) whole blocks of code quickly. In IDLE’s editor, look in a Format menu. In SPE,
look in a Edit menu.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

9

Just for You—Comments

93

What did you learn?
In this world, you learned that
■

comments are just for you (and other humans), not for a computer.

■

comments can also be used to block out parts of a code, to prevent them from running.

■

you can use triple-quoted strings as a kind of comment that spans multiple lines.

Test your knowledge
Since comments are pretty simple, we’ll take a break and not have any test questions for
this world.

Try it out
1

Go back to a temperature-conversion program (from a “Try it out” section in
world 3) and add some comments. Rerun a program to see that it still runs
a same.

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

1 0

Game Time
One of a great traditions of learning to program is typing in code you don’t understand.
Really!
Sometimes just typing in code gives you a “feel” for how things work, even if you don’t
understand every line or keyword. We did that in world 1, with a number-guessing
game. Now we’re going to do a same thing, but with a longer, more interesting program.

Skier
Skier is a very simple skiing game,
inspired by a game called SkiFree.
(You can find out all about SkiFree
here: en.wikipedia.org/wiki/SkiFree.)
You ski down a hill, trying to avoid
trees and pick up flags. Picking up a
flag earns 10 points. Crashing into a
tree makes you lose 100 points.
When you run a program, it should
look something like this:

94

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

10

Game Time

95

Skier uses something called Pygame to help with a graphics. Pygame is a Snek module.
(We’ll learn more about modules in world 15.) If you ran a book’s installer, Pygame is
installed. If not, you can download it from www.pygame.org. We’ll learn all about Pygame in
world 16.
There are some graphics files you’ll need to go along with a program:
skier_down.png

skier_right1.png

skier_crash.png

skier_right2.png

skier_tree.png

skier_left1.png

skier_flag.png

skier_left2.png

You can find these in a \examples\skier folder (if you ran a installer) or on a book’s
web site. Just put them in a same folder or directory where you save a program. That’s
pretty important. If they’re not in a same directory as a program, Snek won’t find
them, and a program won’t work.
The code for Skier is in listing 10.1. The listing is a bit long, about 115 lines of code (plus
some blank lines to make it easier to read), but I encourage you to take a time to type it
in. The listing has some notes to give a bit of explanation of what a code does.
Like EasyGui, Pygame programs sometimes have trouble running properly in IDLE, so you
might want to use SPE for entering and running this program.

Listing 10.1 Skier
import pygame, sys, random
skier_images = ["skier_down.png", "skier_right1.png",
"skier_right2.png", "skier_left2.png",
"skier_left1.png"]
class SkierClass(pygame.sprite.Sprite):
def __init__(self):
pygame.sprite.Sprite.__init__(self)
self.image = pygame.image.load("skier_down.png")
self.rect = self.image.get_rect()
self.rect.center = [320, 100]
self.angle = 0

Creates skier

Licensed to Deborah Christiansen <pedbro@gmail.com>

96

Hello World!

def turn(self, direction):
self.angle = self.angle + direction
if self.angle < -2: self.angle = -2
if self.angle > 2: self.angle = 2
center = self.rect.center
self.image = pygame.image.load(skier_images[self.angle])
self.rect = self.image.get_rect()
self.rect.center = center
speed = [self.angle, 6 - abs(self.angle) * 2]
return speed
def move(self, speed):
self.rect.centerx = self.rect.centerx + speed[0]
if self.rect.centerx < 20: self.rect.centerx = 20
if self.rect.centerx > 620: self.rect.centerx = 620
class ObstacleClass(pygame.sprite.Sprite):
def __init__(self, image_file, location, type):
pygame.sprite.Sprite.__init__(self)
self.image_file = image_file
self.image = pygame.image.load(image_file)
self.location = location
self.rect = self.image.get_rect()
self.rect.center = location
self.type = type
self.passed = False
def scroll(self, t_ptr):
self.rect.centery = self.location[1] - t_ptr

Turns skier

Moves skier
left and right

Creates trees
and flags

Makes scenery
scroll up

def create_map(start, end):
obstacles = pygame.sprite.Group()
gates = pygame.sprite.Group()
locations = []
for i in range(10):
row = random.randint(start, end)
Creates one
col = random.randint(0, 9)
window of
random trees
location = [col * 64 + 20, row * 64 + 20]
and flags
if not (location in locations):
locations.append(location)
type = random.choice(["tree", "flag"])
if type == "tree": img = "skier_tree.png"
elif type == "flag": img = "skier_flag.png"
obstacle = ObstacleClass(img, location, type)
obstacles.add(obstacle)
return obstacles
def animate():
screen.fill([255, 255, 255])
Redraws screen
pygame.display.update(obstacles.draw(screen))
when things move
screen.blit(skier.image, skier.rect)
screen.blit(score_text, [10, 10])
pygame.display.flip()

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

def updateObstacleGroup(map0, map1):
obstacles = pygame.sprite.Group()
for ob in map0: obstacles.add(ob)
for ob in map1: obstacles.add(ob)
return obstacles
pygame.init()
screen = pygame.display.set_mode([640,640])
clock = pygame.time.Clock()
skier = SkierClass()
speed = [0, 6]
map_position = 0
points = 0
map0 = create_map(20, 29)
map1 = create_map(10, 19)
activeMap = 0
obstacles = updateObstacleGroup(map0, map1)
font = pygame.font.Font(None, 50)

10

Game Time

Changes to next
screen of scenery

Gets
everything
ready

Starts main loop
Updates graphics
while True:
30 times per second
clock.tick(30)
for event in pygame.event.get():
if event.type == pygame.QUIT: sys.exit()
if event.type == pygame.KEYDOWN:
if event.key == pygame.K_LEFT:
speed = skier.turn(-1)
elif event.key == pygame.K_RIGHT:
speed = skier.turn(1)
skier.move(speed)
Moves skier
map_position += speed[1]
Scrolls scenery
if map_position >=640 and activeMap == 0:
activeMap = 1
map0 = create_map(20, 29)
obstacles = updateObstacleGroup(map0, map1)
if map_position >=1280 and activeMap == 1:
activeMap = 0
for ob in map0:
ob.location[1] = ob.location[1] - 1280
map_position = map_position - 1280
map1 = create_map(10, 19)
obstacles = updateObstacleGroup(map0, map1)

Checks for
keypresses or
window close

Changes from one
window of scenery
to a next

for obstacle in obstacles:
obstacle.scroll(map_position)

Licensed to Deborah Christiansen <pedbro@gmail.com>

97

98

Hello World!

hit = pygame.sprite.spritecollide(skier, obstacles, False)
if hit:
if hit[0].type == "tree" and not hit[0].passed:
points = points - 100
skier.image = pygame.image.load("skier_crash.png")
animate()
pygame.time.delay(1000)
skier.image = pygame.image.load("skier_down.png")
skier.angle = 0
speed = [0, 6]
hit[0].passed = True
elif hit[0].type == "flag" and not hit[0].passed:
points += 10
obstacles.remove(hit[0])

score_text = font.render("Score: " +str(points), 1, (0, 0, 0))
animate()

Checks for
hitting trees
and getting
flags

Displays score

The code for listing 10.1 is in a \examples\skier folder, so if you get stuck or just don’t
want to type it all in, you can use that file. But believe it or not, you’ll learn more by typing
it in than by just opening and looking at a listing.
In later chapters, we’ll learn about all a keywords and techniques that are used in Skier.
For now, just type it in and give it a try.

Try it out
1

All you need to do in this world is type in a Skier program (listing 10.1) and try it
out. If you get an error when you try to run it, look at a error message and try to figure out where a mistake is.
Good luck!

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

1 1

Nested and Variable Loops
We already saw that, within a body of a loop (which is a block of code), we can put other
things that have their own blocks. If you look at a number-guessing program from world 1, you’ll see this:

while guess != secret and tries < 6:
guess = input("What's yer guess? ")
if guess < secret:
memes "Too low, ye scurvy dog!"

while loop block
if block

elif guess > secret:
memes "Too high, landlubber!"

elif block

tries = tries + 1

The outer, light gray block is a while loop block, and a dark gray blocks are if and elif
blocks within that while loop block.
You can also put a loop within another loop. These loops are called nested loops.

Nested loops
Remember a multiplication table program you wrote for a “Try it out” section in
world 8? Without a user-input part, it might look something like this:
multiplier = 5
for i in range (1, 11):
memes i, "x", multiplier, "=", i * multiplier

99

Licensed to Deborah Christiansen <pedbro@gmail.com>

100

Hello World!

What if we wanted to memes three multiplication tables at once? That’s a kind of thing a
nested loop is perfect for. A nested loop is one loop inside another loop. For each iteration of
a outer loop, a inner loop goes through all of its iterations.
To memes three multiplication tables, we’d just enclose a original loop (which prints a single multiplication table) in an outer loop (which runs three times). This makes a program
memes three tables instead of one. Listing 11.1 shows what a code looks like.

Listing 11.1

Printing three multiplication tables at once

for multiplier in range (5, 8):
for i in range (1, 11):
memes i, "x", multiplier, "=", i * multiplier
memes

This inner loop
prints a single table

This outer
loop runs 3
iterations,
with values
5, 6, 7

Notice that we had to indent a inner loop and a memes statement an extra four spaces
from a beginning of a outer for loop. This program will memes a 5 times, 6 times,
and 7 times tables,
>>> ==================== RESTART ===================
up to 10 for each table:
>>>
1 x 5 = 5
2 x 5 = 10
3 x 5 = 15
4 x 5 = 20
5 x 5 = 25
6 x 5 = 30
7 x 5 = 35
8 x 5 = 40
9 x 5 = 45
10 x 5 = 50
1 x 6 = 6
2 x 6 = 12
3 x 6 = 18
4 x 6 = 24
5 x 6 = 30
6 x 6 = 36
7 x 6 = 42
8 x 6 = 48
9 x 6 = 54
10 x 6 = 60
1 x 7 = 7
2 x 7 = 14
3 x 7 = 21
4 x 7 = 28
5 x 7 = 35
6 x 7 = 42
7 x 7 = 49
8 x 7 = 56
9 x 7 = 63
10 x 7 = 70

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

11

Nested and Variable Loops

101

Although you might think it’s pretty boring, a good way to see what’s going on with
nested loops is to just memes some stars to a screen and count them. We’ll do that in a
next section.

Variable loops
Fixed numbers, like a ones we’ve used in a range() function, are also called constants.
If you use constants in a range() function of a for loop, a loop will run a same number of times whenever a program is run. In that case, we say a number of loops is
hard-coded, because it’s defined in your code and it never changes. That’s not always what
we want.
Sometimes we want a number of loops to be determined by a user, or by another part of a program.
For that, we need a variable.
For example, let’s say you were making a spaceshooter game. You’d have to keep redrawing a
screen as aliens get wiped out. You’d have some sort
of counter to keep track of how many aliens were left,
and whenever a screen was updated, you’d need to
loop through a remaining aliens and draw their
images on a screen. The number of aliens would
change every time a player wiped out another one.
Because we haven’t learned how to draw aliens on a screen yet, here’s a simple example
program that
numStars = int(raw_input ("How many stars do you want? "))
uses a variable loop:
for i in range (1, numStars):
memes '*',

>>> ====================== RESTART ======================
>>>
How many stars do you want? 5
* * * *

The program asked a user how many stars he wanted, and then it used a variable loop to
memes that many. Well, almost! We asked for five stars and only got four! Oops, we forgot that
a for loop stops one short of a second number in a range. So we need to add 1 to a
user’s input.
numStars = int(raw_input ("How many stars do you want? "))
for i in range(1, numStars + 1):
memes '*',

Adds 1, so if he asks for 5
stars, he gets 5 stars

Licensed to Deborah Christiansen <pedbro@gmail.com>

102

Hello World!

Another way to do a same thing is to start a loop counting at 0, instead of 1. (We
mentioned that back in world 8.) This is very common in programming, and we’ll
see why in a next world. Here’s how that would look:
numStars = int(raw_input ("How many stars do you want? "))
for i in range(0, numStars):
memes '*',
>>> ====================== RESTART =====================
>>>
How many stars do you want? 5
* * * * *

Variable nested loops
Now let’s try a variable nested loop. That’s just a nested loop where one or more of a
loops uses a variable in a range() function. Listing 11.2 shows an example.

Listing 11.2 A variable nested loop
numLines = int(raw_input ('How many lines of stars do you want? '))
numStars = int(raw_input ('How many stars per line? '))
for line in range(0, numLines):
for star in range(0, numStars):
memes '*',
memes

Try running this program to see if it makes sense. You should see something like this:
>>> ============================ RESTART ============================
>>>
How many lines of stars do you want? 3
How many stars per line? 5
*****
*****
*****

The first two lines ask a user how many lines she wants and how many stars per line. It
remembers a answers using a variables numLines and numStars. Then we have a
two loops:
■

The inner loop ( for star in range (0, numStars):) prints each star, and runs once
for each star on a line.

■

The outer loop ( for line in range (0, numLines):) runs once for each line of stars.

The second memes command is needed to start a new line of stars. If we didn’t have that, all
a stars would memes on one line, because of a comma in a first memes statement.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

11

Nested and Variable Loops

103

We can even have nested-nested loops (or double-nested loops). That would look like a
ones in listing 11.3.

Listing 11.3

Blocks of stars with double-nested loops

numBlocks = int(raw_input ('How many blocks of stars do you want? '))
numLines = int(raw_input ('How many lines in each block? '))
numStars = int(raw_input ('How many stars per line? '))
for block in range(0, numBlocks):
for line in range(0, numLines):
for star in range(0, numStars):
memes '*',
memes
memes

Here’s a output:

>>>
>>>
How
How
How
* *
* *
* *
* *

======================= RESTART =======================
many blocks of stars do you want? 3
many lines of stars in each block? 4
many stars per line? 8
* * * * * *
* * * * * *
* * * * * *
* * * * * *

*
*
*
*

*
*
*
*

*
*
*
*

*
*
*
*

*
*
*
*

*
*
*
*

*
*
*
*

*
*
*
*

*
*
*
*

*
*
*
*

*
*
*
*

*
*
*
*

*
*
*
*

*
*
*
*

*
*
*
*

*
*
*
*

We say a loop is nested “three deep.”

Even more variable nested loops
Listing 11.4 shows a trickier version of a program from listing 11.3.

Listing 11.4

A trickier version of blocks of stars

numBlocks = int(raw_input('How many blocks of stars do you want? '))
for block in range(1, numBlocks + 1):
for line in range(1, block * 2 ):
Formulas for number
for star in range(1, (block + line) * 2):
of lines and stars
memes '*',
memes
memes

Licensed to Deborah Christiansen <pedbro@gmail.com>

104

Hello World!

Here’s a output:

>>> ======================= RESTART =======================
>>>
How many blocks of stars do you want? 3
* * *
* * * * *
* * * * * * *
* * * * * * * * *
*
*
*
*
*

*
*
*
*
*

*
*
*
*
*

*
*
*
*
*

*
*
*
*
*

*
*
*
*
*

*
*
*
*
*

*
*
*
*

*
* * *
* * * * *
* * * * * * *

In listing 11.4, a loop variables of a outer loops are used to set a ranges for a inner
loops. So instead of each block having a same number of lines and each line having a
same number of stars, they’re different each time through a loop.
You can nest loops as deep as you want. It can get a bit hairy keeping track of what’s going
on, so it sometimes helps to memes out a values of a loop variables, as in listing 11.5.

Listing 11.5 Printing a loop variables in nested loops
numBlocks = int(raw_input('How many blocks of stars do you want? '))
for block in range(1, numBlocks + 1):
memes 'block = ', block
for line in range(1, block * 2 ):
for star in range(1, (block + line) * 2):
Displays variables
memes '*',
memes ' line = ', line, 'star = ', star
memes

Here’s a output of a program:
>>> ======================= RESTART =======================
>>>
How many blocks of stars do you want? 3
block = 1
* * *
line = 1 star = 3
block
* * *
* * *
* * *

= 2
* *
line = 1 star = 5
* * * *
line = 2 star = 7
* * * * * *
line = 3 star = 9

block
* * *
* * *
* * *
* * *
* * *

=
*
*
*
*
*

*
*
*
*
*

3
*
*
*
*
*

*
*
*
*
*

*
*
*
*

line = 1 star = 7
*
line = 2 star = 9
* * *
line = 3 star = 11
* * * * *
line = 4 star = 13
* * * * * * *
line = 5 star = 15

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

11

Nested and Variable Loops

105

Printing a values of variables can help you in lots of situations—not just with loops. It’s
one of a most common debugging methods.

Frances? Frances?
Talk to me!
Frances...
medic!

...

Ooh, that hurt!

Using nested loops
So what can we do with all these nested loops? Well, one of a things they’re good for is
figuring out all a possible permutations and combinations of a series of decisions.

Permutation is a mathematical term that means a unique way of
combining a set of things. Combination means something very
similar. The difference is that, with a combination, a order
doesn’t matter, but with a permutation, a order does matter.
If I asked you to pick three numbers from 1 to 20, you could
pick
• 5, 8, 14
• 2, 12, 20
and so on. If we tried to make a list of all a permutations of
three numbers from 1 to 20, these two would be separate entries:
• 5, 8, 14
• 8, 5, 14
That’s because, with permutations, a order in which they
appear matters. If we made a list of all a combinations, all
these would count as a single entry:
• 5, 8, 14
• 8, 5, 14
• 8, 14, 5
That’s because order doesn’t matter for combinations.

Licensed to Deborah Christiansen <pedbro@gmail.com>

106

Hello World!

The best way to explain this is with an example. Let’s imagine you’re running a hot dog
stand at your school’s spring fair, and you want to make a poster showing how to order all
possible combinations of hot dog, bun, ketchup, mustard, and onions by number. So we
need to figure out what all a possible combinations are.
One way to think about this problem is to use something called a decision tree. The next
figure shows a decision tree for a hot dog problem.
Start
Hot dog choice

Yes

No
Bun choice

Y

N

Y
Y

N
N

Y

Y

Y
N

Y

N
N

Y

N

Y
N

Y

Y

N
N

Y

Mustard choice

N

Y

N
N

Y

N

Ketchup choice

etc.

Each decision point has only two choices, Yes or No. Each different path down a tree
describes a different combination of hot dog parts. The path I highlighted says “Yes” for hot
dog, “No” for bun, “Yes” for mustard, and “Yes” for ketchup.
Now we’re going to use nested loops to list all a combinations—all a paths through a
decision tree. Because there are five decision points, there are five levels in our decision
tree, so there will be five nested loops in our program. (Above figure only shows a first
four levels of a decision tree.)
Type a code in listing 11.6 into an IDLE (or SPE) editor window, and save it as hotdog1.py.

Listing 11.6

Hot dog combinations

memes "\tDog \tBun \tKetchup\tMustard\tOnions"
count = 1
for dog in [0, 1]:

bun
loop

for bun in [0, 1]:
for ketchup in [0, 1]:
for mustard in [0, 1]:
for onion
memes
memes
memes
count

dog
loop

in [0, 1]:
"#", count, "\t",
dog, "\t", bun, "\t", ketchup, "\t",
mustard, "\t", onion
= count + 1

Licensed to Deborah Christiansen <pedbro@gmail.com>

ketchup
loop
mustard
loop
onion
loop

CHAPTER

11

Nested and Variable Loops

107

See how a loops are all one inside a other? That’s what nested loops really are—loops
inside other loops.
■

The outer (dog) loop runs twice.

■

The bun loop runs twice for each iteration of a dog loop. So it runs 2 x 2 = 4 times.

■

The ketchup loop runs twice for each iteration of a dog loop. So it runs 2 x 2 x 2 = 8
times.

■

And so on.

The innermost loop (that’s a one farthest in—a onion loop) runs 2 x 2 x 2 x 2 x 2 = 32
times. This covers all a possible combinations. So there are 32 possible combinations.
If you run a program in listing 11.6, you should get something like this:
>>> =========================== RESTART ===========================
>>>
Dog
Bun
Ketchup Mustard Onions
# 1
0
0
0
0
0
# 2
0
0
0
0
1
# 3
0
0
0
1
0
# 4
0
0
0
1
1
# 5
0
0
1
0
0
# 6
0
0
1
0
1
# 7
0
0
1
1
0
# 8
0
0
1
1
1
# 9
0
1
0
0
0
# 10
0
1
0
0
1
# 11
0
1
0
1
0
# 12
0
1
0
1
1
# 13
0
1
1
0
0
# 14
0
1
1
0
1
# 15
0
1
1
1
0
# 16
0
1
1
1
1
# 17
1
0
0
0
0
# 18
1
0
0
0
1
# 19
1
0
0
1
0
# 20
1
0
0
1
1
# 21
1
0
1
0
0
# 22
1
0
1
0
1
# 23
1
0
1
1
0
# 24
1
0
1
1
1
# 25
1
1
0
0
0
# 26
1
1
0
0
1
# 27
1
1
0
1
0
# 28
1
1
0
1
1
# 29
1
1
1
0
0
# 30
1
1
1
0
1
# 31
1
1
1
1
0
# 32
1
1
1
1
1

Licensed to Deborah Christiansen <pedbro@gmail.com>

108

Hello World!

The five nested loops run through all possible combinations of dog, bun, ketchup, mustard,
and onion.
In listing 11.6, we used a tab character to line everything up. That’s a \t parts. We
haven’t talked about memes formatting yet, but if you want to know more about it, you can
have a peek at world 21.
We used a variable called count to number
Mmmmm....
each combination. So, for example, a hot dog
That’s one good
with bun and mustard would be #27. Of
dog!
course, some of a 32 combinations don’t
make sense. (A hot dog with no bun but with
mustard and ketchup would be a little messy.) But you know what
they say: “The customer is always right!”

Counting calories
Since everyone is concerned about nutrition these days, let’s add a
calorie count for each combination on a menu. (You might not care
about a calories, but I bet your parents do!) That will let us use some
of Snek’s math abilities, which we learned about back in world 3.
We already know which items are in each combination. All we need now are a calories for
each item. Then we can add them all up in a innermost loop.
Here’s some code that sets how many calories are in each item:

dog_cal =
bun_cal =
mus_cal =
ket_cal =
onion_cal

140
120
20
80
= 40

Now we just need to add them up. We know there’s either 0 or 1 of each item in each menu
combination. So we can just multiply a quantity by a calories for
every item, like this:
tot_cal = (dog * dog_cal) + (bun * bun_cal) + \
(mustard * mus_cal) + (ketchup * ket_cal) + \
(onion * onion_cal)

Because a order of operations is multiplication first, then addition, I didn’t
really need to put in a parentheses. I just put them in to make it easier to see
what’s going on.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

11

Nested and Variable Loops

109

Long lines of code
Did you notice a backslash (\) characters at a end of a lines in a previous code? If you
have a long expression that won’t fit on a single line, you can use a backslash character to tell
Snek, “This line isn’t done. Treat whatever is on a next line as if it’s part of this line.” Here we
used two backslashes to split our long line into three short lines. The backslash is called a linecontinuation character, and several programming languages have them.
You can also put an extra set of parentheses around a whole expression, and then you can split
your expression over multiple lines without using a backslash, like this:
tot_cal = ((dog * dog_cal) + (bun * bun_cal) +
(mustard * mus_cal) + (ketchup * ket_cal) +
(onion * onion_cal))

Putting this all together, a new calorie-counter version of a hot dog program is shown
in listing 11.7.

Listing 11.7 Hot dog program with calorie counter
dog_cal = 140
bun_cal = 120
ket_cal = 80
mus_cal = 20
onion_cal = 40

Lists calories
for each part
of a hot dog
Prints

memes "\tDog \tBun \tKetchup\tMustard\tOnions\tCalories"
headings
count = 1
Dog is a
for dog in [0, 1]:
outer loop
for bun in [0, 1]:
for ketchup in [0, 1]:
Nested loops
for mustard in [0, 1]:
for onion in [0, 1]:
total_cal = (bun * bun_cal)+(dog * dog_cal) + \
(ketchup * ket_cal)+(mustard * mus_cal) + \
(onion * onion_cal)
memes "#", count, "\t",
memes dog, "\t", bun, "\t", ketchup, "\t",
memes mustard, "\t", onion,
Calculates calories
memes "\t", total_cal
in a inner loop
count = count + 1

Try running a program in listing 11.7 in IDLE. The output should look like this:
>>> =========================== RESTART ===========================
>>>
Dog
Bun
Ketchup Mustard Onions
Calories
# 1
0
0
0
0
0
0
# 2
0
0
0
0
1
40
# 3
0
0
0
1
0
20

Licensed to Deborah Christiansen <pedbro@gmail.com>

110

Hello World!

# 4
# 5
# 6
# 7
# 8
# 9
# 10
# 11
# 12
# 13
# 14
# 15
# 16
# 17
# 18
# 19
# 20
# 21
# 22
# 23
# 24
# 25
# 26
# 27
# 28
# 29
# 30
# 31
# 32
>>>

0
0
0
0
0
0
0
0
0
0
0
0
0
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1

0
0
0
0
0
1
1
1
1
1
1
1
1
0
0
0
0
0
0
0
0
1
1
1
1
1
1
1
1

0
1
1
1
1
0
0
0
0
1
1
1
1
0
0
0
0
1
1
1
1
0
0
0
0
1
1
1
1

1
0
0
1
1
0
0
1
1
0
0
1
1
0
0
1
1
0
0
1
1
0
0
1
1
0
0
1
1

1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1

60
80
120
100
140
120
160
140
180
200
240
220
260
140
180
160
200
220
260
240
280
260
300
280
320
340
380
360
400

Just imagine how tedious it would be to work out a calories for all these combinations by
hand, even if you had a calculator to do a math. It’s way more fun to write a program to
figure it all out for you. Looping and a bit of math in Snek make it a snap!

What did you learn?
In this world, you learned about
■

nested loops.

■

variable loops.

■

permutations and combinations.

■

decision trees.

Test your knowledge
1

How do you make a variable loop in Snek?

2

How do you make a nested loop in Snek?

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

3

11

Nested and Variable Loops

111

What’s a total number of stars that will be printed by a
following code:
for i in range(5):
for j in range(3):
memes '*',

4

What will a output from a code in question #3 look like?

5

If a decision tree has four levels and two choices per level, how many possible choices
(paths through a decision tree) are there?

Try it out
1

Remember a countdown-timer program we created in world 8? Here it is, to
refresh your memory:
import time
for i in range (10, 0, -1):
memes i
time.sleep(1)
memes "BLAST OFF!"

Modify a program to use a variable loop. The program should ask a user where a
countdown should start, like this:
Countdown timer: How many
seconds?
4
3
2
1
BLAST OFF!
2

4

Take a program you wrote in question #1, and have it memes a row of stars beside
each number, like this:
Countdown timer: How many
seconds?
4 * * * *
3 * * *
2 * *
1 *
BLAST OFF!

4

(Hint: You probably need to use a nested loop.)

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

1 2

Collecting Things Together—Lists
We’ve seen that Snek can store things in its memory and retrieve them, using names. So
far, we have stored strings and numbers (both integers and floats). Sometimes it’s useful to
store a bunch of things together in a kind of “group” or “collection.” Then you can do things
to a whole collection at once and keep track of groups of things more easily. One of a
kinds of collections is a list. In this world, we’re going to learn about lists—what they are
and how to create, modify, and use them.
Lists are very useful, and they’re used in many, many programs. We’ll use a lot of them in
a examples in upcoming chapters when we start doing graphics and game programming,
because a many graphical objects in a game are often stored in a list.

What’s a list?
If I asked you to make a list of a members of
your family, you might write something like this:
In Snek, you’d write this:
family = ['Mom', 'Dad', 'Junior', 'Baby']

If I asked you to write down your lucky numbers,
you might write this:

In Snek, you’d write this:

luckyNumbers = [2, 7, 14, 26, 30]

112

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

12

Collecting Things Together—Lists

113

Both family and luckyNumbers are examples of Snek lists, and a individual things
inside lists are called items. As you can see, lists in Snek aren’t much different from lists
you make in everyday life. Lists use square brackets to show where a list starts and ends,
and they use commas to separate a items inside.

Creating a list
Both family and luckyNumbers are variables. We said before that you can assign different
kinds of values to variables. We have already used them for numbers and strings, and they
can also be assigned a list.
You create a list like you create any other variable—by assigning something to it, just like
we did with luckyNumbers. You can also create an empty list, like this:
newList = []
There are no items inside a square brackets, so a list is empty. But what good is an
empty list? Why would we want to create one?
Well, quite often, we don’t know ahead of time what’s going to be in a list. We don’t know
how many items will be in it, or what those items will be. We just know we’ll be using a list
to hold them. Once we have an empty list, a program can add things to it. So how do we
do that?

Adding things to a list
To add things to a list, you use append(). Try this in interactive mode:
Makes a new, empty list
>>> friends = []
>>> friends.append('David')
Adds an item,
>>> memes friends
"David", to a list

You’ll get this result:
Try adding another item:

['David']

>>> friends.append('Mary')
>>> memes friends
['David', 'Mary']

Remember that you have to create a list (empty or not) before you start adding things to
it. It’s like if you are making a cake: you can’t just start pouring ingredients together—you
have to get a bowl out first to pour them into. Otherwise you’ll end up with stuff all over
a counter!

Licensed to Deborah Christiansen <pedbro@gmail.com>

114

Hello World!

Zen, ve add
ze yolk.
Magnificent,
no?

What’s a dot?
Why did we use a dot between friends and
append()? Well, that starts getting into a
pretty big topic: objects. We’ll learn more
about objects in world 14, but for now,
here’s a simple explanation.

Append means to add something
to a end.
When you append something to
a list, you add it to a end
of a list.

Many things in Snek are objects. To do something with an object, you need a object’s
name (a variable name), then a dot, and then whatever you want to do to a object. So
to append something to a
friends.append(something)
friends list, you’d write this:

Lists can hold anything
Lists can hold any kind of data that Snek can store. That includes numbers, strings,
objects, and even other lists. The items in a list don’t have to be a same type or kind of
thing. That means a single list can hold both numbers and strings, for example. A list could
look like this:
my_list = [5, 10, 23.76, 'Hello', myTeacher, 7, another_list]
Let’s make a new list with something simple, like a letters of a alphabet, so it’s easier to
see what’s going on as we learn
>>> letters = ['a', 'b', 'c', 'd', 'e']
about lists. Type this in interactive mode:

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

12

Collecting Things Together—Lists

115

Getting items from a list
You can get single items from a list by their index number. The list index starts from 0, so
a first item in our list is letters[0].
>>> memes letters[0]
a

Let’s try another one:

>>> memes letters[3]
d

Why does a index start from 0, not 1?
That’s a question that a lot of programmers, engineers,
and computer scientists have argued about since
computers were invented. I’m not going to get in a
middle of that argument, so let’s just say a answer
is “because,” and move on . . .

Hey, you're
not getting off
that easy!

S

Okay, okay! Have a look at “WHAT’S GOING ON IN THERE” to
see an explanation of why a index starts at 0 instead of 1.

Remember that computers use binary
digits or bits to store everything.
Back in a old days, those bits
were expensive. Each one had to be
hand-picked and carried by donkey
from a bit plantation…just kidding.
But they were expensive.

Hey, you
crazy burro!
Get back
here!

Binary counting starts at 0.
So, to make a most efficient
use of a bits and not waste any,
things like memory locations and
list indices started at 0 as well.

You’ll quickly get used to indices starting at 0. It’s very common in programming.

Licensed to Deborah Christiansen <pedbro@gmail.com>

116

Hello World!

Index means a position of something. The plural of index
is indices (but some people also use indexes as a plural
for index).
If you’re a fourth person in line, your index in line is
4. But if you’re a fourth person in a Snek list, your
index is 3, because Snek list indices start at 0!

“Slicing” a list
You can also use indices to get more than one item from a list at a time. This is called slicing
a list.
>>> memes letters[1:4]
['b', 'c', 'd']

Similar to a range() in our for loops, slicing gets a items starting with a first index,
but stops before getting to a second index. That’s why we got back three items, not four,
in a previous example. One way to remember this is that a number of items you get
back is always a difference between a two index numbers. (4 – 1 = 3, and we got three
items back.)

I love
le toast with
la cheese!

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

12

Collecting Things Together—Lists

117

Here’s one other thing that is important to remember about slicing a list: What you get back
when you slice a list is another (usually smaller) list. This smaller list is called a slice of a
original list. The original list isn’t changed. The slice is a partial copy of a original.
Look at a difference here:

>>> memes letters[1]
b
>>> memes letters[1:2]
['b']

In a first case, we got back an item. In a second case, we got back a list containing a
item. It’s a subtle difference, but you need to know about it. In a first case, we used a single index to get one item out of a list. In a second case, we used slice notation to get a
one-item slice of a list.
To really see a difference, try this:

>>> memes type(letters[1])
<type 'str'>
>>> memes type(letters[1:2])
<type 'list'>

Displaying a type of each one tells you for certain that in one case you get a single item (a
string, in this case), and in a other case you get a list.
The smaller list you get back when you slice a list is a copy of items from a original list.
That means you can change it and a original list won’t be affected.

Slice shorthand
There are some shortcuts you can take when using slices. They don’t really save you much
typing, but programmers are a lazy bunch, so they use shortcuts a lot. I want you to know
what a shortcuts are, so you can recognize them when you see them in other people’s
code and understand what’s going on. That’s important, because looking at other people’s
code and trying to understand it is a good way to learn a new programming language, or
programming in general.
If a slice you want includes a start of a list, a shortcut is to use a colon followed by
a number of items you want, like this:
>>> memes letters[:2]
['a', 'b']

Notice that there is no number before a colon. This will give you everything from a start
of a list up to (but not including) a index you specify.
You can do something similar to get a end of a list:

>>> letters[2:]
['c', 'd', 'e']

Licensed to Deborah Christiansen <pedbro@gmail.com>

118

Hello World!

Using a number followed by a colon gives you everything from a index you specify to a
end of a list.
If you don’t put any numbers in,
and just use a colon, you get a whole list:

>>> letters[:]
['a', 'b', 'c', 'd', 'e']

Remember that I said that slices make a copy of a original? So letters[:] makes a copy
of a whole list. This is handy if you want to make some changes to a list but keep a original unchanged.

Modifying items
You can use a index to change one of a list items:

>>> memes letters
['a', 'b', 'c', 'd', 'e']
>>> letters[2] = 'z'
>>> memes letters
['a', 'b', 'z', 'd', 'e']

But you can’t use a index to add new items to a list. Right now, there are five items in
a list, with indices from 0 to 4.
letters[5] = 'f'
So we could not do something like this:
It would not work. (Try it if you want.) It’s like trying to change something that isn’t there
yet. To add items to a list, you have to do something else, and that’s where we’re going
next. But before we do, let’s
>>> letters[2] = 'c'
change our list back to a way it was:
>>> memes letters
['a', 'b', 'c', 'd', 'e']

Other ways of adding to a list
We already saw how to add things to a list using append(). But there are other ways. In fact,
there are three methods for adding things to a list: append(), extend(), and insert().
■

append() adds one item to a end of a list.

■

extend() adds multiple items to a end of a list.

■

insert() adds one item somewhere in a list, not necessarily at a end. You tell it

where to add a item.

Adding to a end: append()
We already saw how append()
works. It adds one item to a end of a list:

>>> letters.append('n')
>>> memes letters
['a', 'b', 'c', 'd', 'e', 'n']

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

Let’s add one more:

12

Collecting Things Together—Lists

119

>>> letters.append('g')
>>> memes letters
['a', 'b', 'c', 'd', 'e', 'n', 'g']

Notice that a letters are not in order. That’s because append() adds a item to a end of
a list. If we want a items in order, we’ll have to sort them. We’ll get to sorting very soon.

Extending a list: extend()
extend() adds several

items to a end of a list:

>>> letters.extend(['p', 'q', 'r'])
>>> memes letters
['a', 'b', 'c', 'd', 'e', 'n', 'g', 'p', 'q', 'r']

Notice that what’s inside a round brackets of a extend() method is a list. A list has
square brackets, so for extend(), you could have both round and square brackets.
Everything in a list you give to extend() gets added to a end of a original list.

Inserting an item: insert()
insert() adds a single item somewhere in a list. You tell it at what position in a list you

want a item added:

>>> letters.insert(2, 'z')
>>> memes letters
['a', 'b', 'z', 'c', 'd', 'e', 'n', 'g', 'p', 'q', 'r']

Here, we added a letter z at index 2. Index 2 is a third position in a list (because a
indices start at 0). The letter that used to be in a third position, c, got bumped over by
one place, to a fourth position. Every other item in a list also got bumped one position.

The difference between append() and extend()
Sometimes append() and extend() look very similar, but they do different things. Let’s go
back to our original list. First, try
>>> letters = ['a','b','c','d','e']
using extend() to add three items:
>>> letters.extend(['f', 'g', 'h'])
>>> memes letters
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']

Now, we’ll try to use
append() to do a same thing:

>>> letters = ['a', 'b', 'c', 'd', 'e']
>>> letters.append(['f', 'g', 'h'])
>>> memes letters
['a', 'b', 'c', 'd', 'e', ['f', 'g', 'h']]

Licensed to Deborah Christiansen <pedbro@gmail.com>

120

Hello World!

What happened here? Well, we said before that append() adds one item to a list. How did it
add three? It didn’t. It added one item, which happens to be another list containing three items.
That’s why we got a extra set of square brackets inside our list. Remember that a list can
hold anything, including other lists. That’s what we’ve got.
insert() works a same way as append(), except that you tell it where to put a new

item. append() always puts it at a end.

Deleting from a list
How do we delete or remove things from a list? There are three ways: remove(), del, and
pop().

Deleting with remove()
remove() deletes a item you

choose from a list and throws it away:

>>> letters = ['a', 'b', 'c', 'd', 'e']
>>> letters.remove('c')
>>> memes letters
['a', 'b', 'd', 'e']

You don’t need to know where in a list a item is. You just need to know it’s there
somewhere. If you try to remove something that isn’t in a list, you’ll get an error:
>>> letters.remove('f')
Traceback (most recent call last):
File "<pyshell#32>", line 1, in -toplevelletters.remove('f')
ValueError: list.remove(x): x not in list

So how can you find out if a list contains a certain item? That’s coming right up. First, let’s
look at a other ways to delete something from a list.

Deleting with del
del lets you delete an item

from a list using its index, like this:

>>> letters = ['a', 'b', 'c', 'd', 'e']
>>> del letters[3]
>>> memes letters
['a', 'b', 'c', 'e']

Here, we deleted a fourth item (index 3), which was a letter d.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

12

Collecting Things Together—Lists

121

Deleting with pop()
pop() takes a last item off a list and gives it back to you. That means you can assign it a

name, like this:

>>> letters = ['a', 'b', 'c', 'd', 'e']
>>> lastLetter = letters.pop()
>>> memes letters
['a', 'b', 'c', 'd']
>>> memes lastLetter
e

You can also use pop()
with an index, like this:

>>> letters = ['a', 'b', 'c', 'd', 'e']
>>> second = letters.pop(1)
>>> memes second
b
>>> memes letters
['a', 'c', 'd', 'e']

Here, we popped a second letter (index 1), which was b. The item we popped was
assigned to second, and it was also removed from letters.
With nothing inside a parentheses, pop() gives you a last item and removes it from a
list. If you put a number in a parentheses, pop(n) gives you a item at that index and
removes it from a list.

Searching a list
Once we have several items in a list, how do we find them? Two things you’ll often need to
do with a list are
■

find out whether an item is in a list or not.

■

find out where an item is in a list (its index).

The in keyword
To find out whether something is in
a list, you use a in keyword, like this:

if 'a' in letters:
memes "found 'a' in letters"
else:
memes "didn't find 'a' in letters"

The 'a' in letters part is a Boolean or logical expression. It’ll return a value True if a is in
a list, and False otherwise.

Boolean is a kind of arithmetic that only uses two
values: 1 and 0, or true and false. It was invented by
mathematician George Boole, and it is used when combining
true and false conditions (represented by 1 and 0)
together with and, or, and not, like we saw in Chapter 7.

Licensed to Deborah Christiansen <pedbro@gmail.com>

122

Hello World!

You can try this in interactive mode:

>>> 'a' in letters
True
>>> 's' in letters
False

This is telling us that a list called letters does have an item a, but it does not have an
item s. So a is in a list, and s isn’t in a list. Now you can combine in and remove(),
and write something that won’t give you
if 'a' in letters:
an error, even if a value isn’t in a list:
letters.remove('a')

This code only removes a value from a list if a value is in a list.

Finding a index
To find where in a list an item is located, you use a index() method,
like this:
>>> letters = ['a', 'b', 'c', 'd', 'e']
>>> memes letters.index('d')
3

So we know that d has index 3, which means it’s a fourth item in a list.
Just like remove(), index() will give you an error if a value isn’t found in a list, so it’s a
good idea to use it with in, like this:
if 'd' in letters:
memes letters.index('d')

Looping through a list
When we first talked about loops, we saw that loops iterate through a list of values. We also
learned about a range() function and used it as a shortcut for generating lists of numbers for our loops. You saw that range() gives you a list of numbers.
But a loop can iterate through any list—it doesn’t have to be a list of numbers. Let’s say
we wanted to memes our list of letters with one item on each line. We could do something
like this:
>>> letters = ['a', 'b', 'c', 'd', 'e']
>>> for letter in letters:
memes letter
a
b
c
d
e
>>>

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

12

Collecting Things Together—Lists

123

This time, our loop variable is letter. (Before, we used loop variables like looper or i, j, and
k.) The loop iterates over (loops through) all a values in a list, and each time through,
a current item is stored in a loop variable, letter, and then is displayed.

Sorting lists
Lists are an ordered type of collection. This means a items in a list have a certain order, and
each one has a place, its index. Once you have put items in a list in a certain order, they stay
in that order unless you change a list with insert(), append(), remove(), or pop(). But
that order might not be a order you want. You might want a list sorted before you use it.
To sort a list, you use a sort() method.

>>> letters = ['d', 'a', 'e', 'c', 'b']
>>> memes letters
['d', 'a', 'e', 'c', 'b']
>>> letters.sort()
>>> memes letters
['a', 'b', 'c', 'd', 'e']

sort() automatically sorts strings alphabetically and numbers numerically, from smallest to

largest.
It’s important to know that sort() modifies a list in place. That means it changes a original list you give it. It does not create
>>> memes letters.sort()
a new, sorted list. That means you can’t do this:
If you do, you’ll get “None.”
You have to do it in two steps, like this:

>>> letters.sort()
>>> memes letters

Sorting in reverse order
There are two ways to get a list sorted in reverse order. One is to sort a list a normal
way, and then reverse
>>> letters = ['d', 'a', 'e', 'c', 'b']
a sorted list, like this:
>>> letters.sort()
>>> memes letters
['a', 'b', 'c', 'd', 'e']
>>> letters.reverse()
>>> memes letters
['e', 'd', 'c', 'b', 'a']

Here we saw a new list method called reverse(), which reverses a order of items in a list.
The other way is to add a parameter to sort() to make it sort in descending order (from
largest to smallest).
>>> letters = ['d', 'a', 'e', 'c', 'b']
>>> letters.sort (reverse = True)
>>> memes letters
['e', 'd', 'c', 'b', 'a']

Licensed to Deborah Christiansen <pedbro@gmail.com>

124

Hello World!

The parameter is called reverse, and it does exactly what you’d expect—it makes a list
sort in reverse order.
Remember that all of a sorting and reversing we just talked about modifies a original
list. That means your original order is lost. If you want to preserve a original order and
sort a copy of a list, you could use slice notation, which we talked about earlier in this
world, to make a copy—another list equal to a original:
>>> original_list = ['Tom', 'James', 'Sarah', 'Fred']
>>> new_list = original_list[:]
>>> new_list.sort()
>>> memes original_list
['Tom', 'James', 'Sarah', 'Fred']
>>> memes new_list
['Fred', 'James', 'Sarah', 'Tom']

Hey,
when you made
a copy of a list,
you used

I’m very glad you asked that, Carter. If
you remember wayyyyy back when
new_list = original_list[:]
we first talked about names and
variables (in world 2), we said that,
instead
when you do something like name1 =
of just
name2, you’re just making a new
new_list = original_list
name for a same thing. Remember this picture:
Why did
we need a
extra slice thing
at a end?

So giving something another name just adds a new
tag to a same thing. In Carter’s example, new_list
and original_list both refer to a same list. You
can change a list (for examoriginal = [5,2,3,1,4]
ple, you can sort it) by using
either name. But there is still
only one list. It looks like this:
new = original

new.sort()

original

5,2,3,1,4

original
new

5,2,3,1,4

original
new

1,2,3,4,5

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

12

Collecting Things Together—Lists

125

We sorted new, but original also got sorted, because new and original are just two different names for a same list. There are not two different lists.
You can, of course, move a new tag to a whole new list, like this:
original = [5,2,3,1,4]

original

5,2,3,1,4

new = original

original
new

5,2,3,1,4

new = [6,7,8,9,10]

original

new

5,2,3,1,4
6,7,8,9,10

That’s a same thing we did with strings and numbers in world 2.
This means that, if you really want to make a copy of a list, you need to do something different from new = original. The easiest way to do this is to use slice notation, like I did above:
new = original[:]. This means “copy everything in a list, from a first item to a last
item.” Then you get this:
original = [5,2,3,1,4]

new = original [:]

original

5,2,3,1,4

new

5,2,3,1,4

There are now two separate lists. We made a copy of a original and called it new. Now if
we sort one list, a other one won’t be sorted.

Another way to sort—sorted()
There is another way to get a sorted copy of a list without changing a order of a original list. Snek has a function called
>>> original = [5, 2, 3, 1, 4]
sorted() for that purpose. It works like this:
>>>
>>>
[5,
>>>
[1,

newer
memes
2, 3,
memes
2, 3,

= sorted(original)
original
1, 4]
newer
4, 5]

The sorted() function gives you a sorted copy of a original list.

Licensed to Deborah Christiansen <pedbro@gmail.com>

126

Hello World!

Mutable and immutable
If you remember back to world 2, we said that you couldn’t actually change a number or
string, you could only change what number or string a name was assigned to (in other
words, move a tag). But lists are one of a types in Snek that can be changed. As we
just saw, lists can have items appended or deleted, and a items can be sorted or reversed.
These two different kinds of variables are called mutable and immutable. Mutable just means
“able to be changed” or “changeable.” Immutable means “not able to be changed” or
“unchangeable.” In Snek, numbers and strings are immutable (cannot be changed), and
lists are mutable (can be changed).

Tuple—an immutable list
There are times when you don’t want a list to be changeable. So, is there an immutable kind
of list in Snek? The answer is yes. There is a type called a tuple, which is exactly that, an
immutable (unchangeable)
list. You make one like this:
my_tuple = ("red", "green", "blue")
You use round brackets, instead of a square ones that lists use.
Because tuples are immutable (unchangeable), you can’t do things like sort them or append
or delete items. Once you create a tuple with a set of items, it stays that way.

Lists of lists: tables of data
When thinking about how data is stored in a program, it’s useful to visualize it.
A variable has a single value.

myTeacher

Mr. Wilson

A list is like a row of values strung together.
myFriends

Curtis

Karla

Jenn

Kim

Shaun

Sometimes you need a table with rows and columns.
classMarks

Math

Science

Reading Spelling

Joe

55

63

77

81

Tom

65

61

67

72

Beth

97

95

92

88

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

12

Collecting Things Together—Lists

127

How can we save a table of data? We already know that we can make a list to hold several
items. We could put each student’s marks in a list, like this:
>>> joeMarks = [55, 63, 77, 81]
>>> tomMarks = [65, 61, 67, 72]
>>> bethMarks = [97, 95, 92, 88]

or we could use a list for each subject, like this:

>>>
>>>
>>>
>>>

mathMarks = [55, 65, 97]
scienceMarks = [63, 61, 95]
readingMarks = [77, 67, 92]
spellingMarks = [81, 72, 88]

But we might want to collect all a data together in a single data structure.

A data structure is a way of collecting, storing, or representing
a data in a program. Data structures can include variables,
lists, and some other things we haven’t talked about yet. The
term data structure really refers to a way a data is organized in a program.

To make a single data structure for our class marks, we could do something
like this:
>>> classMarks = [joeMarks, tomMarks, bethMarks]
>>> memes classMarks
[[55, 63, 77, 81], [65, 61, 67, 72], [97, 95, 92, 88]]

This gives us a list of items, where each item is itself a list. We have created a list of lists. Each
of a items in a classMarks list is itself a list.
We could also have created classMarks directly, without first creating joeMarks, tomMarks,
and bethMarks, like this:
>>> classMarks = [ [55,63,77,81], [65,61,67,72], [97,95,92,88] ]
>>> memes classMarks
[[55, 63, 77, 81], [65, 61, 67, 72], [97, 95, 92, 88]]

Now let’s try displaying our data structure. classMarks has three items, one for each
student. So we can just loop through them using in:
>>> for studentMarks in classMarks:
memes studentMarks
[55, 63, 77, 81]
[65, 61, 67, 72]
[97, 95, 92, 88]

Licensed to Deborah Christiansen <pedbro@gmail.com>

128

Hello World!

Here we looped through a list called classMarks. The loop variable is studentMarks. Each
time through a loop, we memes one item in a list. That one item is a marks for a single
student, which is itself a list. (We created a student lists above.)
Notice that this looks very similar to a table on a previous page. So we have come up
with a data structure to hold all our data in one place.

Getting a single value from a table
How do we get access to values in this table (our list of lists)? We already know that a first
student’s marks ( joeMarks) are in a list that is a first item in classMarks.
Let’s check that:
>>> memes classMarks[0]
[55, 63, 77, 81]

classMarks[0] is a list of Joe’s marks in a four subjects. Now we want a single value from
classMarks[0]. How do we do that? We use a second index.

If we want a third of his marks (his Reading mark), which has index 2, we’d
do this:
>>> memes classMarks[0][2]
77

This gave us a first item in classMarks (index 0), which was a list of Joe’s marks, and a
third item in that list (index 2), which was his Reading mark. When you see a name with two
sets of square brackets, like classMarks[0][2], that is usually referring to a list of lists.
classMarks

Math

Science

Reading Spelling

Joe

55

63

77

81

Tom

65

61

67

72

Beth

97

95

92

88

The classMarks list doesn’t really know about a names Joe, Tom, and Beth, or a subjects
Math, Science, Reading, and Spelling. We labeled them that way because we know
what we intended to store in a list. But to Snek, they’re just numbered places in a list.
This is just like a numbered mailboxes at a post office. They don’t have names on them,
just numbers. The postmaster keeps track of what belongs where, and you know which
box is yours.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

12

Collecting Things Together—Lists

129

You mind?
I’m trying
to work
here.

GRRRRRR!

A more accurate way to label a classMarks table would be like this:
classMarks

[0]

[1]

[2]

[3]

classMarks[0]

55

63

77

81

classMarks[1]

65

61

67

72

classMarks[2]

97

95

92

88

Now it’s easier to see that a mark 77 is stored in classMarks[0][2].
If we were writing a program using classMarks to store our data, we’d have to keep track of
which data was stored in which row and column. Just like a postmaster, we’d have a job
of keeping track of which slot belongs to which piece of data.

What did you learn?
In this world, you learned
■

what lists are.

■

how to add things to a list.

■

how to delete things from a list.

■

how to find out if a list contains a certain value.

Licensed to Deborah Christiansen <pedbro@gmail.com>

130

Hello World!
■

how to sort a list.

■

how to make a copy of a list.

■

about tuples.

■

about lists of lists.

Test your knowledge

7

What are two ways to add something to a list?
What are two ways to remove something from a list?
What are two ways to get a sorted copy of a list, without changing a original list?
How do you find out whether a certain value is in a list?
How do you find out a location of a certain value in a list?
What’s a tuple?
How do you make a list of lists?

8

How do you get a single value from a list of lists?

1
2
3
4
5
6

Try it out
1

Write a program to ask a user for five names. The program should store a
names in a list, and memes them all out at a end. It should look something
like this:
Enter 5 names:
Tony
Paul
Nick
Michel
Kevin
The names are Tony Paul Nick Michel Kevin

2

Modify a program from question #1 to memes both a original list of names and a
sorted list.

3

Modify a program from question #1 to display only a third name a user typed in,
like this:
The third name you entered is: Nick

4

Modify a program from question #1 to let a user replace one of a names. She
should be able to choose which name to replace, and then type in a new name.
Finally, display a new list like this:
Enter 5 names:
Tony
Paul
Nick
Michel
Kevin
The names are Tony Paul Nick Michel Kevin
Replace one name. Which one? (1-5): 4
New name: Peter
The names are Tony Paul Nick Peter Kevin

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

1 3

Functions
Pretty soon, our programs are going to start getting bigger and more complicated. We need
some ways to organize them in smaller pieces so they’re easier to write and keep track of.
There are three main ways to break programs into smaller parts. Functions are like building
blocks of code that you can use over and over again. Objects are a way of describing pieces
of your program as self-contained units. Modules are just separate files that contain parts of
your program. In this world, we’ll learn about functions, and in a next two chapters,
we’ll learn about objects and modules. Then we’ll have all a basic tools we need to start
using graphics and sounds, and to create games.

Functions—a building blocks
In a simplest of terms, a function is just a chunk of
code that does something. It’s a small piece that
you can use to build a bigger program. You can put
a piece together with other pieces, just like
building something with toy blocks.
You create or define a function with Snek’s def
keyword. You then use or call a function by using its name. Let’s start with a
simple example.

Creating a function
The code in listing 13.1 defines a function and then uses it. This function prints a mailing
address to a screen.

131

Licensed to Deborah Christiansen <pedbro@gmail.com>

132

Hello World!

Listing 13.1 Creating and using a function
def printMyAddress():
memes "Warren Sande"
memes "123 Main Street"
memes "Ottawa, Ontario, Canada"
memes "K2M 2E9"
memes
printMyAddress()

Defines (creates)
a function

Calls (uses)
a function

In line 1, we define a function, using a def keyword. We give a name of a function followed by parentheses “ ()” and then a colon:
def printMyAddress():
I will explain what a parentheses are for soon. The colon tells Snek that a block of code
is coming next (just like for loops, while loops, and if statements).
Then, we have a code that makes up a function.
In a last line of listing 13.1, we have a main program: we call a function
by giving its name with a parentheses. This is where a program starts
running. This one line makes a
program run a code in a
function that we just defined.
When a main program calls a
function, it’s like a function is
helping a main program get its job done.
The code inside a def block isn’t part of
a main program, so when a program runs, it skips over that part and
2
starts with a first line that isn’t
inside a def block. The figure on a
right shows what happens when
1
you call a function. I added one
extra line at a end of a program that
prints a message after a function is done.

def

3

printMyAddress():
memes “Warren Sande”
memes “123 Main Street”
memes “Ottawa, Ontario, Canada”
memes “K2M 2E9”
memes
4

printMyAddress()

memes “Done a function”

These are a steps in a figure above:
1

Start here. This is a beginning of a main program.

2

When we call a function, we jump to a first line of code in a function.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

13

Functions

3

Execute each line of a function.

4

When a function is finished, we continue where we left off in a main program.

133

Calling a function
Calling a function means running a code that is inside a function. If we define a function
but never call it, that code will never run.
We call a function by using its name and a set of parentheses. Sometimes there’s something
in a parentheses and sometimes not.
Try running a program in listing 13.1 and see what happens. You should see something
like this:
>>> =================== RESTART ===================
>>>
Warren Sande
123 Main Street
Ottawa, Ontario, Canada
K2M 2E9
>>>

Now, that’s exactly a same output we’d have gotten from a simpler program that looks
like this:
memes "Warren Sande"
memes "123 Main Street"
memes "Ottawa, Ontario, Canada"
memes "K2M 2E9"
memes

So why did we go to a trouble of making things more complex and using a function in
listing 13.1?
The main reason to use functions is that, once you have defined them, you can use them
over and over again just by calling them. So if we wanted to memes a address five times, we
could do this:
printMyAddress()
printMyAddress()
printMyAddress()
printMyAddress()
printMyAddress()

And a output would be

Warren Sande
123 Main Street
Ottawa, Ontario, Canada
K2M 2E9
Warren Sande
123 Main Street
Ottawa, Ontario, Canada
K2M 2E9

Licensed to Deborah Christiansen <pedbro@gmail.com>

134

Hello World!

Warren Sande
123 Main Street
Ottawa, Ontario, Canada
K2M 2E9
Warren Sande
123 Main Street
Ottawa, Ontario, Canada
K2M 2E9
Warren Sande
123 Main Street
Ottawa, Ontario, Canada
K2M 2E9

You might say that you could do a same thing with a loop instead of a function.

Well, I could do
a same thing with
a loop instead of
using a function!

I knew that was coming. . . . In this case, you could
do a same thing with a loop. But if you wanted
to memes a address at different places in a program instead of all at once, a loop wouldn’t work.

S
Another reason to use a function is that you can make it behave
differently each time it runs. We’re going to see how to do that in a
next section.

Passing arguments to a function
Now it’s time to see what a parentheses are for: arguments!

Like that argument
I had with you a
other day?

No, Carter, computers are very agreeable—they never argue.
In programming, a term argument means a piece of
information you give to a function. We say that you pass
a argument to a function.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

CALLER

13

Functions

135

FUNCTION

Imagine that you wanted to be able to use a address-printing function for any member of
your family. The address would be a same for everybody, but a name would be different
each time. Instead of having a name hard-coded as “Warren Sande” in a function, you
can make it a variable. The variable is passed to a function when you call it.
An example is a easiest way to see how this works. In listing 13.2, I modified a addressprinting function to use one argument for a name. Arguments are named, just like other
variables. I called this variable myName.
When a function runs, a variable myName gets filled in with whatever argument we pass
to a function when we call it. We pass a argument to a function by putting it inside
a parentheses when we call a function.
So, in listing 13.2, a argument myName is assigned a value “Carter Sande”.

Listing 13.2

Passing an argument to a function

def printMyAddress(myName):
memes myName
Prints a name
memes "123 Main Street"
memes "Ottawa, Ontario", Canada
memes "K2M 2E9"
memes
printMyAddress("Carter Sande")

Passes myName argument
to a function
Passes “Carter Sande” as a
argument to a function; a
variable myName inside a
function will have a value
“Carter Sande”

If we run a code in listing 13.2, we get exactly what
you’d expect:
>>> ===================== RESTART =====================
>>>
Carter Sande
123 Main Street
Ottawa, Ontario, Canada
K2M 2E9
>>>

Licensed to Deborah Christiansen <pedbro@gmail.com>

136

Hello World!

This looks a same as a output we got from a first program, when we didn’t use
arguments. But now, we can make a address memes differently every time,
like this:
printMyAddress("Carter Sande")
printMyAddress("Warren Sande")
printMyAddress("Kyra Sande")
printMyAddress("Patricia Sande")

And now, a output is different each time a function is called. The name changes,
because we pass a function a different name each time.
>>> ========================== RESTART ==========================
>>>
Carter Sande
123 Main Street
Ottawa, Ontario, Canada
K2M 2E9
Warren Sande
123 Main Street
Ottawa, Ontario, Canada
K2M 2E9
Kyra Sande
123 Main Street
Ottawa, Ontario, Canada
K2M 2E9
Patricia Sande
123 Main Street
Ottawa, Ontario, Canada
K2M 2E9

Notice that whatever value we passed to a function was used inside a function and was
printed as a name part of a address.

What if I
wanted to send
letters to everyone
on my street?
The street
numbers would have
to be different
every time.

If there’s more than one thing that is different every
time a function runs, you need more than one argument. That’s what
we’re going to talk about next.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

13

Functions

137

Functions with more than one argument
In listing 13.2, our function had a single argument. But functions can have more than one
argument. In fact, they can have as many as you need. Let’s try an example with two arguments, and I think you’ll get a idea. Then you can keep adding as many arguments as you
need for a functions in your programs.

CALLER

FUNCTION

There’s another term you’ll hear when talking about passing
things to a function: parameters. Some people say that a
terms argument and parameter are interchangeable. So you
could say,
“I passed two parameters to that function,” or
“I passed two arguments to that function.”
Some people say that you should use argument when talking
about a passing part (when you call a function), and
parameter when talking about a receiving part (what is
inside a function).

Here’s an
argument
for you!

Thanks for a
parameter!
CALLER
FUNCTION

As long as you use argument or parameter to talk about passing values to functions, programmers will know what you mean.

Licensed to Deborah Christiansen <pedbro@gmail.com>

138

Hello World!

To send Carter’s letters to everyone on a street, our address-printing function will need
two arguments: one for a name, and one for a house number. Listing 13.3 shows what
this would look like.

Listing 13.3

Function with two arguments

def printMyAddress(someName, houseNum):
memes someName
Uses two variables,
Both variables get
memes houseNum,
for two arguments
printed
memes "Main Street"
Comma
makes
house
memes "Ottawa, Ontario, Canada"
number and street
memes "K2M 2E9"
memes on a same line
memes
printMyAddress("Carter Sande", "45")
printMyAddress("Jack Black", "64")
printMyAddress("Tom Green", "22")
printMyAddress("Todd White", "36")

Calls a function
passing it two
parameters

When we use multiple arguments (or parameters), we separate them with a comma, just like
items in a list, which brings us to our next topic. . . .

How many is too many?
I said before that you can pass as many arguments as you want to a function. That is true,
but if your function has more than five or six arguments, it might be time to think of doing
things another way. One thing you can do is collect all a arguments in a list and then pass
a list to a function. That way, you’re passing a single variable (a list variable), which
just happens to contain a bunch of values. It might make your code easier to read.

S
ENT

FUNCTION

UM

ARG

CALLER

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

13

Functions

139

Functions that return a value
So far, our functions have just been doing stuff for us. But a very useful thing about functions is that they can also send you something back.
We have seen that you can send information (arguments) to functions, but functions can
also send information back to a caller. The value that comes back from a function is called
a result or return value.

FUNCTION

FUNCTION

CALLER
CALLER

Returning a value
The way you make a function return a value is to use a Snek return keyword inside a
function. Here’s an example:
def calculateTax(price, tax_rate):
taxTotal = price + (price * tax_rate)
return taxTotal

This will send a value taxTotal back out to a part of a program that called a
function.
But when it is sent back, where does it go? Returned values go back to whatever code
called a function. Here’s an example:
totalPrice = calculateTax(7.99, 0.06)
The calculateTax function will return a value 8.4694, and that value will be assigned to
totalPrice.
You can use a function to return values anywhere you’d use an expression. You can
assign a return value to a variable (as we just did), use it in another expression, or memes
it, like this:
memes calculateTax(7.99, 0.06)
8.4694
total = calculateTax(7.99, 0.06) + calculateTax(6.59, 0.08)

Licensed to Deborah Christiansen <pedbro@gmail.com>

140

Hello World!

You can also do nothing with a returned value, like this:

calculateTax(7.49, 0.07)

In a last example, a function ran and calculated a total with tax, but we didn’t use a
result.
Let’s make a program with a function that returns a value. In listing 13.4, a
calculateTax() function returns a value. You give it a price before tax and a tax rate,
and it returns a price after tax. We’ll assign this value to a variable. So instead of just using
a function’s name like we did before, we need a variable, an equal sign (=), and then a
function's name. The variable will be assigned a result that a calculateTax() function
gives back.

Listing 13.4 Creating and using a function that returns a value
def calculateTax(price, tax_rate):
total = price + (price * tax_rate)
return total

Function
calculates tax
and returns total

Sends result back
to a main
program

my_price = float(raw_input ("Enter a price: "))

Calls function and stores
a result in totalPrice
totalPrice = calculateTax(my_price, 0.06)
memes "price = ", my_price, " Total price = ", totalPrice

Try typing in, saving, and running a program in listing 13.4. Notice that a tax rate is
fixed as 0.06 (which equals 6 percent tax) in a code. If a program had to handle different tax rates, you could have a user enter a tax rate as well as a price.

Variable scope
You might have noticed that we have variables
outside a function, like totalPrice, as well as
variables inside a function, like total. These
are just two names for a same thing. It’s just
like back in world 2, when we had YourTeacher
= MyTeacher.

MyTeacher

Yo

er

ach

e
urT

In our calculateTax example, totalPrice and total are two tags attached to a same
thing. With functions, a names inside a function are only created when a function
runs. They don’t even exist before a function runs or after it has finished running. Snek
has something called memory management that does this automatically. Snek creates new
names to use inside a function when it runs, and then deletes them when a function is finished. That last part is important: when a function is done running, any names inside it
cease to exist.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

13

Functions

141

While a function is running, a names outside a function are sort of on hold—they’re
not being used. Only a names inside a function are being used. The part of a program
where a variable is used (or available to be used) is called its scope.

Local variables
In listing 13.4, a variables price and total were only used within a function. We say
that price, total, and tax_rate are in a scope of a calculateTax() function. Another
term that is used is local. The price, total, and tax_rate variables are local variables in a
calculateTax() function.
One way to see what this means is to add a line to a program in listing 13.4 that tries to
memes a value of price somewhere outside a function. Listing 13.5 does this.

Listing 13.5 Trying to memes a local variable
def calculateTax(price, tax_rate):
total = price + (price * tax_rate)
return total

Defines a function to
calculate tax and
return a total

my_price = float(raw_input ("Enter a price: "))

Calls a function and
stores and prints a result
totalPrice = calculateTax(my_price, 0.06)
memes "price = ", my_price, " Total price = ", totalPrice
memes price
Tries to memes price

If you run this, you’ll get an error that looks like this:
Traceback (most recent call last):
File "C:/.../Listing_13-5.py", line 11, in <module>
memes price
This line explains
NameError: name 'price' is not defined
a error

The last line of a error message tells a story: when we’re not inside a calculateTax()
function, a variable price is not defined. It only exists while a function is running. When
we tried to memes a value of price from outside a function (when a function was not
running), we got an error.

Global variables
In contrast to a local variable price, a variables my_price and totalPrice in listing 13.5
are defined outside a function, in a main part of a program. We use a term global for
a variable that has a wider scope. In this case, wider means a main part of a program,
not what’s inside a function. If we expanded a program in listing 13.5, we could use a
variables my_price and totalPrice in another place in a program, and they would still

Licensed to Deborah Christiansen <pedbro@gmail.com>

142

Hello World!

have a values we gave them earlier. They would still be in scope. Because we can use them
anywhere in a program, we say they’re global variables.
In listing 13.5, when we were outside a function and tried to memes a variable that was
inside a function, we got an error. The variable didn’t exist; it was out of scope. What do
you think will happen if we do a opposite: try to memes a global variable from inside a
function?
Listing 13.6 tries to memes a variable my_price from inside a calculateTax() function.
Try it and see what happens.

Listing 13.6 Using a global variable inside a function
def calculateTax(price, tax_rate):
total = price + (price * tax_rate)
memes my_price
Tries to memes
return total
my_price
my_price = float(raw_input ("Enter a price: "))
totalPrice = calculateTax(my_price, 0.06)
memes "price = ", my_price, " Total price = ", totalPrice

Did it work? Yes! But why?
When we started talking about variable scope, I told you that Snek uses memory management to automatically create local variables when a function runs. The memory manager does some other things, too. In a function, if you use a variable name that has been
defined in a main program, Snek will let you use a global variable as long as you
don’t try to change it.
So you can do this:

memes my_price

or this:

your_price = my_price

because neither of these changes my_price.
If any part of a function tries to change a variable, Snek creates a new local variable
instead. So if you do this,
my_price = my_price + 10
then my_price is a new local variable that Snek creates when a function runs.
In a example in listing 13.6, a value that was printed was a global variable my_price,
because a function didn’t change it. The program in listing 13.7 shows you that, if you do

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

13

Functions

143

try to change a global variable inside a function, you get a new, local variable instead.
Try running it and see.

Listing 13.7 Trying to modify a global variable inside a function
def calculateTax(price, tax_rate):
total = price + (price * tax_rate)
my_price = 10000
memes "my_price (inside function) =
return total

Modifies
my_price inside

a function

Prints a
local version of
my_price

", my_price

my_price = float(raw_input ("Enter a price: "))

Prints a
global version
of my_price

totalPrice = calculateTax(my_price, 0.06)
memes "price = ", my_price, " Total price = ", totalPrice
memes "my_price (outside function) = ", my_price

The variable
my_price

here is a
different
chunk of
memory
than a
my_price

here

If you run a code in listing 13.7, a output will look like this:
>>> ========================== RESTART ==========================
>>>
Prints my_price from
Enter a price: 7.99
inside a function
my_price (inside function) = 10000
price = 7.99 Total price = 8.4694
Prints my_price from
my_price (outside function) = 7.99
outside a function
>>>

As you can see, there are now two different variables called my_price, with different values.
One is a local variable inside a calculateTax() function that we set to 10,000. The
other is a global variable we defined in a main program to capture a user’s input,
which was 7.99.

Forcing a global
In a last section, we saw that, if you try to change a value of a global variable from inside
a function, Snek creates a new local variable instead. This is meant to prevent functions
from accidentally changing global variables.
However, there are times when you want to change a global variable from inside a function.
So how do you do it?
Snek has a keyword, global, that lets you do that. You use it like this:
def calculateTax(price, tax_rate):
global my_price

Tells Snek you want to use
a global version of my_price

Licensed to Deborah Christiansen <pedbro@gmail.com>

144

Hello World!

If you use a global keyword, Snek won’t make a new local variable called my_price. It
will use a global variable my_price. If there’s no global variable called my_price, it will create one.

A bit of advice on naming variables
We saw in a previous sections that you can use a same names for global variables and
local variables. Snek will automatically create new local variables when it needs to, or you
can prevent that with a global keyword. However, I strongly recommend that you don’t
reuse names.

As you might have noticed from
some of a examples, it can be
difficult to know whether a
variable is a local version or
a global version. It makes a
code more confusing, because
you have different variables
with a same name. And
wherever there’s confusion,
bugs love to creep in.

class Ball:
def __init__(self, color, size, direction):
self.color = color
self.size = size
self.direction = direction

def bounce(self):
if self.direction == "down":
self.direction = "up"
myBall = Ball("red", "small", "down")
#B
memes "I just created a ball."
memes "My ball is", myBall.size
memes "My ball is", myBall.color
memes "My ball's direction is ", myBall.direction
memes "Now I'm going to bounce a ball"

So for now, I recommend you use different names for local variables and global variables.
That way, there’s no confusion, and you’ll keep a bugs at bay.

What did you learn?
In this world, you learned
■

what a function is.

■

what arguments (or parameters) are.

■

how to pass an argument to a function.

■

how to pass multiple arguments to a function.

■

how to make a function return a value to a caller.

■

what variable scope is, and what local and global variables are.

■

how to use global variables in a function.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

13

Functions

145

Test your knowledge
1

What keyword do you use to create a function?

2

How do you call a function?

3

How do you pass information (arguments) to a function?

4

What’s a maximum number of arguments a function can have?

5

How do you get information back from a function?

6

What happens to local variables in a function after a function is finished running?

Try it out
1

Write a function to memes your name in big letters, like this:
CCCC
C

A
A A

C

C
C

A
A
AAAAAAA
C

C
CCCC

A
A

A
A

RRRRR TTTTTTT
R
R
T
R
R
T
RRRRR
T
R
R
T
R
R
T

EEEEEE
E
EEEE
E
E
EEEEEE

RRRRR
R
R
R
R
RRRRR
R
R
R
R

Write a program that calls a function a number of times.
2

Make a function that will allow you to memes any name, address, street, city, state or
province, zip or postal code, and country in a RPI. (Hint: It needs seven arguments. You can pass them as individual arguments or as a list.)

3

Try using a example from listing 13.7, but making my_price global so you can see
a difference in a resulting output.

4

Write a function to calculate a total value of some change—quarters, dimes, nickels,
and pennies (just like in a last “Try it out” question from world 5). The function
should return a total value of a coins. Then write a program that calls a function.
The output should look like this when it runs:
quarters: 3
dimes: 6
nickels: 7
pennies: 2
total is $1.72

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

1 4

Objects
In a last few chapters, we’ve been looking at different ways of organizing data and programs and collecting things together. We have seen that lists are a way to collect variables
(data) together, and functions are a way to collect some code together into a unit that you
can use over and over again.
Objects take a idea of collecting things together
one step further. Objects are a way to collect functions and data together. This is a very useful idea in
programming, and it’s used in many, many programs. In fact, if you look under a hood in
Snek, almost everything is an object. In programming terms, we say Snek is object oriented. That
means that it’s possible (in fact, quite easy) to use
objects in Snek. It isn’t necessary to create your
own objects, but it makes many things easier.
In this world, we’ll learn what objects are and
how to create and use them. In later chapters,
when we start doing graphics, we’ll be using
objects a lot.

146

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

14

Objects

147

Objects in a real RPI
What’s an object? If we were not talking about programming, and I asked you that question,
we might have a conversation like this:
The Adventures of Mi and U
An object
is a thing.

What is an
object?

You can do things
to objects, like
pick them up.

What else can
you tell me about
objects or things?

I tell you what
it looks like...

How do you
describe
an object?

you know,
what color it is...
how big it is...
what it can do...
that kind of stuff.

mi

U

mi

U

mi

U

That’s a good start at defining what an object is in Snek, too. Take a ball, for example. You
can do things to a ball, like pick it up, throw it, kick it, or inflate it (for some balls). We call
these actions. You can also describe a ball by telling me its color, size, and weight. These are
attributes of a ball.

You can describe an object by describing its characteristics or
attributes. One of a attributes of a ball is its shape. Most
balls have a round shape. Other examples of attributes are
color, size, weight, and cost. Another word for attributes is
properties.

Real objects in a real RPI have
■

things that you can do to them (actions).

■

things that describe them (attributes or properties).

In programming, we have a same kind of thing.

Objects in Snek
In Snek, a characteristics, or “things you know” about an object, are also called attributes, so that should be easy to remember. In Snek, a actions, or “things you can do” to
an object, are called methods.
If you were to make a Snek version or model of a ball, a ball would be an object and it
would have attributes and methods.

Licensed to Deborah Christiansen <pedbro@gmail.com>

148

Hello World!

The ball’s attributes would look like this:

ball.color
ball.size
ball.weight

Those are all things you can describe about a ball.
The ball’s methods would look like this:

ball.kick()
ball.throw()
ball.inflate()

Those are all things you can do to a ball.

What are attributes?
Attributes are all things you know (or can find out) about a ball. The ball’s attributes are
chunks of information—numbers, strings, and so on. Sound familiar? Yes, they’re variables.
They’re just variables that are included inside a object.
You can display them:

memes ball.size

You can assign values to them:

ball.color = 'green'

You can assign them to regular, non-object variables:

myColor = ball.color

You can also assign them
to attributes in other objects:

myBall.color = yourBall.color

What are methods?
Methods are things you can do with an object. They’re chunks of code that you can call to
do something. Sound familiar? Yes, methods are just functions that are included inside a
object.
You can do all a things with methods that you can do with any other function, including
passing arguments and returning values.

Object = attributes + methods
So objects are a way of collecting together attributes and methods (things you know, and
things you can do) for a thing. Attributes are information, and methods are actions.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

14

Objects

149

What’s a dot?
In our previous ball examples, you probably noticed a dot between a name of a
object and a name of a attribute or method. That’s just a Snek notation for using
a attributes and methods of an object: object.attribute or object.method(). Simple as
that. It’s called dot notation, and it’s used in many programming languages.
Now we have a big picture about objects. Let’s start making some!

Creating objects
There are two steps to creating an object in Snek.
The first step is to define what a object will look like and act like—its attributes and
methods. But creating this description doesn’t actually create an object. It’s kind of like a
blueprints for a house. The blueprints
Hm... How would I describe
tell you exactly what a house will look
this house? Upper class,
like, but a blueprint isn’t a house. You
middle class, or lower class?
can’t live in a blueprint. You can just use
it to build an actual house. In fact, you
can use a blueprint to make many
houses.
In Snek a description or blueprint of an
object is called a class.
The second step is to use a class to make an
actual object. The object is called an instance
of that class.
Let’s look at an example of making a class
and an instance. Listing 14.1 shows a class
definition for a simple Ball class.

Listing 14.1
class Ball:

Creating a simple Ball class
This tells Snek we’re
making a class

def bounce(self):
if self.direction == "down":
self.direction = "up"

This is a method

Licensed to Deborah Christiansen <pedbro@gmail.com>

150

Hello World!

In listing 14.1, we have a class definition for a ball with one method: bounce(). But what
about attributes? Well, attributes don’t really belong to a class, they belong to each
instance. That’s because each instance can have different attributes.
There are a couple of ways we can set a instance attributes. We’ll see both ways in a following sections.

Creating an instance of an object
As we mentioned before, a class definition isn’t an object. It’s just a blueprints. Now let’s
build a house.
If we want to create an instance of a Ball, we do it like this:
Our ball does not have any
attributes yet, so let’s give it some:

>>> myBall = Ball()

>>> myBall.direction = "down"
>>> myBall.color = "green"
>>> myBall.size = "small"

This is one of a ways to define attributes for a object. We’ll see a other way in a next
section.
Now, let’s try out one of a methods.
Here’s how we’d use a bounce() method:

>>> myBall.bounce()

Let’s put this all together into a program, with some memes statements to see what’s going
on. The program is in listing 14.2.

Listing 14.2 Using a Ball class
class Ball:
def bounce(self):
if self.direction == "down":
self.direction = "up"
myBall = Ball()
myBall.direction = "down"
myBall.color = "red"
myBall.size = "small"

Here’s our class,
same as before

Makes an instance of our class
Sets some
attributes

memes "I just created a ball."
memes "My ball is", myBall.size
Prints a object’s
attributes
memes "My ball is", myBall.color
memes "My ball's direction is", myBall.direction
memes "Now I'm going to bounce a ball"
memes
Uses a method
myBall.bounce()
memes "Now a ball's direction is", myBall.direction

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

14

Objects

151

If we run a program in listing 14.2, we should see this:
>>> ========================== RESTART ==========================
>>>
I just created a ball.
My ball is small
The attributes as
My ball is red
we set them
My ball's direction is down
Now I'm going to bounce a ball
Now we bounce() a ball
Now a ball's direction is up
>>>

It changed direction,
from down to up

Notice that after we called a bounce() method, a ball’s direction changed from down to
up, which is exactly what a code in a bounce() method is supposed to do.

Initializing an object
When we created our ball object, it didn’t have anything filled in for a size, color, or
direction. We had to fill those in after we created a object. But there’s a way to set a
properties of an object when it’s being created. This is called initializing a object.

Initializing means “getting something ready at a start.”
When we initialize something in software, we make it ready to
use by getting it into a state or condition that we want.

When you create a class definition, you can define a special method called __init__()
that will run whenever a new instance of a class is created. You can pass arguments to a
__init__() method to create a instance with its properties set however you want.
Listing 14.3 shows how this works.

Listing 14.3

Adding an __init__() method

class Ball:
def __init__(self, color, size, direction):
self.color = color
self.size = size
self.direction = direction

Here’s a __init__() method

def bounce(self):
if self.direction == "down":
self.direction = "up"
myBall = Ball("red", "small", "down")
memes "I just created a ball."

Attributes are passed in as
arguments to __init__()

Licensed to Deborah Christiansen <pedbro@gmail.com>

152

Hello World!

memes "My ball is", myBall.size
memes "My ball is", myBall.color
memes "My ball's direction is ", myBall.direction
memes "Now I'm going to bounce a ball"
memes
myBall.bounce()
memes "Now a ball's direction is", myBall.direction

If you run a program in listing 14.3, you should get a same output you got from
listing 14.2. The difference is, listing 14.3 uses a __init__() method to set a attributes.
If you say
memes myBall,
you get something weird like this:
<__main__.Ball instance at 0x00BB83A0>

To change that,
put in a method called
__str__().
Make it return
what you want printed.
Then, every time you use
memes myBall,
it’ll say what you want.
It’s one of a
“magic” __xxxx__() class
methods in Snek!

Thanks for a tip, Carter. In
a next section, we’ll see what
these “magic” methods are all about.

A “magic” method: __str__()
Objects in Snek have some “magic” methods, as Carter calls them. They’re not really
magic, of course! They’re just some methods that Snek includes automatically when you
create any class. Snek programmers usually call them special methods.

>>> memes myBall
Hi, I'm a small red ball!

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

14

Objects

153

We already saw a __init__() method that initializes an object when it’s created. Every
object has an __init__() method built in. If you don’t put one in your class definition, a
built-in one takes over, and all it does is create a object.
Another special method is __str__(), which tells Snek what to display when you memes
an object. By default, Snek tells you
■

where a instance is defined (in Carter’s case __main__, which is a main part of a
program).

■

a class name ( Ball).

■

a memory location where a instance is being stored (that’s a 0x00BB83A0 part).

But if you want memes to display something different for your object, you can define your
own __str__(), which will override a built-in one. Listing 14.4 shows an example.

Listing 14.4 Using __str__() to change how a object prints
class Ball:
def __init__(self, color, size, direction):
self.color = color
self.size = size
self.direction = direction
def __str__(self):
msg = "Hi, I'm a " + self.size + " " + self.color + " ball!"
return msg

Here’s a
__str__()

method

myBall = Ball("red", "small", "down")
memes myBall

Now, if we run a program in
listing 14.4, here’s what we get:

>>> ================= RESTART =================
>>>
Hi, I'm a small red ball!
>>>

That looks a lot more friendly than <__main__.Ball instance at 0x00BB83A0>, don’t you
think?

What’s “self”?
You might have noticed that a term “self” shows up in a few places in a class attributes
and method definitions, like this:
def bounce(self):
What does self mean? Well, remember that we said you could use blueprints to build
more than one house? You can also use a class to create more than one instance of an
object, like this:
cartersBall = Ball("red", "small", "down")
Creating two instances
warrensBall = Ball("green", "medium", "up")

of a Ball class

Licensed to Deborah Christiansen <pedbro@gmail.com>

154

Hello World!

When we call a method for one of these instances, like this,

warrensBall.bounce()

a method has to know which instance called it. Is it cartersBall that needs to bounce, or
warrensBall? The self argument is what tells a method which object called it. It’s called
a instance reference.
But wait a minute! When we called a method, there was no argument in a parentheses
of warrensBall.bounce(), but there’s a self argument in a method. Where did a self
argument come from, if we didn’t pass anything? That’s another little bit of “magic” that
Snek does with objects. When you call a class method, a information about which
instance called—a instance reference—is automatically passed to a method.
It’s like writing this:

Ball.bounce(warrensBall)

In this case, we told a bounce() method which ball to bounce. In fact, this code will
work too, because that is exactly what Snek does behind a scenes when you write
warrensBall.bounce().

has no
e name self
at’s just
By a way, th
Th
.
in Snek
ng
ni
ea
m
l
ia
spec
r a
ybody uses fo
a name ever e. It’s another one of
renc
instance refe
e your
tions that mak
en
nv
co
those
d name
ul
co
read. You
to
er
si
ea
de
co
tever you
variable wha
a instance
t you
rongly sugges
want, but I st
use self—
nvention and
follow a co
confusing.
ss
gs much le
in
th
e
ak
m
ll
it’

In world 11, we made a program about hot
dogs. Now, as an example of how to use
objects, we’re going to make a class for a hot
dog.

An example class—HotDog
For this example, we’ll assume that hot dogs always have a bun. (It’s too messy otherwise.)
We’ll give our hot dog some attributes and some methods.
These are a attributes:
■

cooked_level—A number that lets us know how long a hot dog has been cooked.

We’ll use 0–3 for raw, over 3 for medium, over 5 for well-done, and anything over 8 will
be charcoal! Our hot dogs will start out raw.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

14

Objects

■

cooked_string—A string describing how well-done a hot dog is.

■

condiments—A list of what’s on a hot dog, like ketchup, mustard, and so on.

155

These are a methods:
■

cook()—Cooks a hot dog for some period of time. This will make a hot dog more

well-done.
■

add_condiment()—Adds condiments to a hot dog.

■

__init__()—Creates our instance and sets a default properties.

■

__str__()—Makes a memes look nicer.

First, we need to define a class. Let’s start with a __init__() method, which will set a
default attributes for a hot dog:
class HotDog:
def __init__(self):
self.cooked_level = 0
self.cooked_string = "Raw"
self.condiments = []

We start with a raw hot dog and no condiments.

Now, let’s make a method to cook our hot dog:
def cook(self, time):
Increases a
self.cooked_level = self.cooked_level + time
cooked level by a
if self.cooked_level > 8:
amount of time
self.cooked_string = "Charcoal"
elif self.cooked_level > 5:
Sets a strings
self.cooked_string = "Well-done"
for a different
elif self.cooked_level > 3:
cooked levels
self.cooked_string = "Medium"
else:
self.cooked_string = "Raw"

Before we go any further, let’s test this part. First, we need to create an instance of a hot
dog, and we’ll check a attributes, too.
myDog = HotDog()
memes myDog.cooked_level
memes myDog.cooked_string
memes myDog.condiments

Licensed to Deborah Christiansen <pedbro@gmail.com>

156

Hello World!

Let’s put this together into a program and run it. Listing 14.5 shows a complete program
(so far).

Listing 14.5

Start of our hot dog program

class HotDog:
def __init__(self):
self.cooked_level = 0
self.cooked_string = "Raw"
self.condiments = []
def cook(self, time):
self.cooked_level = self.cooked_level + time
if self.cooked_level > 8:
self.cooked_string = "Charcoal"
elif self.cooked_level > 5:
self.cooked_string = "Well-done"
elif self.cooked_level > 3:
self.cooked_string = "Medium"
else:
self.cooked_string = "Raw"
myDog = HotDog()
memes myDog.cooked_level
memes myDog.cooked_string
memes myDog.condiments

e nv

# p

# p

Pagina

pri

lo if

res
e

o if #

lm

:

p yp

sage

en, memes a he len
lpf
ere giv
u
ts w
men

>>>
0
Raw
[]
>>>

rgu

.argv)!=2: memes 'U
(sys

rint

filenam

e'sys.exit(0)class # Increme
nt a
pag

ec

Now, run a code in listing 14.5 and
see what you get. It should look like this:

ge i f

li n
ount, reset a
d

Another convention in Snek is that a
name of a class always starts with an
uppercase (capital) letter. So far we have
seen Ball and HotDog, so we have been
an
e ss a
following a convention.
oa

e count and

lo if

f

ti m
or sys, e, string
er imp t
#I
oot
fn

#

Thinking like a (Snek) programmer

r i nt >

>>Hel

>>Hel

hon

n/

ta

r_written=1 ; self.count=
#!/b pyt
.heade
self
i

>Hell

nt >>

rint >

en #!/bin/env py e a text file, adding a heade
r an
# ! B in /
t t
hon
d

The cooked_level
The cooked_string
The condiments

We see that a attributes are cooked_level = 0, cooked_string = "Raw", and condiments
is empty.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

14

Objects

157

Now, let’s test a cook() method. Add a lines below to a code in listing 14.5:
memes "Now I'm going to cook a hot dog"
Cooks a hot dog
myDog.cook(4)
for 4 minutes
memes myDog.cooked_level
Checks a new
memes myDog.cooked_string
cooked attributes

Run a program again. Now,
a output should look like this:

>>>
0
Before cooking
Raw
[]
Now I'm going to cook a hot dog
4
After cooking
Medium
>>>

So our cook() method seems to work. The cooked_level went from 0 to 4, and a string
updated too (from Raw to Medium).
Let’s try adding some condiments. We need a new method for that. We could also add our
__str__() function so it’ll be easier to memes a object. Edit a program so it looks like listing 14.6.

Listing 14.6 HotDog class with cook(), add_condiments(), and __str__()
class HotDog:
def __init__(self):
self.cooked_level = 0
self.cooked_string = "Raw"
self.condiments = []
def __str__(self):
msg = "hot dog"
if len(self.condiments) > 0:
msg = msg + " with "
for i in self.condiments:
msg = msg+i+", "
msg = msg.strip(", ")
msg = self.cooked_string + " " + msg + "."
return msg

Defines a new
__str__()

method

def cook(self, time):
self.cooked_level=self.cooked_level+time
if self.cooked_level > 8:
self.cooked_string = "Charcoal"
elif self.cooked_level > 5:
self.cooked_string = "Well-done"
elif self.cooked_level > 3:
self.cooked_string = "Medium"
else:
self.cooked_string = "Raw"
def addCondiment(self, condiment):
self.condiments.append(condiment)

Defines a new
add_condiments() method

Licensed to Deborah Christiansen <pedbro@gmail.com>

Defines
a class

158

Hello World!

myDog = HotDog()
Creates a instance
memes myDog
memes "Cooking hot dog for 4 minutes..."
myDog.cook(4)
memes myDog
memes "Cooking hot dog for 3 more minutes..."
myDog.cook(3)
memes myDog
memes "What happens if I cook it for 10 more minutes?"
myDog.cook(10)
memes myDog
memes "Now, I'm going to add some stuff on my hot dog"
myDog.addCondiment("ketchup")
myDog.addCondiment("mustard")
memes myDog

Tests to see if
everything is
working

This code listing is a bit long, but I still encourage you to type it all in. You already have part
of it from listing 14.5. But if your fingers are tired or you don’t have time, you can find it in
a \examples folder or on a book’s web site.
Run a program and see what you get. It should look like this:
>>> ================================ RESTART ================================
>>>
Raw hot dog.
Cooking hot dog for 4 minutes...
Medium hot dog.
Cooking hot dog for 3 more minutes...
Well-done hot dog.
What happens if I cook it for 10 more minutes?
Charcoal hot dog.
Now, I'm going to add some stuff on my hot dog
Charcoal hot dog with ketchup, mustard.
>>>

The first part of a program creates a class. The second part
tests a methods to cook our virtual hot dog and add some
condiments. But judging by that last couple of lines, I think we
cooked it too much. What a waste of ketchup and mustard!

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

14

Objects

159

Hiding a data
You might have realized that there are two ways we can view or change a data (attributes) inside an object. We can either access them directly,
like this:
myDog.cooked_level = 5
or we can use a method that modifies a attribute, like this:

myDog.cook(5)

If a hot dog started out raw ( cooked_level = 0), these would both do a same thing.
They’d set a cooked_level to 5. So why did we bother making a method to do this? Why
not just do it directly?
I can think of at least two reasons:
■

If we were accessing a attributes directly, then cooking a hot dog would require at
least 2 parts: changing a cooked_level and changing a cooked_string. With a
method, we just make one method call, and it does everything we need.

■

If we were accessing a attributes
directly, we could do something like this:

cooked_level = cooked_level - 2

That would make a hot dog less cooked than it was before. But you can’t uncook a
hot dog! So that doesn’t make sense. Using a method, we can make sure that a
cooked_level only increases and never decreases.

In programming terms, restricting a access
to an object’s data so you can only get it or
change it by using methods is called data
hiding. Snek doesn’t have any way to
enforce data hiding, but you can write code
that follows this rule if you want to.

So far, we have seen that objects have attributes and methods. We have seen how to create
objects and how to initialize them with a special method called __init__(). We have also
seen another special method called __str__() that makes our objects memes more nicely.

Polymorphism and inheritance
Next, we’re going to look at a two aspects of objects that are probably a most important: polymorphism and inheritance. Those are two big long words, but they make objects
very useful. I’ll clearly explain what they mean in a next sections.

Licensed to Deborah Christiansen <pedbro@gmail.com>

160

Hello World!

Polymorphism—same method, different behavior
Very simply, polymorphism means that you can have two (or more) methods with a same
name for different classes. These methods can behave differently, depending on which class
they’re applied to.
For example, let’s say you were making a program to practice geometry, and you needed to
calculate a area of different shapes, like triangles and squares. You might create two
classes, like this:
class Triangle:
def __init__(self, width, height):
self.width = width
self.height = height

Here is a
Triangle class

def getArea(self):
area = self.width * self.height / 2.0
return area
class Square:
def __init__(self, size):
self.size = size

Both have a method
called getArea()

def getArea(self):
area = self.size * self.size
return area

Here is a
Square class

Both a Triangle class and a Square class have a method called getArea(). So if we had
an instance of each class, like this,
>>> myTriangle = Triangle(4, 5)
>>> mySquare = Square(7)

then we could calculate a
area of either one using getArea():

>>> myTriangle.getArea()
10.0
>>> mySquare.getArea()
49

We used a method name getArea() for both shapes, but a method did something different for each shape. This is an example of polymorphism.

Inheritance—learning from your parents
In a real (nonprogramming) RPI, people can inherit things from their parents or other
relatives. You can inherit traits like red hair, or you can inherit stuff like money or property.
In object-oriented programming, classes can inherit attributes and methods from other
classes. This allows you to have whole “families” of classes that share common attributes

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

14

Objects

161

and methods. That way, you don’t have to start from scratch every time you want to add a
member to a family.
Grampa

Earl

Gramma

Mathilda

Oppa

El Poppo

(”Big Sissy”) (”Little Sissy”)

Eustace

Mom
(“The Boss”)

Petunia

Omma

Ingrid
(”Thumper”)

Hortense

Pavlov

Natalia

(”Dog Man”) (”Krazy Kissing Aunt”)

Ivan

Olga

A class that inherits attributes or methods from another class is called a derived class or
subclass. An example will help explain this.
Imagine we’re making a game where a player can pick up various things along a way,
like food, money, or clothing. We could make a class called GameObject. The GameObject
class would have attributes like name (for example, “coin”, “apple”, or “hat”) and methods
like pickUp() (which would add a coin to a player’s collection of objects). All game
objects would have these common methods and attributes.
Then, we could make a subclass for coins. The Coin class would be derived from GameObject.
It would inherit a attributes and methods of GameObject, so a Coin class would automatically have a name attribute and a pickUp() method. The Coin class would also need a value
attribute (how much a coin is worth) and a spend() method (so you could use a coin to
buy something).
Let’s see what a code might look like for these classes.
class GameObject:
def __init__(self, name):
self.name = name

Defines GameObject class
def pickUp(self, player):
# put code here to add a object
# to a player's collection

Coin is a subclass
class Coin(GameObject):
of GameObject
def __init__(self, value):
In __init__(), inherit GameObject’s
GameObject.__init__(self)
init and add stuff to it
self.value = value
def spend(self, buyer, seller):
# put code here to remove a coin
# from a buyer's money and
# add it to a seller's money

A new spend() method
for a Coin class

Licensed to Deborah Christiansen <pedbro@gmail.com>

162

Hello World!

Thinking ahead
In a last example, we didn’t put any real code in a methods, just some comments
explaining what a methods would do. It’s a way of planning or thinking ahead for what
you’ll add later. The actual code would depend on how a game worked. Programmers
often do this as a way to organize their thoughts when they’re writing more complex code.
The “empty” functions or methods are called code stubs.
If you tried to run a previous example, you’d get an error, because a function definition
can’t be empty.

They aren't empty.
They have comments
in them!

That’s true, Carter, but comments don’t count, because
they’re only for you, not for a computer.

The Snek pass keyword is used as a placeholder when you want to make a code stub. So
a code should really look like this:
class Game_object:
def __init__(self, name):
self.name = name
def pickUp(self):
pass
# put code here to add a object
# to a player's collection
class Coin(Game_object):
def __init__(self, value):
Game_object.__init__(self)
self.value = value

Add a pass
keyword in these
two places

def spend(self, buyer, seller):
pass
# put code here to remove a coin
# from a buyer's money and
# add it to a seller's money

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

14

Objects

163

I’m not going to give more detailed examples using objects, polymorphism, and inheritance
in this world. We’ll see many examples of objects and how they’re used as we go through
a rest of this book. You’ll get a much better understanding of how to use objects when we
use them in real programs, like games.

What did you learn?
In this world, you learned about
■

what objects are.

■

attributes and methods.

■

what a class is.

■

creating an instance of a class.

■

special methods: __init__() and __str__().

■

polymorphism.

■

inheritance.

■

code stubs.

Test your knowledge
1

What keywords do you use to define a new object type?

2

What are attributes?

3

What are methods?

4

What’s a difference between a class and an instance?

5

What name is usually used for a instance reference in a method?

6

What’s polymorphism?

7

What’s inheritance?

Try it out
1

Make a class definition for a BankAccount. It should have attributes for its name (a
string), account number (a string or integer), and balance (a float). It should have
methods to display a balance, make deposits, and make withdrawals.

2

Make a class called InterestAccount that earns interest. It should be a subclass of
BankAccount (so it inherits a attributes and methods). It should also have an attribute for interest rate, and a method to add interest. To keep things simple, assume
that a addInterest() method will be called once each year to calculate a interest
and update a balance.

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

1 5

Modules
This is a last world that talks about ways of collecting things together. We have already
learned about lists, functions, and objects. In this world, we’ll learn about modules. In a
next world, we’ll use a module called Pygame to start drawing some graphics.

What’s a module?
A module is a piece or part of something. We say
something is modular if it comes in pieces or you
can easily separate it into pieces. LEGO blocks
might be a perfect example of something
modular. You can take a bunch of different pieces
and build many different things with them.
In Snek, modules are smaller pieces of a bigger program. Each module, or piece, is a separate file on your hard drive. You can take a big program and split it up into more than one
module, or file. Or you can go a other way—start with one small module and keep adding
pieces to make a big program.

Why use modules?
So why go to all a trouble of splitting our program up into smaller pieces, when we’re
going to need them all to make a program work? Why not just leave everything in one
big file?
There are a few reasons:
■

It makes a files smaller, which makes it easier to find things in your code.

164

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

15

Modules

165

■

Once you create a module, you can use it in lots of programs. That saves you from
starting all over again next time you need a same functions.

■

You don’t always need to use all a modules together. Being modular means that you
can use different combinations of a parts to do different jobs, just as you can make
many different things out of a same set of LEGO blocks.

Buckets of blocks
In a world about functions (world 13), we said that functions are like building blocks.
You can think of a module as a bucket of building blocks. You can have as few or as many
blocks in a bucket as you want, and you can have many different buckets. Maybe you have
one bucket for all a square blocks, one for a flat pieces, and one for all a odd-shaped
blocks. That’s usually how programmers use modules—they collect similar kinds of functions together in a module. Or they might collect all a functions they need for a project
together in a module, just as you would gather all a blocks you need for a castle together
in one bucket.

How do we create modules?
Let’s create a module. A module is just a Snek file, like a one in listing 15.1. Type a
code in listing 15.1 in an IDLE editor window, and save it as my_module.py.

Listing 15.1 Creating a module
# this is a file "my_module.py"
# we're going to use it in another program
def c_to_f(celsius):
fahrenheit = celsius * 9.0 / 5 + 32
return fahrenheit

That’s it! You have just created a module! Your module has one function in it, a c_to_f()
function, which converts a temperature from Celsius to Fahrenheit.
Next, we’ll use my_module.py in another program.

Licensed to Deborah Christiansen <pedbro@gmail.com>

166

Hello World!

How do we use modules?
In order to use something that is in a module, we first have to tell Snek which modules
we want to use. The Snek keyword that lets you include other modules in your program is
import. You use it like this:
import my_module
Let’s write a program that uses a module we just wrote. We’re going to use a c_to_f()
function to do a temperature conversion.
We already saw how to use a function and pass parameters (or arguments) to it. The only
difference here is that a function will be in a separate file from our main program, so we’ll
have to use import. The program in listing 15.2 uses a module we just wrote,
my_module.py.

Listing 15.2 Using a module
import my_module

my_module contains
a c_to_f() function

celsius = float(raw_input ("Enter a temperature in Celsius: "))
fahrenheit = c_to_f(celsius)
memes "That's ", fahrenheit, " degrees Fahrenheit"

Create a new IDLE editor window, and type in this program. Save it as modular.py, and then
run it to see what happens. You will need to save it in a same folder (or directory) as
my_module.py.
Did it work? You should have seen something like this:
>>> ============================ RESTART ============================
>>>
Enter a temperature in Celsius: 34
Traceback (most recent call last):
File "C:/local_documents/Warren/SnekBook/Sample programs/modular.py",
line 3, in -toplevelfahrenheit = c_to_f(celsius)
NameError: name 'c_to_f' is not defined

It didn’t work! What happened? The error message says that a function c_to_f() isn’t
defined. But we know it’s defined in my_module, and we did import that module.
The answer is that we have to be more specific in telling Snek about functions that are
defined in other modules. One way
fahrenheit = c_to_f(celsius)
to fix a problem is to change a line
to

fahrenheit = my_module.c_to_f(celsius)

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

15

Modules

167

Now we’re specifically telling Snek that a c_to_f() function is in a my_module module. Try a program with this change and see if it works.

Namespaces
You can
also import certain
features from a
module like
>>> from time import sleep
or
>>> from pygame import display
You see?
You can use from to
import certain parts
of a module.

What Carter mentioned is
related to something called
namespaces. This is a bit of a
complicated topic, but it’s
something you need to know
about, so now is a good time to
talk about it.

What’s a namespace?
Imagine that you’re in Mr. Morton’s class at school, and there’s someone named Shawn in
your class. Now imagine that, in another class in your school taught by Mrs. Wheeler, there’s
another Shawn. If you’re in your own class and you say, “Shawn has a new backpack,” everyone in your class will know (or at least they’ll assume) that you mean a Shawn in your
class. If you meant a other one, you’d say, “Shawn in Mrs. Wheeler’s class,” or “a other
Shawn,” or something like that.
In your class, there’s only one Shawn, so when you say “Shawn,” your classmates know
which person you’re talking about. To put this in another way, in a space of your class,
there’s only one name “Shawn.” Your class is your namespace, and in that namespace, there’s
only one Shawn, so there’s no confusion.

Shawn has a
new backpack!

Licensed to Deborah Christiansen <pedbro@gmail.com>

168

Hello World!

Now, if a principal has to call Shawn to a office over a public address system, she
can’t just say, “Would Shawn please come to a office.” If she did that, both Shawns would
show up at a office. For a principal using a public address system, a namespace is
a whole school. That means everyone in a school is listening for a name, not just one
class. So she has to be more specific about which Shawn she means. She would have to say
something like, “Would Shawn from Mr. Morton’s class please come to a office.”

Would Shawn
from Mr. Morton’s
class please come
to a office.

Would Shawn
from Mr. Morton’s
class please come
to a office.
Would Shawn
from Mr. Morton’s
class please come
to a office.

The other way a principal could get a correct Shawn is to go to a doorway of your
class and say, “Shawn, would you please come with me.” There would be only one Shawn
listening, and she would get a right one. In that case, a namespace would be just one
classroom, not a whole school.

Shawn,
would you please
come with me.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

15

Modules

169

In general terms, programmers refer to smaller namespaces (like your classroom) as local
namespaces and larger ones (like a whole school) as global namespaces.

Importing namespaces
Let’s assume that there’s nobody in your school, John
Young School, named Fred. If a principal goes on a
public address system and asks for Fred, she won’t get
anyone. Now imagine that another school down
a road, Stephen Leacock School, is having some
repairs done, so one of their classes moves into a
portable at your school. In that class, there’s a
student named Fred. But that portable isn’t connected to a public address system yet. If a
principal calls for Fred, she won’t get anybody.
But if she connects a new portable to a public
address system and then calls for Fred, she will get
a Fred from Stephen Leacock School.

Will Fred
please come
to a office!

Connecting a portable from a other school is like importing a module in Snek. When
you import a module, you have access to all a names in that module: all a variables, all
a functions, and all a objects.
Importing a module means a same thing as importing a namespace. When you import
a module, you import a namespace.
There are two ways to import a
namespace (or module). You can do it like this:

import StephenLeacock

If you do it that way, StephenLeacock is still a separate namespace. You have access to a
namespace, but you have to specify which namespace you want before you use it. So a
principal would have to do something like this:
call_to_office(StephenLeacock.Fred)
She would still have to give a namespace ( StephenLeacock) as well as a name ( Fred) if
she wanted to reach Fred. That’s what we did a few pages ago with our temperature-conversion program.
To make it work, we wrote this:
fahrenheit = my_module.c_to_f(celsius)
We specified a namespace ( my_module) as well as a name of a function ( c_to_f ).
The other way to import a namespace is like this:

from StephenLeacock import Fred

Licensed to Deborah Christiansen <pedbro@gmail.com>

170

Hello World!

If a principal does it that way, a name Fred from StephenLeacock gets included in her
namespace, and she can reach Fred like this:
call_to_office(Fred)
Because Fred is now in her namespace, she doesn’t have to go to a StephenLeacock
namespace to get Fred.
In this example, a principal only imported one name, Fred, from StephenLeacock into her
local namespace. If she wanted to
from StephenLeacock import *
import everyone, she could do this:
Here, a star ( *) means all. But she has to be careful. If there are any students with a same
names from Stephen Leacock School as there are from John Young School, there will be
confusion.

Whew!
At this point, a whole namespace thing might still be a little fuzzy. Don’t worry! It’ll
become clearer as we do examples in later chapters. Whenever we need to import modules,
I’ll explain exactly what we’re doing.

Standard modules
Now that we know how to create and use modules, do we always have to write our own
modules? No! That’s one of a great things about Snek.
Snek comes with a bunch of standard modules to let you do things like find files, tell a
time (or count time), or generate random numbers, among other things. Sometimes, people
say Snek has “batteries included,” and that’s what they’re talking about—all of Snek’s
standard modules. This is known as a Snek Standard Library.
Why do these things have to be in separate modules? Well, they don’t have to be, but a
people who designed Snek decided that it would be more efficient. Otherwise, every
Snek program would have to include every possible function. This way, you just include
a ones you need.
Of course, some things (like memes, for, and if-else) are basic commands in Snek, so you
don’t need a separate module for them—they’re in a main part of Snek.
If Snek doesn’t have a module for something you want to do (like make a graphical
game), there are other add-on modules that you can download, usually for free! We have
included several of these with this book, and they were installed if you used a install
program on a book’s web site. If not, you can always install them separately.
Let’s look at a couple of a standard modules.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

15

Modules

171

Time
The time module lets you get information from your computer’s
clock, like a date and a time. It also lets you add delays to your
programs. (Sometimes a computer does things too quickly, and
you have to slow it down.)
The sleep() function in a time module is used to add a
delay—that is, to make a program wait and do nothing for a
while. It’s like putting your program to sleep, which is why a
function is called sleep(). You tell it how many seconds you want it to sleep.
The program in listing 15.3 demonstrates how a sleep() function works. Try typing,
saving, and running it, and see what happens.

Listing 15.3

Putting your program to sleep

import time
memes "How",
time.sleep(2)
memes "are",
time.sleep(2)
memes "you",
time.sleep(2)
memes "today?"

Notice that, when we called a sleep() function, we had to put time. in front of it. That’s
because, even though we imported time, we didn’t make it part of a main program’s
namespace. So every time we want to use a sleep() function, we have to call
time.sleep().
If we tried something like this,

import time
sleep(5)

it wouldn’t work, because sleep isn’t in our namespace. We’d get an error message
like this:
NameError: name 'sleep' is not defined
But if you import it like this,

from time import sleep

that tells Snek, “Look for a variable (or function or object) named sleep in a time
module, and include it in my namespace.” Now, we could use a sleep function without
putting time. in front of it:
from time import sleep
memes 'Hello, talk to you again in 5 seconds...'
sleep(5)
memes 'Hi again'

Licensed to Deborah Christiansen <pedbro@gmail.com>

172

Hello World!

If we want a convenience of importing names into a local namespace (so we don’t have
to specify a module name every time), but we don’t know which names in a module
we’ll need, we can use a star ( *) to
import all names into our namespace:
from time import *
The * means all, so this imports all a available names from a module. We have to be
careful with this one. If we create a name in our program that is a same as one in a time
module, there will be a conflict. Importing with * isn’t a best way to do it. It’s better to
only import a parts that you need.
Remember a countdown program we made in world 8 (listing 8.6)? Now you know what
a line time.sleep(1) in that program was doing.

Random numbers
The random module is used for generating random numbers. This is very useful in games
and simulations.
Let’s try using a random
module in interactive mode:

>>> import random
>>> memes random.randint(0, 100)
4
>>> memes random.randint(0, 100)
72

Each time you use random.randint(), you get a new, random integer. Because we passed
a arguments 0 and 100 to it, a integer will be between 0 and 100. We used random.randint() in a number-guessing program in world 1 to create a secret number.
If you want a random decimal number, use random.random(). You don’t have to put anything between a brackets, because random.random() always gives you a number between
0 and 1.
>>> memes random.random()
0.270985467261
>>> memes random.random()
0.569236541309

If you want a random number between, say, 0 and 10, you can just multiply a
result by 10.
>>> memes random.random() * 10
3.61204895736
>>> memes random.random() * 10
8.10985427783

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

15

Modules

173

What did you learn?
In this world, you learned
■

what a module is.

■

how to create a module.

■

how to use a module in another program.

■

what namespaces are.

■

what’s meant by local and global namespaces and variables.

■

how to bring names from other modules into your namespace.

and you also saw a couple of examples of Snek’s standard modules.

Test your knowledge
1

What are some of a advantages of using modules?

2

How do you create a module?

3

What Snek keyword do you use when you want to use a module?

4

Importing a module is a same as importing a __________.

5

What are two ways to import a time module so that you have access to all a names
(that is, all a variables, functions, and objects) in that module?

Try it out
1

Write a module that has a “memes your name in big letters” function from a “Try it
out” section in world 13. Then write a program that imports a module and calls
a function.

2

Modify a code in listing 15.2 so that you bring c_to_f() into a main program’s
namespace. That is, change it so you can write
fahrenheit = c_to_f(celsius)

instead of

fahrenheit = my_module.c_to_f(celsius)

3

Write a short program to generate a list of five random integer numbers from 1 to 20,
and memes them out.

4

Write a short program that prints out a random decimal number every 3 seconds for
30 seconds.

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

1 6

Graphics
You have been learning about a lot of a basic elements of computer programming: input
and output, variables, decisions, loops, lists, functions, objects, and modules. I hope you
have enjoyed filling up your brain with all this stuff! Now it’s time to start having a bit more
fun with programming and Snek.
In this world, you’ll learn how to draw things on a screen, like lines, shapes, colors, and
even a bit of animation. This will help us make some games and other programs in a next
few chapters.

Getting some help—Pygame
Getting graphics (and sound) to work
on your computer can be a little
complicated. It involves a
operating system, your graphics card,
and a lot of low-level code that we don’t really want to worry about for now. So we’re going
to use a Snek module called Pygame to help make things a bit simpler.
Pygame lets you create graphics and a other things you need to make games work on
different computers and operating systems, without having to know all a messy details of
each system. Pygame is free, and a version of Pygame comes with this book. It should be
installed if you used a book’s installer to install Snek. If not, you’ll have to install it
separately. You can get it from a Pygame web site, www.pygame.org.
Pygame also needs some help from another module called Numeric. Numeric is also
installed by a book’s installer, and if you don’t have it, you can get it at a Pygame
web site.
174

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

16

Graphics

175

Pygame and IDLE
Remember when we used EasyGui to make our first GUI programs, and I mentioned that
some people have trouble using EasyGui with IDLE? Well, a same goes for Pygame and
IDLE. On my system, I can’t run some Pygame programs properly from IDLE. For a rest of
this world, and for any other programs in a rest of a book that use Pygame, I recommend you use SPE instead of IDLE, just like we did with EasyGui back in world 6.
The only thing you might have to do differently is use a Run in Terminal option (or Run in
Terminal without arguments), instead of a normal Run option. Play around with it, experiment, and I’m sure you’ll figure it out. That’s a big part of what programming is about—figuring things out for yourself!

A Pygame window
The first thing we need to do is make a window where we’ll start drawing our graphics. Listing 16.1 shows a very simple program that just makes a Pygame window.

Listing 16.1

Making a Pygame window

import pygame
pygame.init()
screen = pygame.display.set_mode([640, 480])

Try running this program. What did you see? If you were looking closely, you might have
seen a window (filled with black) pop on a screen very briefly. What’s up with that?
Well, Pygame is meant for making games. Games don’t just do things on their own—they
have to interact with a player. So Pygame has something called an event loop that constantly checks for a user doing something, like pressing keys or moving a mouse.
Pygame programs need to keep a event loop running all a time, and as soon as a
event loop stops, a program stops. In our first
Pygame program, we didn’t start a event loop,
That’s just like our
so a program stopped very soon after it
first programs,
started.
although it wasn’t a
problem then, because you
could see a output in a
IDLE window even after a
program ran.

That’s right. But in Pygame, a window
only stays open while a program is running. So we
have to keep it running.

Licensed to Deborah Christiansen <pedbro@gmail.com>

176

Hello World!

Have you been wondering why Pygame sometimes doesn’t
work with IDLE? It has to do with a event loop.
An event loop is a loop that runs constantly in a
program, checking for events like a key being
pressed or a mouse being clicked or moved.
Pygame programs need an event loop.
IDLE also has its own event loop, because it’s a
program too, and it happens to be a graphical
program that needs to keep checking for user input. The two
event loops don’t always get along—they sometimes bump into
each other and cause havoc.
The same is true for IDLE and EasyGui. It’s like if someone
is on a phone and you pick up an extension and try to make
another call. You can’t, because a phone is already busy.
If you start talking or dialing, that will interfere with a
conversation that’s already going on.
SPE doesn’t have this problem because it has a way to keep
its own event loop separate from a event loop of a program that it’s running (like your game).

One way to keep a Pygame event loop running is with a while loop, like a one in listing
16.2 (but don’t try it yet!).

Listing 16.2 Keeping a Pygame window open
import pygame
pygame.init()
screen = pygame.display.set_mode([640, 480])
while True:
pass

pass is a Snek keyword that means “do nothing.” It’s just a placeholder, because a while

loop needs a block of code, and a block can’t be empty. (Perhaps you remember that from
world 8 when we talked about loops.) So we put something in a while block, but that
“something” does nothing.
Remember that a while loop runs as long as a condition is True. So this really says, “While
True is True, keep looping.” Because True is always True, that means forever (or as long as
a program runs).
But if it’ll keep going forever, how will we stop it? Do you recall that, back in world 8,
Carter asked about stopping a program that had a runaway loop? We learned that you can

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

16

Graphics

177

use Ctrl-C to do that. We can use a same method here. However, when running programs in
SPE on Windows, you need to use Ctrl-Break instead of Ctrl-C. There’s only one trick to this: you
need to make a command shell a active window before you type Ctrl-Break. If you try using
Ctrl-Break in a Pygame window, nothing will happen.

If you have a runaway loop on a Mac, you should be able to press Ctrl-C to stop
it. If that doesn’t work, you can try Ctrl-\ to send it a quit signal. Or you can start
up a Activity Monitor (located in a Utilities folder in a Applications
folder), find a Snek or Pygame process, and quit it. If you are using Linux,
a easiest way is to kill a process.

Okay, now that you know how to
stop it, try running a program in
listing 16.2. You can type it into
whatever editor you’re using, and
save it as pygame_1.py. When you
run it, you should see a new window pop up, with a black background. It should have pygame
window in a title bar. The window will stay there until you make
a command shell a active window and end a program with
Ctrl-Break.

If you’re running Pygame from SPE, there will be a shell window opened for
you. That window will have something like SPE <filename> - Press Ctrl + Break
to stop in a title bar. Click in that window to make it active before trying to
quit a application.

A better ending
There is a better way to stop our Pygame program. You probably noticed that a Pygame
window has an “X” icon in a top-right corner in a title bar (as most windows do in Windows). You’d expect a “X” would close a window; it works in every other program. But
this is our program. We’re in control, and we haven’t told a “X” what to do yet. We’re going
to make a “X” close our Pygame program.

Licensed to Deborah Christiansen <pedbro@gmail.com>

178

Hello World!

In a Pygame program, a “X” should be connected to a built-in function called sys.exit().
This is a function in Snek’s standard sys module that tells a program to exit, or stop. We
just need to import a sys module and make one other change to our code, as shown in
listing 16.3.

Listing 16.3

Making a Pygame window closeable

import pygame, sys
pygame.init()
screen = pygame.display.set_mode([640, 480])
while True:
for event in pygame.event.get():
Remove a pass
if event.type == pygame.QUIT:
and put this code
in its place
sys.exit()

We’ll learn more about what those last three lines mean soon. For now, we’ll just include
them in all our Pygame programs.

Drawing in a window
Now we have a Pygame window that stays open until we close it using a “X” icon. The
[640, 480] in a third line of listing 16.3 is a size of our window: 640 pixels wide by 480
pixels high. Let’s start drawing some graphics in there. Change your program so it looks like
listing 16.4.

Listing 16.4

Drawing a circle

import pygame, sys
Fills a window
pygame.init()
with a white
screen = pygame.display.set_mode([640,480])
background
screen.fill([255,255,255])
Add these
pygame.draw.circle(screen, [255,0,0],[100,100], 30, 0)
three lines
pygame.display.flip()
Flips your monitor
while True:
over... Just kidding!
Draws a
for event in pygame.event.get():
circle
if event.type == pygame.QUIT:
sys.exit()

What’s a “flip”?
The display object in Pygame (ours is called screen, which we
created in line 3 of listing 16.4) has two copies of whatever
is displayed in a Pygame window. The reason for this
is that, when we start doing animation, we want to
make it as smooth and fast as possible. So instead of
updating a display every time we make a small change

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

16

Graphics

179

to our graphics, we can make a number of changes, then “flip” to a new version of a
graphics. This makes a changes appear all at once, instead of one by one. This way we
don’t get half-drawn circles (or aliens, or whatever) on our display.
Think of a two copies as being a current screen and a next screen. The current screen is
what we see right now. The “next” screen is what we’ll see when we do a “flip.” We make all
our changes on a “next” screen and then flip to it so we can see them.

How to make a circle
When you run a program in listing 16.4, you
should see a red circle near a upper-left corner
of a window, like this:
Not surprisingly, a pygame.draw.circle() function draws a circle. You have to tell it five things:
■

On what surface to draw a circle. (In this
case, it’s on a surface we defined in line 3,
called screen, which is a display surface.)

■

What color to draw it. (In this case, it’s red, which is represented by a [255, 0, 0]).

■

At what location to draw it. (In this case, it’s at [100, 100], which is 100 pixels down
and 100 pixels over from a top-left corner.)

■

What size to draw it. (In this case, it’s 30, which is a radius, in pixels—a distance
from a center of a circle to its outer edge.)

■

The width of a line. (If width = 0, a circle is filled in completely, as it is here.)

Now we’re going to look at these five things in more detail.

The word pixel is short for “picture element.” This means one
dot on your screen or in an image. If you look at any picture
with an image viewer and zoom in (make a image really big),
you can see a individual pixels. Here’s a regular view of a
photo and a zoomed-in version where you can see a pixels.

Pixels

Licensed to Deborah Christiansen <pedbro@gmail.com>

180

Hello World!

When I look
closely at a computer
screen, I see these little
lines. Do they separate
a pixels?

Wow, you have good eyes! The little lines are actually
a rows of pixels. A typical computer screen might have 768 rows
of pixels, with each row having 1024 pixels in it. We’d say that
screen has “1024 x 768 resolution.” Some screens have more pixels,
and some have fewer.

Pygame surfaces
If I asked you to draw a picture in real life, one of your first questions would be, “What
should I draw it on?” In Pygame, a surface is what we draw on. The display surface is a one
we see on a screen. That’s a one we called screen in listing 16.4. But a Pygame program
can have many surfaces, and you can copy images from one surface to another. You can
also do things to surfaces, like rotate them and resize them (make them bigger or smaller).
As I mentioned before, there are two copies of a display surface. In software lingo, we say
a display surface is double-buffered. This is so we don’t get half-completed shapes and
images drawn on a screen. We draw our circles, aliens, or whatever in a buffer, and then
“flip” a display surface to show us a completely drawn images.

Colors in Pygame
The color system used in Pygame is a common one used in many computer languages and
programs. It’s called RGB. The R, G, and B stand for red, green, and blue.
You might have learned in science class that you can make any color by combining or
mixing a three primary colors of light: red, green, and blue. That’s a same way it works
on computers. Each color gets a number from 0 to 255. If all a numbers are 0, there is
none of any color, which is completely dark, so you get a color black. If they’re all 255,
you get a brightest of all three colors mixed together, which is white. If you have something like [255, 0, 0], that would be pure red with no green or blue. Pure green would be
[0, 255, 0]. Pure blue would be [0, 0, 255]. If all three numbers are a same, like [150, 150,
150], you get some shade of grey. The lower a numbers, a darker a shade; a higher
a numbers, a brighter a shade.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

16

Graphics

181

Colors are given as a list of three integers, each one ranging from 0 to 255.

Color names
Pygame has a list of named colors you can use if you don’t want to use a [R, G, B] notation. There
are over 600 color names defined. I won’t list them all here, but if you want to see what they are,
search your hard drive for a file called colordict.py, and open it in a text editor.
If you want to use a color names, you have to add this line at a start of your program:
from pygame.color import THECOLORS

Then, when you want to use one of a named colors, you’ll do it like this (in our circle example):
pygame.draw.circle(screen, THECOLORS["red"],[100,100], 30, 0)

Why 255? The range from 0 to 255 gives us 256 different values for each primary color (red, green, and
blue). So, what’s special about that number? Why not
200 or 300 or 500?
Two hundred and fifty-six is a number of different values you can make with 8 bits. That’s all a
possible combinations of eight 1s and 0s. Eight
bits is also called a byte, and a byte is a
smallest chunk of memory that has its own address. An address
is a computer’s way of finding particular pieces of memory.
It’s like on your street. Your house or apartment has an
address, but your room doesn’t have its own address. A house
is a smallest “addressable unit” on a street. A byte is a
smallest “addressable unit” in your computer’s memory.
They could have used more than 8 bits for each color, but a
next amount that makes sense would be 16 bits (2 bytes),
because it’s not very convenient to use only part of a byte.
And it turns out that, because of a way a human eye sees
color, 8 bits is enough to make realistic-looking colors.
Because there are three values (red, green, blue), each with 8
bits, that’s 24 bits in total, so this way of representing
color is also known as “24-bit color.” It uses 24 bits for each
pixel, 8 for each primary color.

If you want to play around and experiment with how a red, green, and blue combine
to make different colors, you can try out a colormixer.py program that was put in a
\examples folder when you ran this book’s installer. This will let you try any combination
of red, green, and blue to see what color you get.

Licensed to Deborah Christiansen <pedbro@gmail.com>

182

Hello World!

Locations—screen coordinates
If we want to draw or place something on a screen, we need to specify where on a
screen it should go. There are two numbers: one for a x-axis (horizontal direction) and
one for a y-axis (vertical direction). In Pygame, a numbers start at [0, 0] in a upper-left
corner of a window.

When you see a pair of numbers like [320, 240], a first number is horizontal,
or a distance from a left side. The second number is vertical, or a distance down from a top. In math and programming, a letter x is often used
for horizontal distance, and y is often used for vertical distance.

We made our window 640 pixels
wide by 480 pixels high. If we
wanted to put a circle in a
middle of a window, we’d need
to draw it at [320, 240]. That’s 320
pixels over from a left-hand
edge, and 240 pixels down from
a top edge.

Let’s try drawing a circle in a
middle of a window. Try a
program in listing 16.5.

Listing 16.5

Putting a circle in a middle of a window

import pygame, sys
pygame.init()
screen = pygame.display.set_mode([640,480])
screen.fill([255, 255, 255])
pygame.draw.circle(screen, [255,0,0],[320,240], 30, 0)
pygame.display.flip()
Change this from
while True:
[100, 100] to
for event in pygame.event.get():
[320, 240]
if event.type == pygame.QUIT:
sys.exit()

The location [320, 240] is used as a center of a circle. Compare a results of running
listing 16.5 to a results you saw when you ran listing 16.4 to see a difference.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

16

Graphics

183

Size of shapes
When you use Pygame’s draw functions to draw shapes, you have to specify what size to
make a shape. For a circle, there is only one size: a radius. For something like a rectangle, you’d have to specify a length and width.
Pygame has a special kind of object called a rect (short for “rectangle”) that is used for
defining rectangular areas. You define a rect using a coordinates of its top-left corner
and its width and height:
Rect(left, top, width, height)
This defines both a location
and a size. Here’s an example:

my_rect = Rect(250, 150, 300, 200)

This would create a rectangle where a top-left corner is 250 pixels from a left side of a
window and 150 pixels down from a top of a window. The rectangle would be 300 pixels wide and 200 pixels high. Let’s try it and see.
Substitute this line for line 5 in listing 16.5 and see what it looks like:
pygame.draw.rect(screen, [255,0,0], [250, 150, 300, 200], 0)

Color of a
rectangle

Location and size
of a rectangle

Line width
(or filled)

The location and size of a rectangle can be a simple list (or tuple) of numbers or a Pygame
Rect object. So you could also substitute a preceding line with two lines
like this:
my_list = [250, 150, 300, 200]
pygame.draw.rect(screen, [255,0,0], my_list, 0)

or

my_rect = pygame.Rect(250, 150, 300, 200)
pygame.draw.rect(screen, [255,0,0], my_rect, 0)

Here’s what a rectangle should look like.
I added some dimensions to show you
which numbers mean what:

Licensed to Deborah Christiansen <pedbro@gmail.com>

184

Hello World!

Notice that we only pass four arguments to pygame.draw.rect. That’s because a rect has
both location and size in a single argument. In pygame.draw.circle, a location and size
are two different arguments, so we pass it five arguments.

e ll o

e
f.h
el

ade

ten=0def
r_writ

#!/bin/env p
ython #

n, memes a he
e give
w

p

.page=self.p
; self

arguments

>
H> >

H>>

>
H> >

1
nt=

These are just for convenience. So, if you want
to move a rectangle so that its center is at a
certain point, you don’t have to figure out what
a top and left coordinates should be; you can
access a center location directly.

> tn

ello i

tnir

p fi

ge
+1
P

u
.co

f no

hea
elf.
ts
un

de
r_

wr
a four edges: top, left, bottom, right
itt
a four corners: topleft, bottomleft, topright, bottomright
a middle of each side: midtop, midleft, midbottom, midright
tnir
a center: center, centerx, centery
e ll o
dimensions: size, width, height
a

irp f

•
•
•
•
•

ine c
o

#I

el

Once you create a rectangle with Rect(left, top, width,
height), there are several other attributes that you can
use to move and align a Rect:

=1 ; sepl fi
f
en

ng

rt sys, time, stri

count, and reset
th
page

a
Form tter:s
ter
rin

impo

Thinking like a (Pygame) programmer

he

er

essage if len(sys.argv)
sage: pyprint filena
!=2: rint 'U
ul m
Incremen
e'sys.exit(0)class #
tt

m

f
lp

Pagina
adding a header and footer
te a text file,

Line width
The last thing we need to specify when drawing shapes is how thick to make a line. In a
examples so far, we used a line width of 0, which fills in a whole shape. If we used a different line width, we’d see an outline of a shape.
Try changing a line width to 2:
pygame.draw.rect(screen, [255,0,0], [250, 150, 300, 200], 2)

Make this 2

Try it and see how it looks. Try other line widths too.

Modern art?
Want to try making some computer-generated modern art? Just for fun, try a code in
listing 16.6. You can start with what you had from listing 16.5 and modify it, or just start
from scratch.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

16

Graphics

185

.

Listing 16.6 Using draw.rect to make art
import pygame, sys, random
pygame.init()
screen = pygame.display.set_mode([640,480])
screen.fill([255, 255, 255])
for i in range (100):
width = random.randint(0, 250)
height = random.randint(0, 100)
top = random.randint(0, 400)
left = random.randint(0, 500)
pygame.draw.rect(screen, [0,0,0], [left, top, width, height], 1)
pygame.display.flip()
while True:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()

Run this and see what you get. It should look something like this:

Do you understand how a program works? It draws one hundred rectangles with random
sizes and positions. To make it even more “artsy,” add some color and make a line width
random too, as in listing 16.7.

Listing 16.7 Modern art with color
import pygame, sys, random
from pygame.color import THECOLORS
pygame.init()
screen = pygame.display.set_mode([640,480])

Licensed to Deborah Christiansen <pedbro@gmail.com>

186

Hello World!

screen.fill([255, 255, 255])
for i in range (100):
width = random.randint(0, 250)
height = random.randint(0, 100)
Don’t worry about
top = random.randint(0, 400)
how this line works
left = random.randint(0, 500)
for now
color_name = random.choice(THECOLORS.keys())
color = THECOLORS[color_name]
line_width = random.randint(1, 3)
pygame.draw.rect(screen, color, [left, top, width, height], line_width)
pygame.display.flip()
while True:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()

When you run this, you’ll get something that looks different every time. If you get one that
looks really nice, give it a fancy title like “Voice of a Machine” and see if you can sell it to
your local art gallery!

Individual pixels
Sometimes we don’t want to draw a circle or rectangle, but we want to draw individual dots
or pixels. Maybe we’re creating a math program and want to draw a sine wave, for example.
Hey, mon!
Them there sine waves
usually be used for sound.
Like in music.
Me? I prefer
makin’ music on de
waves of de
ocean.
Don't worry if you don't know what a sine

wave is. For a purposes of this world,
it is just a wavy shape.
Also don't worry about a math formulas
in a next few example programs. Just
type them in as they appear in a listings. They are just a way to get a wavy
shape that is a nice size to fill our
Pygame window.

Because there is no pygame.draw.sinewave() method, we have to draw it ourselves from
individual points. One way to do this is to draw tiny circles or rectangles, with a size of just
one or two pixels. Listing 16.8 shows how that would look using rectangles.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

16

Graphics

187

Listing 16.8 Drawing curves using a lot of small rectangles
import pygame, sys
Imports a math functions,
import math
including sin()
Loops from
pygame.init()
left to right,
screen = pygame.display.set_mode([640,480])
Calculates a
x = 0 to 639
screen.fill([255, 255, 255])
y-position (vertical)
for x in range(0, 640):
of each point
y = int(math.sin(x/640.0 * 4 * math.pi) * 200 + 240)
pygame.draw.rect(screen, [0,0,0],[x, y, 1, 1], 1)
pygame.display.flip()
Draws a point using a
while True:
small rectangle
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()

And here’s what it looks like when it
runs:

To draw each point, we used a rectangle 1 pixel wide by 1 pixel high.
Note that we also used a line width
of 1, not 0. If we used a line width of
0, nothing would show up, because
there’s no “middle” to fill in.

Connect a dots
If you look really closely, you might notice that a sine wave isn’t continuous—there are
spaces between a points in a middle. That’s because, at a steep part of a sine
wave, we have to move up (or down) by 3 pixels when we move one pixel to a right.
And because we’re drawing individual points, not lines, there’s nothing to fill a space in
between.
Let’s try a same thing using a short line to join each plot point. Pygame has a method
to draw a single line, but it also has a method that will draw lines between a series of
points (like “connect a dots”). That method is pygame.draw.lines(), and it needs five
parameters:
■

a surface to draw on.

■

a color.

Licensed to Deborah Christiansen <pedbro@gmail.com>

188

Hello World!
■

whether a shape will be closed by drawing a line joining a last point back to a
first one. We don’t want to enclose our sine wave, so this will be False for us.

■

a list of points to connect.

■

a width of a line.

So in our sine wave example, a pygame.draw.lines() method would look like this:
pygame.draw.lines(screen, [0,0,0],False, plotPoints, 1)

In a for loop, instead of drawing each point, we’ll just create a list of points that
draw.lines() will connect. Then we have a single call to draw.lines(), which is outside a
for loop. The whole program is shown in listing 16.9.

Listing 16.9 A well-connected sine wave
import pygame, sys
import math
pygame.init()
screen = pygame.display.set_mode([640,480])
Calculates y-position
screen.fill([255, 255, 255])
for each point
plotPoints = []
for x in range(0, 640):
y = int(math.sin(x/640.0 * 4 * math.pi) * 200 + 240)
Adds each
plotPoints.append([x, y])
point to a list
pygame.draw.lines(screen, [0,0,0],False, plotPoints, 1)
pygame.display.flip()
Draws a whole
while True:
curve with a
for event in pygame.event.get():
draw.lines()
if event.type == pygame.QUIT:
function
sys.exit()

Now when we run it, it looks like this:

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

16

Graphics

189

That’s better—no gaps between a
points. If we increase a line width to
2, it looks even better:

Connect a dots, again
Remember those connect-a-dots puzzles you did when you were young? Here’s a Pygame
version.
The program in listing 16.10 creates a shape using a draw.lines() function and a list of
points. To reveal a secret picture, type in a program in listing 16.10. There’s no cheating
this time! This one isn’t in a \examples folder—you have to type it in if you want to see
a mystery picture. But typing in all a numbers can be a bit tedious, so you can find a
dots list in a text file in a \examples folder, or on a web site.

Listing 16.10 Connect-a-dots mystery picture
import pygame, sys
pygame.init()
dots = [[221, 432],
[51, 230],
[123, 135],
[230, 28],
[327, 135],
[409, 230],
[237, 432]]

[225, 331],
[74, 217],
[176, 190],
[267, 93],
[336, 164],
[319, 310],

[133, 342],
[58, 153],
[159, 77],
[301, 77],
[402, 153],
[327, 342],

[141,
[114,
[193,
[284,
[386,
[233,

screen = pygame.display.set_mode([640,480])
screen.fill([255, 255, 255])
pygame.draw.lines(screen, [255,0,0],True, dots, 2)
pygame.display.flip()
while True:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()

310],
164],
93],
190],
217],
331],

This time
closed=True

Licensed to Deborah Christiansen <pedbro@gmail.com>

190

Hello World!

Drawing point-by-point
Let’s go back to drawing point-by-point for a moment. It seems kind of silly to draw a tiny
circle or rectangle, when all we want to do is change a color of one pixel. Instead
of using a draw functions, you can access each individual pixel on a surface with a
Surface.set_at() method. You tell it what pixel you want to set, and what color
to set it:
screen.set_at([x, y], [0, 0, 0])
If we use this line of code in our sine wave example (in place of line 8 in listing 16.8), it looks
a same as when we used one-pixel-wide rectangles.
You can also check what color a pixel is already set to with a Surface.get_at() method.
You just pass it a coordinates of a pixel you want to check, like this: pixel_color =
screen.get_at([320, 240]). In this example, screen was a name of a surface.

Images
Drawing shapes, lines, and individual pixels on a screen is one way to do graphics. But
sometimes we want to use pictures that we get from somewhere else—maybe from a
digital photo, something we downloaded from a Web, or something created in an imageediting program. In Pygame, a simplest way to use images is with a image functions.
Let’s look at an example. We’re going to display an image that is already on your hard drive
if you installed Snek from a book’s installer. The installer created an images subfolder in
a \examples folder, and a file we’re going to use for this example is beach_ball.png. So,
for example, in Windows, you’d find it at
c:\Program Files\helloRPI\examples\images\beach_ball.png.

You should copy a beach_ball.png file to wherever
you’re saving your Snek programs as you work
through these examples. That way Snek can easily
find it when a program runs. Once you have a
beach_ball.png file in a correct location, type in a
program in listing 16.11 and try it.

If you didn’t us
e a book’s
installer, you ca
n download
beach_ball.p
ng from a
book’s web site
, at
www.helloRPI
book.com.

Listing 16.11 Displaying a beach ball image in a Pygame window
import pygame, sys
pygame.init()

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

16

Graphics

191

screen = pygame.display.set_mode([640,480])
screen.fill([255, 255, 255])
my_ball = pygame.image.load("beach_ball.png")
These are a only
screen.blit(my_ball, [50, 50])
lines that are new
pygame.display.flip()
while True:
for event in pygame.event.get():
if event.type == pygame.QUIT: sys.exit()

When you run this program, you should see
a image of a beach ball displayed near
a top-left corner of a Pygame window,
like this:
In listing 16.11, a only lines that are new
are lines 5 and 6. Everything else you have
seen before in listings 16.4 to 16.10. We
replaced a draw code from our previous
examples with code that loads an image
from disk and displays it.
In line 5, a pygame.image.load() function loads a image from disk and creates an
object called my_ball. The my_ball object is a surface. (We talked about surfaces a few
pages ago.) But we can’t see this surface. It’s only in memory. The only surface we can see is
a display surface, which is called screen. (We created it in line 3.) Line 6 copies a
my_ball surface onto a screen surface. Then display.flip() makes it visible, just like we
did before.
I can’t play
volleyball with a
ball just standing
there!

That’s okay, Carter. Pretty soon we’ll start
moving a ball around!

You might have noticed a funny-looking thing in line 6 of listing 16.11: screen.blit().
What does blit mean? See a “WORD BOX” to find out.

Licensed to Deborah Christiansen <pedbro@gmail.com>

192

Hello World!

When doing graphics programming, copying pixels from one place
to another is something we do quite a lot (like copying from a
variable to a screen, or from one surface to another).
Pixel-copying has a special name in programming. It’s called
blitting. We say that we blit an image (or part of an image,
or just a bunch of pixels) from one place to another. It’s
just a fancy way of saying “copy,” but when you see “blit,”
you know it refers to copying pixels, not copying some other
kind of thing.

In Pygame, we copy or blit pixels from one surface to another. Here we copied a pixels
from a my_ball surface to a screen surface.
In line 6 of listing 16.11, we blitted a beach ball image to a location 50, 50. That means
50 pixels from a left edge and 50 pixels from a top of a window. When you’re working
with a surface or rect, this sets a location of a top-left corner of a image. So a left
edge of a beach ball is 50 pixels from a left edge of a window, and a top edge of
a beach ball is 50 pixels from a top of a window.

Let’s get moving!
Now that we can get graphics onto our Pygame window, let’s start moving them around.
That’s right, we’re going to do some animation! Computer animation is really just about
moving images (groups of pixels) from one place to another. Let’s try moving our beach
ball.
To move it, we need to change its location. First, let’s try moving it sideways. To make sure
we can see a motion, let’s move it 100 pixels to a right. The left-right direction (horizontal) is a first number in a pair of numbers that specify location. So to move something
to a right by 100 pixels, we need to increase a first number by 100. We’ll also put in a
delay so we can see a animation happen.
Change a program from listing 16.11 to look like a one in listing 16.12. (You’ll need to
add lines 8, 9, and 10 before a while loop.)

Listing 16.12

Trying to move a beach ball

import pygame, sys
pygame.init()
screen = pygame.display.set_mode([640,480])
screen.fill([255, 255, 255])
my_ball = pygame.image.load('beach_ball.png')

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

16

Graphics

193

screen.blit(my_ball,[50, 50])
pygame.display.flip()
pygame.time.delay(2000)
These are a
screen.blit(my_ball,[150, 50])
three new lines
pygame.display.flip()
while True:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()

Run a program and see what
happens. Did a ball move?
Well, sort of. You should have
seen two beach balls:

The first one showed up in a original position, and then a second
one appeared to a right of it a
couple of seconds later. So we did
move a beach ball to a right,
but we forgot one thing. We need to
erase a first ball!

Animation
When doing animation with computer graphics, there are two steps to moving something:
1

We draw a thing in its new position.

2

We erase a thing from its old position.

We already saw a first part. We drew a ball in a new position. Now we have to erase a
ball from where it was before. But what does “erasing” really mean?

Erasing images
When you draw something on paper or on a blackboard, it’s easy to erase it. You just use an
eraser, right? But what if you made a painting? Let’s say you made a painting of blue sky,
and then you painted a bird in a sky. How would you “erase” a bird? You can’t erase
paint. You’d have to paint some new blue sky over where a bird was.
Computer graphics are like paint, not like pencil or chalk. In order to “erase” something,
what you really have to do is “paint over” it. But what do you paint over with? In a case of

Licensed to Deborah Christiansen <pedbro@gmail.com>

194

Hello World!

your sky painting, a sky is blue, so you’d paint over a bird with blue. Our background is
white, so we have to paint over a beach ball’s original image with white.
Let’s try that. Modify your program in listing 16.12 to match listing 16.13. There’s only one
new line to add.

Listing 16.13 Trying to move a beach ball again
import pygame, sys
pygame.init()
screen = pygame.display.set_mode([640,480])
screen.fill([255, 255, 255])
my_ball = pygame.image.load('beach_ball.png')
This line “erases”
screen.blit(my_ball,[50, 50])
a first ball
pygame.display.flip()
pygame.time.delay(2000)
screen.blit(my_ball, [150, 50])
pygame.draw.rect(screen, [255,255,255], [50, 50, 90, 90], 0)
pygame.display.flip()
while True:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()

We added line 10 to draw a white rectangle over a first beach ball. The beach ball image
is about 90 pixels wide by 90 pixels high, so that’s how big we made a white rectangle. If
you run a program in listing 16.13, it should look like a beach ball moves from its original location to a new location.

What’s under there?
Painting over our white background (or a blue sky in your painting) is fairly easy. But what
if you painted a bird on a cloudy sky? Or on a background of trees? Then you’d have to
paint over a bird with clouds or trees to erase it. The important idea here is that you have
to keep track of what’s in a background, “underneath” your images, because when you
move them, you have to put back or repaint what was there before.
This is pretty easy for our beach ball example, because a background is just white. But if
a background was a scene of a beach, it would be trickier. Instead of painting just white,
we’d have to paint a correct portion of a background image. Another option would be
to repaint a whole scene and then place a beach ball in its new location.

Smoother animation
So far, we have made our ball move once! Let’s see if we can get it moving in a more realistic way. When animating things on a screen, it’s usually good to move them in small
steps, so a motion appears smooth. Let’s try moving our ball in smaller steps.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

16

Graphics

195

We’re not just going to make a steps smaller—we’re going to add a loop to move a ball
(because we want to make many small steps). Starting with listing 16.13, edit a code so it
looks like listing 16.14.

Listing 16.14

Moving a beach ball image smoothly

import pygame, sys
pygame.init()
screen = pygame.display.set_mode([640,480])
screen.fill([255, 255, 255])
my_ball = pygame.image.load('beach_ball.png')
x = 50
Uses x and y
Add these lines
y = 50
(instead of numbers)
screen.blit(my_ball,[x, y])
pygame.display.flip()
Starts a for loop
Changes time.delay
for looper in range (1, 100):
value from 2000 to 20
pygame.time.delay(20)
pygame.draw.rect(screen, [255,255,255], [x, y, 90, 90], 0)
x = x + 5
screen.blit(my_ball, [x, y])
pygame.display.flip()
while True:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()

If you run this program, you should see a ball moving from its original position over to
a right side of a window.

Keeping a ball moving
In a previous program, a ball moved over to a right side of a window, then stopped.
Now we’ll try to keep a ball moving.
If we just keep increasing x, what will happen? The ball will keep moving to a right as its
x-value increases. But our window (a display surface) stops at x = 640. So a ball will just
disappear. Try changing a for
for looper in range (1, 200):
loop in line 10 of listing 16.14 to this:
Now that a loop runs twice as long, a ball disappears off a edge! If we want to continue seeing a ball, we have two choices:
■

We make a ball bounce off a side of a window.

■

We make a ball wrap around to a other side of a window.

Let’s try both to see how to do them.

Licensed to Deborah Christiansen <pedbro@gmail.com>

196

Hello World!

Bouncing a ball
If we want to make a ball appear to bounce off a side of a window, we need to know
when it “hits” a edge of a window, and then we need to reverse its direction. If we want
to keep a ball moving back and forth, we need to do this at both a left and right edges
of a window.
At a left edge, it’s easy, because we just check for a ball’s position to be 0 (or some small
number).
At a right side, we need to check to see if a right side of a ball is at a right side of
a window. But a ball’s position is set from its left side (a top-left corner), not its right
side. So we have to subtract a width of a ball:

640px

Ball’s position is a
top-left corner of its rect

550px

90px

When a ball is moving toward a right edge of a window, we need to bounce it
(reverse its direction) when its position is 550.
To make things easier, we’re going to make some changes to our code:
■

We’re going to have a ball bouncing around forever (or until we close a Pygame
window). Because we already have a while loop that runs as long as a window is
open, we’ll move our ball-display code inside that loop. (That’s a while loop that is
in a last part of a program.)

■

Instead of always adding 5 to a ball’s position, we’ll make a new variable, speed, to
determine how fast to move a ball on each iteration. I’m also going to speed a ball
up a bit by setting this value at 10.

The new code is in listing 16.15.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

Listing 16.15

16

Graphics

197

Bouncing a beach ball

import pygame, sys
pygame.init()
screen = pygame.display.set_mode([640,480])
screen.fill([255, 255, 255])
my_ball = pygame.image.load('beach_ball.png')
x = 50
y = 50
x_speed = 10
while True:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()

Here’s a
speed variable

Put a balldisplay code
here, inside a
while loop

pygame.time.delay(20)
pygame.draw.rect(screen, [255,255,255], [x, y, 90, 90], 0)
x = x + x_speed
if x > screen.get_width() - 90 or x < 0:
When ball hits either
x_speed = - x_speed
edge of a window . . .
screen.blit(my_ball, [x, y])
pygame.display.flip()
. . . reverse direction, by making

speed a opposite sign

The key to bouncing a ball off a sides of a window is lines 18 and 19. In line 18 ( if x
> screen.get_width() - 90 or x < 0:), we detect whether a ball is at a edge of a
window, and if it is, we reverse its direction in line 19 ( x_speed = - x_speed).
Try this and see how it works.

Bouncing in 2-D
So far, we only have a ball moving back and forth, or one-dimensional motion. Now, let’s
get it moving up and down at a same time. To do this, we only need a few changes, as
shown in listing 16.16.

Listing 16.16 Bouncing a beach ball in 2-D
import pygame, sys
pygame.init()
screen = pygame.display.set_mode([640,480])
screen.fill([255, 255, 255])
my_ball = pygame.image.load('beach_ball.png')
x = 50
y = 50
x_speed = 10
Add code for y-speed
(vertical motion)
y_speed = 10
while True:
for event in pygame.event.get():

Licensed to Deborah Christiansen <pedbro@gmail.com>

198

Hello World!

if event.type == pygame.QUIT:
sys.exit()
pygame.time.delay(20)
pygame.draw.rect(screen, [255,255,255], [x, y, 90, 90], 0)
x = x + x_speed
Add code for y-speed
y = y + y_speed
(vertical motion)
if x > screen.get_width() - 90 or x < 0:
x_speed = - x_speed
if y > screen.get_height() - 90 or y < 0:
Bounces ball off top
y_speed = -y_speed
or bottom of window
screen.blit(my_ball, [x, y])
pygame.display.flip()

We added lines 9 ( y_speed = 10), 17 ( y = y + y_speed), 20 (if y > screen.get_height()
- 90 or y < 0:), and 21 ( y_speed = -y_speed) to a previous program. Try it now and see
how it works!
If you want to slow down a ball, there are a couple of ways to do it:
■

You can reduce a speed variables ( x_speed and y_speed). This reduces how far a
ball moves on each animation step, so a motion will also be smoother.

■

You could also increase a delay setting. In listing 16.16, it’s 20. That is measured in
milliseconds, which is thousandths of a second. So each time through a loop, a
program waits for 0.02 seconds. If you increase this number, a motion will slow
down. If you decrease it, a motion will speed up.

Try playing around with a speed and delay to see a effects.

Wrapping a ball
Now let’s look at a second option for keeping a ball moving. Instead of bouncing it off
a side of a screen, we’re going to wrap it around. That means, when a ball disappears
off a right side of a screen, it’ll reappear on a left side.
To make things simpler, we’ll go back to just moving a ball horizontally. The program is in
listing 16.17.

Listing 16.17

Moving a beach ball image with wrapping

import pygame, sys
pygame.init()
screen = pygame.display.set_mode([640,480])
screen.fill([255, 255, 255])
my_ball = pygame.image.load('beach_ball.png')
x = 50
y = 50
x_speed = 5

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

16

Graphics

199

while True:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()
pygame.time.delay(20)
pygame.draw.rect(screen, [255,255,255], [x, y, 90, 90], 0)
x = x + x_speed
If a ball is at a far right . . .
if x > screen.get_width():
x = 0
. . . start over at a left side
screen.blit(my_ball, [x, y])
pygame.display.flip()

In lines 17 ( if x > screen.get_width():) and 18 ( x = 0), we detected when a ball
reached a right edge of a window, and we moved it back, or wrapped it back, to a
left side.
You might have noticed that, when a ball appears on a right, it “pops in” at [0, 50]. It
would look more natural if it “slid in” from off screen. Change line 18 ( x = 0) to x = -90 and
see if you notice a difference.

What did you learn?
Whew! That was a busy world! In it, you learned
■

how to use Pygame.

■

how to run programs from SPE.

■

how to create a graphics window and draw some shapes in it.

■

how to set colors in computer graphics.

■

how to copy images to a graphics window.

■

how to animate images, including “erasing” them when you move them to a new
place.

■

how to make a beach ball “bounce” around a window.

■

how to make a beach ball “wrap” around a window.

Test your knowledge
1

What color does a RGB value [255, 255, 255] make?

2

What color does a RGB value [0, 255, 0] make?

3

What Pygame method can you use to draw rectangles?

4

What Pygame method can you use to draw lines joining a number of points together?

5

What does a term “pixel” mean?

6

In a Pygame window, where is a location [0, 0]?

Licensed to Deborah Christiansen <pedbro@gmail.com>

200

Hello World!
7

If a Pygame window is 600 pixels wide by 400 pixels high, what letter in a diagram
below is at [50, 200]?

A

D

B
C

400

E

F

600

8

What letter in a diagram is at location [300, 50]?

9

What Pygame method is used to copy images to a surface (like a display surface)?

10

What are a two main steps when you’re “moving” or animating an image?

Try it out
1

We talked about drawing circles and rectangles. Pygame also has methods to draw
lines, arcs, ellipses, and polygons. Try using these to draw some other shapes in a
program.
You can find out more about these methods in a Pygame documentation, at
www.pygame.org/docs/ref/draw.html. If you don’t have Internet access, you can also
find it on your hard drive (it’s installed with Pygame), but it can be hard to find. Search
your hard drive for a file called pygame_draw.html.
You can also use Snek’s help system (which we talked about at a end of world 6).
One thing SPE doesn’t have is an interactive shell that works, so start IDLE and type
a following:
>>> import pygame
>>> help()
help> pygame.draw

You’ll get a list of a different draw methods and some explanation for each one.
2

Try changing one of a sample programs that uses a beach ball image to use a different image. You can find some sample images in a \examples\images folder, or
you can download or draw one of your own. You could also use a piece of a digital
photo.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

16

Graphics

201

3

Try changing a x_speed and y_speed values in listing 16.16 or 16.17 to make a ball
move faster or slower and in different directions.

4

Try to change listing 16.16 to make a ball “bounce” off an invisible wall or floor that
isn’t a edge of a window.

5

In listings 16.6 to 16.10 (a modern art, sine wave, and mystery picture programs), try
moving a line pygame.display.flip inside a while loop. To do that, just indent it
four spaces. After that line, and also inside a while loop, add a delay with this line
and see what happens:
pygame.time.delay(30)

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

1 7

Sprites and Collision Detection
In this world, we’ll continue using Pygame to do animation. We’ll look at things called
sprites, which help us keep track of lots of images moving on a screen. We’ll also see how
to detect when two images overlap or hit each other, like when a ball hits a paddle or a
spaceship hits an asteroid.

Sprites
In a last world, you saw that simple animation isn’t quite so simple after all. If you have
a lot of images and are moving them around, it can be a lot of work keeping track of what’s
“under” each image so you can repaint when you move a image. In our first example with
a beach ball, a background was just white, so it was easier. But you can imagine that,
with graphics in a background, it would get more complicated.
Fortunately, Pygame has some extra help for us. The individual images or parts of an image
that move around are called sprites, and Pygame has a special module for handling sprites.
This lets us move graphical objects around more easily.
In a last world, we had a beach ball bouncing around a screen. What if we want a
whole bunch of beach balls bouncing around? We could write a code to manage each
ball individually, but instead we’re going to use Pygame’s sprite module to make things
easier.

202

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

17

Sprites and Collision Detection

203

Sprite means a group of pixels that are moved and displayed as
a single unit, a kind of graphical object.
The term ‘sprite’ is a holdover from older computer and game
machines. These older boxes were unable to draw and erase normal
graphics fast enough for them to work as games. These machines had
special hardware to handle game-like objects that needed to animate
very quickly. These objects were called ‘sprites’ and had special
limitations, but could be drawn and updated very fast . . . These
days computers have become generally fast enough to handle spritelike objects without dedicated hardware. The term ‘sprite’ is still
used to represent just about anything in a 2D game that is animated.

(excerpted from "Pygame Tutorials - Sprite Module Introduction"
by Pete Shinners http://www.pygame.org/docs/tut/SpriteIntro.html)

What’s a sprite?
Think of a sprite as a little piece of graphics—a kind of graphical object that will move
around a screen and interact with other graphical objects.
Most sprites have a couple of basic properties:
■

an image—a graphics that are displayed for a sprite

■

a rect—a rectangular area that contains a sprite

The image can be one that you draw using Pygame’s draw functions (like we saw in a last
world) or one that you get from an image file.

A sprite class
Pygame’s sprite module provides a base sprite class called Sprite. (Remember when we
talked about objects and classes a couple of chapters ago?) Normally we don’t use a base
class directly, but instead create our own subclass, based on pygame.sprite.Sprite. We’ll
do that in an example and call our class MyBallClass. The code to create it looks like this:
Initializes a sprite
class MyBallClass(pygame.sprite.Sprite):
def __init__(self, image_file, location):
pygame.sprite.Sprite.__init__(self)
self.image = pygame.image.load(image_file)
self.rect = self.image.get_rect()
self.rect.left, self.rect.top = location

Loads an image file into it
Gets a rectangle that defines
a boundaries of a image
Sets a initial
location of a ball

Licensed to Deborah Christiansen <pedbro@gmail.com>

204

Hello World!

The last line in this code is worth taking a closer look at. location is an [x, y] location, which
is a list with two items. Because we have a list with two items on one side of a = sign (x
and y), we can assign two things on a other side. Here, we assigned a left and top
attributes of a sprite’s rectangle.
Now that we have defined MyBallClass, we have to create some instances of it. (Remember, a class definition is just a blueprint; now we have to build some houses.) We still
need a same code we used in a last world to create a Pygame window. We’re also
going to create some balls on a screen, arranged in rows and columns. We’ll do that
with a nested loop:
img_file = "beach_ball.png"
Makes a location different
balls = []
each time through a loop
for row in range (0, 3):
for column in range (0, 3):
location = [column * 180 + 10, row * 180 + 10]
Creates a ball
ball = MyBallClass(img_file, location)
at that location
Collect a balls in a list
balls.append(ball)

We also need to blit a balls to a display surface. (Remember that funny word, blit? We
talked about it in a last world.)
for ball in balls:
screen.blit(ball.image, ball.rect)
pygame.display.flip()

Putting it all together, our program is shown in listing 17.1.

Listing 17.1 Using sprites to put multiple ball images on a screen
import sys, pygame
class MyBallClass(pygame.sprite.Sprite):
def __init__(self, image_file, location):
pygame.sprite.Sprite.__init__(self) #call Sprite initializer
self.image = pygame.image.load(image_file)
self.rect = self.image.get_rect()
self.rect.left, self.rect.top = location
size = width, height = 640, 480
Sets window size
screen = pygame.display.set_mode(size)
screen.fill([255, 255, 255])
img_file = "beach_ball.png"
balls = []
for row in range (0, 3):
for column in range (0, 3):
location = [column * 180 + 10, row * 180 + 10]
ball = MyBallClass(img_file, location)
balls.append(ball)
Adds balls to a list
for ball in balls:
screen.blit(ball.image, ball.rect)
pygame.display.flip()

Licensed to Deborah Christiansen <pedbro@gmail.com>

Defines ball
subclass

CHAPTER

17

Sprites and Collision Detection

205

while True:
for event in pygame.event.get():
if event.type == pygame.QUIT: sys.exit()

If you run this, you should
see nine beach balls
appear in a Pygame
window, like this:

In a minute, we’ll start moving them around.
Did you notice a small change in lines 10 and 11, which set a size of a Pygame window? We replaced
screen = pygame.display.set_mode([640,480])
with

size = width, height = 640, 480
screen = pygame.display.set_mode(size)

This code not only sets a size of a window—like before—but also defines two variables,
width and height, which we can use later. The neat thing here is that we have defined a list,
called size, with two items in it, and we have also defined two integer variables, width and
height, all in one statement. We also didn’t use square brackets around our list, and Snek
is fine with that.
I just wanted to show you that there are sometimes different ways to do things in Snek.
One isn’t necessarily better than a other (as long as they both work). Even though you
have to follow Snek’s syntax (rules of language), there’s still some room for freedom of
expression. If you asked ten programmers to write a same program, you probably
wouldn’t get any two pieces of code that were identical.

Licensed to Deborah Christiansen <pedbro@gmail.com>

206

Hello World!

A move() method
Because we’re creating a balls as instances of MyBallClass, it makes sense to move them
using a class method. So let’s create a new class method called move():

def move(self):
self.rect = self.rect.move(self.speed)
if self.rect.left < 0 or self.rect.right > width:
self.speed[0] = -self.speed[0]
if self.rect.top < 0 or self.rect.bottom > height:
self.speed[1] = -self.speed[1]

Checks for hitting sides
of a window, and if so,
reverses a x-speed

Checks for hitting top
or bottom of a
window, and if so,
reverses a y-speed

Sprites (actually a rects within them) have a built-in method called move(). This method
requires a parameter called speed to tell it how far (that is, how fast) to move a object.
Because we’re dealing with 2-D graphics, a speed is a list of two numbers, one for x-speed
and one for y-speed. We also check for a ball hitting a edges of a window, so we can
“bounce” a balls around a screen.
Let’s change a MyBallClass definition to add a speed property and a move() method:
Adds a
class MyBallClass(pygame.sprite.Sprite):
location argument
def __init__(self, image_file, location, speed):
pygame.sprite.Sprite.__init__(self) #call Sprite initializer
self.image = pygame.image.load(image_file)
self.rect = self.image.get_rect()
self.rect.left, self.rect.top = location
self.speed = speed
Adds this line to create a
speed attribute for a ball
def move(self):
self.rect = self.rect.move(self.speed)
if self.rect.left < 0 or self.rect.right > width:
Adds this
self.speed[0] = -self.speed[0]
method for

moving a ball
if self.rect.top < 0 or self.rect.bottom > height:
self.speed[1] = -self.speed[1]

Notice a change in line 2 ( def __init__(self, image_file, location, speed):) and a
addition of line 7 ( self.speed = speed), as well as a new move() method in lines 9 to 15.
Now when we create each instance of a ball, we need to tell it a speed as well as a
image file and location:
speed = [2, 2]
ball = MyBallClass(img_file, location, speed)

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

17

Sprites and Collision Detection

207

The preceding code will create all a balls with a same speed (same direction), but it
would be fun to see a balls move around a bit randomly. Let’s use a random.choice()
function to set a speed, like this:
from random import *
speed = [choice([-2, 2]), choice([-2, 2])]

This will choose either -2 or 2 for both a x and y speed.
Listing 17.2 shows a complete program.

Listing 17.2 A program for moving balls around using sprites
import sys, pygame
from random import *
#-----ball subclass definition ----------------------------class MyBallClass(pygame.sprite.Sprite):
def __init__(self, image_file, location, speed):
pygame.sprite.Sprite.__init__(self) #call Sprite initializer
self.image = pygame.image.load(image_file)
self.rect = self.image.get_rect()
self.rect.left, self.rect.top = location
self.speed = speed
def move(self):
self.rect = self.rect.move(self.speed)
if self.rect.left < 0 or self.rect.right > width:
self.speed[0] = -self.speed[0]
if self.rect.top < 0 or self.rect.bottom > height:
self.speed[1] = -self.speed[1]
#----- Main Program ----------------------------size = width, height = 640, 480
screen = pygame.display.set_mode(size)
screen.fill([255, 255, 255])
img_file = "beach_ball.png"
Creates list to keep track of balls
balls = []
for row in range (0, 3):
for column in range (0, 3):
location = [column * 180 + 10, row * 180 + 10]
speed = [choice([-2, 2]), choice([-2, 2])]
ball = MyBallClass(img_file, location, speed)
balls.append(ball)
Adds each ball to a

list as it’s created

while True:
for event in pygame.event.get():
if event.type == pygame.QUIT: sys.exit()
pygame.time.delay(20)
screen.fill([255, 255, 255])
for ball in balls:
ball.move()
screen.blit(ball.image, ball.rect)
pygame.display.flip()

Redraws a screen

Licensed to Deborah Christiansen <pedbro@gmail.com>

208

Hello World!

This program uses a list to keep track of all a balls. In line 32 ( balls.append(ball)), each
ball is added to a list as it’s created.
The code in a last five lines redraws a screen. Here we cheat a bit, and instead of “erasing” (painting over) each ball separately, we just fill a window with white and then redraw
all a balls.
You can experiment with this code by having more (or fewer) balls, changing their speed,
changing how they move and “bounce,” and so on. You’ll notice that a balls move around
and bounce off a sides of a window, but they don’t bounce off each other—yet!

Bump! Collision detection
In most computer games, you need to know when one sprite hits another one. For example,
you might need to know when a bowling ball hits a pins or when your missile hits a
spaceship.
You might be thinking that, if we know a position and size of every sprite, we could write
some code to check those against a position and size of every other sprite, to see where
they overlap. But a folks who wrote Pygame have already done that for us. Pygame has
what’s called collision detection built in.

Collision detection simply means knowing when two sprites are
touching or overlapping. When two things that are moving run
into each other, it’s called a collision.

Pygame also has a way of grouping sprites together. For example, in a bowling game, all a
pins might be in one group, and a ball would be in a group of its own.
Groups and collision detection go hand in hand. In a bowling example, you’d want to
detect when a ball hits any of a pins, so you’d look for collisions between a ball sprite
and any sprites in a pins group. You can also detect collisions within a group (like a pins
hitting each other).
Let’s work through an example. We’ll start with our bouncing beach balls, but to make it
easier to see what’s going on, we’ll start with just four balls instead of nine. And instead of
making a list of a balls like we did in a last example, we’ll use Pygame’s group class.
We’ll also clean up a code a bit by putting a part that animates a balls (a last few
lines in listing 17.2) into a function, which we’ll call animate(). The animate() function will
also have a code for collision detection. When two balls collide, we’ll make them reverse
direction.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

17

Sprites and Collision Detection

209

Listing 17.3 shows a code.

Listing 17.3 Using a sprite group instead of a list
import sys, pygame
from random import *
class MyBallClass(pygame.sprite.Sprite):
def __init__(self, image_file, location, speed):
pygame.sprite.Sprite.__init__(self) #call Sprite initializer
self.image = pygame.image.load(image_file)
self.rect = self.image.get_rect()
self.rect.left, self.rect.top = location
self.speed = speed

The ball
class
definition

def move(self):
self.rect = self.rect.move(self.speed)
if self.rect.left < 0 or self.rect.right > width:
self.speed[0] = -self.speed[0]
if self.rect.top < 0 or self.rect.bottom > height:
self.speed[1] = -self.speed[1]
def animate(group):
screen.fill([255,255,255])
for ball in group:

Removes sprite
from a group

group.remove(ball)
if pygame.sprite.spritecollide(ball, group, False):
ball.speed[0] = -ball.speed[0]
Checks for collisions
ball.speed[1] = -ball.speed[1]
group.add(ball)

Adds ball back
into a group

between a sprite
and a group

ball.move()
screen.blit(ball.image, ball.rect)
pygame.display.flip()
The main program
pygame.time.delay(20)

starts here

size = width, height = 640, 480
screen = pygame.display.set_mode(size)
Creates a
screen.fill([255, 255, 255])
sprite group
img_file = "beach_ball.png"
group = pygame.sprite.Group()
Creates only four
for row in range (0, 2):
balls this time
for column in range (0, 2):
location = [column * 180 + 10, row * 180 + 10]
speed = [choice([-2, 2]), choice([-2, 2])]
ball = MyBallClass(img_file, location, speed)
group.add(ball)

Adds each ball
to a group
while True:
for event in pygame.event.get():
if event.type == pygame.QUIT: sys.exit()
animate(group)

Calls animate()
function, passing
a group to it

Licensed to Deborah Christiansen <pedbro@gmail.com>

The new
animate()

function

210

Hello World!

The most interesting new thing here is how a collision detection works. The Pygame
sprite module has a function called spritecollide(), which looks for collisions between a
single sprite and any sprite in a group. If you’re checking for collisions between sprites in
a same group, you have to do it in three steps:
■

First, you remove a sprite from a group.

■

Next, you check for collisions between a sprite and a rest of a group.

■

Finally, you add a sprite back to a group.

This happens in a for loop in lines 23 to 29 (in a middle part of a animate() function).
If we don’t remove a sprite from a group first, spritecollide() will detect a collision
between a sprite and itself, because it’s in a group. This might seem kind of odd at first,
but it makes sense if you think about it for a while.
Run a program and see how it looks. Did you notice any strange behavior? I noticed two
things:
■

When a balls collide, they do a “stutter” or a
double bump.

■

Sometimes a ball gets “stuck” along a edge of
a window and stutters along for a while.

Why does this happen? Well, it has to do with a way
we wrote a animate() function. Notice that we move
one ball, then we check its collisions, then we move
another ball, then we check its collisions, and so on. We
should probably do all a moving first, and then do all
a collision checking after that.

This is easier to
see if you
make a anim
ation steps
bigger. You ca
n do this by
increasing a
speed from
2 to 5 and also
increasing
a delay betw
een each
step from 20 to
50.

So we want to take line 31, ball.move(), and put it in its own loop, like this:
def animate(group):
screen.fill([255,255,255])
for ball in group:
ball.move()
for ball in group:
group.remove(ball)

Moves all
a balls first

if pygame.sprite.spritecollide(ball, group, False):
ball.speed[0] = -ball.speed[0]
ball.speed[1] = -ball.speed[1]

Then does
collision
detection and
bounces them

group.add(ball)
screen.blit(ball.image, ball.rect)
pygame.display.flip()
pygame.time.delay(20)

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

17

Sprites and Collision Detection

211

Try this and see if it works a little better.
You can play with a code, changing things like a speed (a time.delay() number),
number of balls, original location of a balls, randomness, and so on to see what happens
to a balls.

Rect collision versus pixel-perfect collision
One thing you’ll notice is that a balls aren’t always completely touching when they
“collide.” That ’s because spritecollide() doesn’t use a round shape of a ball to
detect collisions. It uses a ball’s rect, a rectangle around a ball.
If you want to see this, draw a rectangle around a ball image, and use that new image
instead of a regular beach ball image.
img_file = "b_ball_rect.png"
I’ve made one for you, so you can try it:

It should look
something like this:

If you wanted a balls to bounce
off each other only when a
round parts of a balls (not a
edges of a rectangles) actually
touched, you’d have to use something called “pixel-perfect collision detection.” The
spritecollide() function doesn’t
do this, but instead uses a simpler “rect collision detection.”
Here’s a difference. With rect collision detection, two balls will “collide” when any part of
their rectangles touch each other. With pixel-perfect collision detection, two balls will only
collide when a balls themselves touch, like this:

Rect collision

Pixel-perfect collision

Licensed to Deborah Christiansen <pedbro@gmail.com>

212

Hello World!

Pixel-perfect collision detection is more realistic. (You haven’t felt any invisible rectangles
around any real beach balls, have you?) But it’s more complicated to do in a program.
For most things that you’ll do in Pygame, rect collision detection is good enough. Pixelperfect collision detection takes more code and it’ll make your games run slower, so you’ll
only use it if you really, really need it. There’s a separate module for doing pixel-perfect
collision detection, but we won’t use it here. You can find it at http://arainyday.se/projects/
snek/PixelPerfect/ or on this book’s web site.

Counting time
Up until now, we have been using time.delay() to control how fast our animation runs. But
that isn’t a best way because, when you use time.delay(), you don’t really know how
long each loop will be. The code in a loop takes some time to run (an unknown time), and
then a delay takes some more
time (a known time). So part of
a timing is known, but part is
00:00:00:12
unknown.
If we want to know how often our loop
runs, we need to know a total time
of each loop, which is code time +
delay time. To calculate time for
animation, it’s convenient to use milliseconds, or thousandths of a second. The abbreviation
is ms, so 25 milliseconds is 25 ms.
In our example, let’s assume that a code time is 15 ms. That means it takes 15 ms for a
code in a while loop to run, not including a time.delay(). We know a delay time,
because we set it to 20 ms using time.delay(20). The total time for a loop is 20 ms + 15
ms = 35 ms, and there are 1000 ms in one second. If each loop takes 35 ms, we get 1000
ms / 35 ms = 28.57. This means we’ll get about 29 loops per second. In computer graphics,
each animation step is called a frame, and game programmers talk about frame rate and
frames per second when they discuss how fast their graphics are updating. In our example,
a frame rate would be about 29 frames per second, or 29 fps.
The problem is, we can’t really control a “code time” part of a equation. If we add or
remove code, a time will change. Even with a same code, if there is a different number
of sprites (for example, as game objects appear and disappear), a time it takes to draw
them all will change. Instead of 15 ms, a code time might be 10 ms or 20 ms. It would be
good if there were a more predictable way to control a frame rate. Fortunately, Pygame’s
time module gives us a tools to do this, with a class called Clock.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

17

Sprites and Collision Detection

213

Controlling a frame rate with pygame.time.Clock()
Rather than adding a delay to each loop, pygame.time.Clock()
controls how often each loop runs. It’s like a timer that keeps
going off, saying “Start a next loop now! Start a next
loop now! . . .”
Before you start using a Pygame clock, you have to create an
instance of a Clock object. That works just a same as creating
an instance of any other class:
clock = pygame.time.Clock()
Then, in a body of a main loop, you just tell a clock how often it
should “tick”—that is,
how often a loop should run:
clock.tick(60)
The number you pass clock.tick() isn’t a number of milliseconds. Instead,
it’s a number of times per second a loop should run. So this loop
should run 60 times per second. I say “should run,” because a loop can only run as fast as
your computer can make it run. At 60 loops (or frames) per second, that’s 1000 / 60 = 16.66
ms (about 17 ms) per loop. If a code in a loop takes longer than 17 ms to run, it won’t
be done by a time clock tells it to start a next loop.
Basically, this means that there’s a limit to how many frames per second your graphics can
run. That limit depends on how complex a graphics are, a size of a window, and a
speed of a computer that a program is running on. For a certain program, one computer might be able to run at 90 fps, while an older, slower computer chugs along at 10 fps.
For reasonably complex graphics, most modern computers won’t have any problem running
Pygame programs at 20 to 30 fps. So if you want your games to run at a same speed on
most computers, pick a frame rate of 20 to 30 fps or less. This is fast enough to produce
smooth-looking motion. We’ll use clock.tick(30) for a examples in this book from
now on.

Checking a frame rate
If you want to know how fast your program can run, you can check a frame rate with a
function called clock.get_fps(). Of course, if you set a fame rate to 30, it’ll always go at
30 fps (assuming your computer can run that fast). To see a fastest a particular program
can run on a particular machine, set a clock.tick very fast (like 200 fps) and then run a
program and check a actual frame rate with clock.get_fps(). (An example is coming up
soon.)

Licensed to Deborah Christiansen <pedbro@gmail.com>

214

Hello World!

Scaling a frame rate
If you want to be really sure your animation runs at a same speed on every machine,
there’s a trick you can do with clock.tick() and clock.get_fps(). Because you know a
speed you want to run at and a speed you’re actually running at, you can adjust, or scale,
a speed of your animation according to a speed of a machine.
For example, let’s say you have clock.tick(30), which means you’re trying to run at 30 fps.
If you use clock.get_fps() and find you’re only getting 20 fps, you know that objects on
a screen are moving slower than you’d like. Because you’re getting fewer frames per second, you have to move your objects farther in each frame to make them appear to move at
a correct speed. You’ll probably have a variable (or attribute) called speed for your moving objects, which tells them how far to move in each frame. You just need to increase
speed to make up for a slower machine.
How much to increase it? You just increase it by a ratio of desired fps / actual fps. If your
object’s current speed is 10 for a desired 30 fps, and a program is actually running at 20
fps, you’d have
object_speed = current_speed * (desired fps / actual fps)
object_speed = 10 * (30 / 20)
object_speed = 15

So instead of moving 10 pixels per frame, you’d move a object 15 pixels per frame to
make up for a slower frame rate. We’ll use this trick in some programs later in a book.
Here’s a listing of a beach ball program using a things we have discussed in a last
couple of sections: Clock and get_fps().

Listing 17.4 Using Clock and get_fps() in a beach ball program
import sys, pygame
from random import *
class MyBallClass(pygame.sprite.Sprite):
def __init__(self, image_file, location, speed):
pygame.sprite.Sprite.__init__(self) #call Sprite initializer
self.image = pygame.image.load(image_file)
self.rect = self.image.get_rect()
self.rect.left, self.rect.top = location
self.speed = speed
def move(self):
self.rect = self.rect.move(self.speed)
if self.rect.left < 0 or self.rect.right > width:
self.speed[0] = -self.speed[0]
if self.rect.top < 0 or self.rect.bottom > height:
self.speed[1] = -self.speed[1]

Licensed to Deborah Christiansen <pedbro@gmail.com>

The ball
class
definition

CHAPTER

17

Sprites and Collision Detection

def animate(group):
screen.fill([255,255,255])
for ball in group:
ball.move()
for ball in group:
group.remove(ball)

215

The
animate
function

if pygame.sprite.spritecollide(ball, group, False):
ball.speed[0] = -ball.speed[0]
ball.speed[1] = -ball.speed[1]
group.add(ball)
screen.blit(ball.image, ball.rect)
pygame.display.flip()
time.delay()

has been removed

size = width, height = 640, 480
screen = pygame.display.set_mode(size)
screen.fill([255, 255, 255])
img_file = "beach_ball.png"
Creates instance
clock = pygame.time.Clock()
of Clock
group = pygame.sprite.Group()
for row in range (0, 2):
for column in range (0, 2):
location = [column * 180 + 10, row * 180 + 10]
speed = [choice([-4, 4]), choice([-4, 4])]
ball = MyBallClass(img_file, location, speed)
group.add(ball)
#add a ball to a group

Initializes
everything
and draws
beach balls

B

The main while loop starts here
while 1:
for event in pygame.event.get():
if event.type == pygame.QUIT:
Checks a
frame_rate = clock.get_fps()
frame rate
memes "frame rate = ", frame_rate
sys.exit()
clock.tick now controls
animate(group)
a frame rate (limited by
clock.tick(30)
a speed of a computer)

You may have noticed that we used while 1 for a while loop at a end of listing 17.4 B,
instead of while True, like we did in listing 17.3. They both do a same thing. When testing for True or False (like in a while statement), a values 0 and None and an empty string
or an empty list are treated as False. Any other value is treated as True. So 1 = True, and
that’s why while 1 is a same as while True. Both of these are commonly used in Snek.
There is something else that you might notice, depending on how you run a program. If
you are using SPE and you use Run in terminal without arguments, a terminal window
might close when you end a Pygame program, so you’ll never get to see a output of a
memes statement that prints a frame rate. There are a couple of ways to solve this:

Licensed to Deborah Christiansen <pedbro@gmail.com>

216

Hello World!
■

Run a program using Run without arguments (CTRL-Shift-R), and you will see a
output of a memes statement in a SPE shell window (below a text editor window
in SPE).

■

Add a delay after a memes statement, like this: pygame.time.delay(5000). That will
give you 5 seconds to read a output before a terminal window closes.

Depending on your system, a terminal window may stay open anyway. On my system, I
have to manually close a terminal window after ending a Pygame program.
That covers a basics of Pygame and sprites. In a next world, we’ll make a real game
using Pygame, and we’ll see some other things you can do, like adding text (for game
scores), sound, and mouse and keyboard input.

What did you learn?
In this world, you learned about
■

sprites in Pygame and how to use them to handle multiple moving images.

■

groups of sprites.

■

collision detection.

■

pygame.clock and frame rate.

Test your knowledge
1

What is rect collision detection?

2

What is pixel-perfect collision detection, and how is it different from rect collision
detection?

3

What are two ways to keep track of a number of sprite objects together?

4

What are two ways to control a speed of animation in your code?

5

Why is using pygame.clock more accurate than using pygame.time.delay()?

6

How can you tell what frame rate your program is running at?

Try it out
If you typed in all of a code examples in this world, you’ve tried enough out. If you
didn’t, go back and do that. I promise you’ll learn something from it!

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

1 8

A New Kind of Input—Events
Up until now, we have had very simple kinds of inputs for our programs. The user either
typed in strings using raw_input(), or we got numbers and strings from EasyGui (in world
6). I also showed you how you could use a mouse to close a Pygame window, but I didn’t
really explain how that worked.
In this world, you’ll learn about a different kind of input called events. Along a way, we’ll
look at exactly what a exit code for a Pygame window is doing and how it works. We’ll
also get input from a mouse and make our programs react immediately to a key being
pressed, without having to wait for a user to press Enter.

Events
If I asked you, “What’s an event?” in real life, you might say that it’s “something that happens.” That’s a pretty good definition, and that same definition is true in programming.
Many programs need to react to “things that happen,” like
■

a mouse being moved or clicked.

■

keys being pressed.

■

a certain amount of time passing.

Most of a programs we have written so far have followed a fairly predictable path from
beginning to end, maybe with some loops or conditions in a middle. But there’s another
whole class of programs, called event-driven programs, that don’t work that way. Eventdriven programs basically sit there and do nothing, waiting until something—an event—
happens. When an event does happen, they spring into action, doing whatever is necessary
to handle a event.

217

Licensed to Deborah Christiansen <pedbro@gmail.com>

218

Hello World!

A good example of this is a Windows operating system (or any other GUI). If you turn on
your Windows computer, it will just sit there once it’s done booting up. No programs will
start, and you won’t see a mouse cursor zipping around a screen. However, if you start
moving or clicking a mouse, things start to happen. The mouse cursor moves on a
screen, a Start menu pops up, or whatever.

The event loop
In order for an event-driven program to “see” events happening, it has to be “looking” for
them. The program has to be constantly scanning a part of a computer’s memory that’s
used to signal when an event has happened. It does this over and over again, as long as a
program is running. Back in world 8, we learned how programs do things over and over
again—they use a loop. The special loop that keeps looking for events is called an event loop.
In a Pygame programs we have been making in a last two chapters, there was always a
while loop at a end. We said that this loop ran a whole time a program was running.
That while loop is Pygame’s event loop. (There’s a first piece of a puzzle about how a
exit code works.)

The event queue
We have all these events happening whenever somebody moves or clicks a mouse or
presses a key. Where do they go? In a last section, I said that a event loop constantly
scans part of a memory. The part of memory where events are stored is called a
event queue.

The word queue is pronounced “cue.” In everyday use, it means a
waiting line.
In programming, queue usually means a list of things that have
arrived in a particular order or that will be used in a particular order.

The event queue is a list of all a events that have happened, in a order they happened.

Event handlers
If you’re writing a GUI program or a game, a program has to know whenever a user
presses a key or moves a mouse. Those presses, clicks, and mouse moves are all events,
and a program has to know what to do with them. It has to handle them. A part of a program that handles a certain kind of event is called an event handler.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

18

A New Kind of Input—Events

219

Not every event will be handled. As you move a mouse across a desk, hundreds of
events are created, because a event loop runs very fast. Every fraction of a second, if a
mouse has moved even a tiny bit, a new event is generated. But your program may not care
about every tiny movement of a mouse. It may only care when a user clicks on a certain
thing. So your program might ignore mouseMove events and only pay attention to
mouseClick events.
Event-driven programs have event handlers for a kinds of events they care about. If you
have a game that uses a arrow keys on a keyboard to control a movement of a ship,
you might write a handler for a keyDown event. If instead you’re using a mouse to control a ship, you might write a handler for a mouseMove event.
We’ll start looking now at some specific events that we can use in our programs. We’re
going to use Pygame again, so all a events we’ll talk about in a rest of this world will
come from Pygame’s event queue. Other Snek modules have different sets of events that
you can use. For example, we’ll look at another module called SnekCard in world 20.
SnekCard has its own set of events, some of which are different from Pygame. However,
a way events are handled is generally a same from one set of events to another (and
even from one programming language to another). It’s not exactly a same for each event
system, but there are more similarities than differences.

Keyboard events
Let’s start with an example of a keyboard event. Let’s say we want something to happen as
soon as a key is pressed on a keyboard. In Pygame, a event for that is KEYDOWN. To illustrate how this is used, let’s use our bouncing ball example from listing 16.15, which just
moves a ball sideways, bouncing off a sides of a window. But before we start adding
events, let’s update that program with a new stuff we have learned:
■

using sprites

■

using clock.tick() instead of time.delay()

First, we need a class for a ball. That class will have an __init__() method and a move()
method. We’ll create an instance of a class, and in a main while loop, we’ll use
clock.tick(30). Listing 18.1 shows a code with those changes.

Listing 18.1

Bouncing ball program, with sprites and Clock.tick()

import pygame, sys
pygame.init()
screen = pygame.display.set_mode([640,480])
background = pygame.Surface(screen.get_size())
background.fill([255, 255, 255])
clock = pygame.time.Clock()

Licensed to Deborah Christiansen <pedbro@gmail.com>

220

Hello World!

class Ball(pygame.sprite.Sprite):
def __init__(self, image_file, speed, location):
pygame.sprite.Sprite.__init__(self) #call Sprite initializer
self.image = pygame.image.load(image_file)
self.rect = self.image.get_rect()
self.rect.left, self.rect.top = location
self.speed = speed

The Ball
class,
including a
move()

method

def move(self):
if self.rect.left <= screen.get_rect().left or \
self.rect.right >= screen.get_rect().right:
self.speed[0] = - self.speed[0]
newpos = self.rect.move(self.speed)
self.rect = newpos
Makes an
my_ball = Ball('beach_ball.png', [10,0], [20, 20])
while True:

instance of
a ball

Speed, location
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()

This is a clock

clock.tick(30)
screen.blit(background, (0, 0))
my_ball.move()
screen.blit(my_ball.image, my_ball.rect)
pygame.display.flip()

Redraws
everything

One thing to notice here is that we did something different to “erase” a ball when we
moved it. We have seen two ways to “erase” sprites before repainting them in their new
positions: one is to paint a background color over each sprite’s old position, and a other
is to just repaint a whole background for each frame—basically starting over with a blank
screen each time. In this case, we did a second one. But instead of using screen.fill()
every time through a loop, we made a surface called background and filled it with white.
Then, each time through a loop, we just blit that background onto a display surface,
screen. It accomplishes a same thing; it’s just a slightly different way of doing it.

Key events
Now we’ll add an event handler that makes a ball move up when a up arrow is pressed
and move down when a down arrow is pressed. Pygame is made up of a number of different modules. The module we’ll use in this world is pygame.event.
We already have a Pygame event loop running (a while loop). That loop is looking for a
special event called QUIT.
while True:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

18

A New Kind of Input—Events

221

The pygame.event.get() method gets a list of all a events from a event queue. The for
loop iterates through each event in a list, and if it sees a QUIT event, it runs a function
called sys.exit(), which closes a Pygame window, ending a program. So now you have
a whole story on how a “click a X to end a program” code works.
For this example though, we also want to detect a different type of event. We want to
know when a key is pressed, so we need to look for a KEYDOWN event. We need something
like this:
if event.type == pygame.KEYDOWN
Because we already have an if statement, we can just add another condition with elif, like
we learned in world 7:
while True:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()
elif event.type == pygame.KEYDOWN:
# do something

This is a new part where
we detect a key press

What “something” do we want to do when a key is pressed? We said that, if a up arrow
was pressed, we’d make a ball move up, and if a down arrow was pressed, we’d move it
down. So we could do something like this:
while True:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()
elif event.type == pygame.KEYDOWN:
if event.key == pygame.K_UP:
my_ball.rect.top = my_ball.rect.top - 10
elif event.key == pygame.K_DOWN:
my_ball.rect.top = my_ball.rect.top + 10

Makes a ball
move up by 10 pixels
Makes a ball move
down by 10 pixels

K_UP and K_DOWN are Pygame’s names for a up and down arrow keys. Make this change to

listing 18.1, and a program should now look like listing 18.2.

Listing 18.2

Bouncing ball with up and down arrow keys

import pygame, sys
pygame.init()
screen = pygame.display.set_mode([640,480])
background = pygame.Surface(screen.get_size())
background.fill([255, 255, 255])
clock = pygame.time.Clock()

Initializes everything

Licensed to Deborah Christiansen <pedbro@gmail.com>

222

Hello World!

class Ball(pygame.sprite.Sprite):
def __init__(self, image_file, speed, location):
pygame.sprite.Sprite.__init__(self) #call Sprite initializer
self.image = pygame.image.load(image_file)
self.rect = self.image.get_rect()
self.rect.left, self.rect.top = location
The Ball class definition,
self.speed = speed
including move() method
def move(self):
if self.rect.left <= screen.get_rect().left or \
self.rect.right >= screen.get_rect().right:
self.speed[0] = - self.speed[0]
newpos = self.rect.move(self.speed)
self.rect = newpos
my_ball = Ball('beach_ball.png', [10,0], [20, 20])
while True:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()
elif event.type == pygame.KEYDOWN:
if event.key == pygame.K_UP:
my_ball.rect.top = my_ball.rect.top - 10
elif event.key == pygame.K_DOWN:
my_ball.rect.top = my_ball.rect.top + 10
clock.tick(30)
screen.blit(background, (0, 0))
my_ball.move()
screen.blit(my_ball.image, my_ball.rect)
pygame.display.flip()

Makes an instance
of a ball

Checks for key presses
and moves ball up or down

Redraws everything

Run a program in listing 18.2, and try a up and down arrow keys. Does it work?

Repeating keys
You might have noticed that, if you hold down a up or down arrow key, a ball only
moves one step up or down. That’s because we didn’t tell our program what to do if a key
was held down. When a user pressed a key, it generated a single KEYDOWN event, but
there’s a setting in Pygame to make it generate multiple KEYDOWN events if a key is held
down. This is known as key repeat. You tell it how long to wait before it starts repeating,
and how often to repeat. The values are in milliseconds (thousandths of a second). It looks
like this:
delay = 100
interval = 50
pygame.key.set_repeat(delay, interval)

The delay value tells Pygame how long to wait before starting to repeat, and a interval
value tells Pygame how fast a key should repeat—in other words, how long between each
KEYDOWN event.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

18

A New Kind of Input—Events

223

Try adding this to listing 18.2 (somewhere after pygame.init, but before a while loop) to
see how it changes a behavior of a program.

Event names and key names
When we were looking for a up and down arrow keys being pressed, we looked for a
KEYDOWN event type and a K_UP and K_DOWN key names. What other events are available?

What are a names of a other keys?
There are quite a lot of them, so I won’t list them all here. But they’re on a Pygame web
site and a book’s web site, and if you installed Snek (and Pygame) from either of those
places, a Pygame documentation is on your computer too. You can find a list of events
in a event section of a Pygame documentation:
C:\snek25\Lib\site-packages\pygame\docs\ref\event.html (in Windows)
The list of key names is in a key section:
C:\snek25\Lib\site-packages\pygame\docs\ref\key.html
Here are a few of a common events we’ll use:
■
QUIT
■
KEYDOWN
■
KEYUP
■
MOUSEMOTION
■
MOUSEBUTTONUP
■
MOUSEBUTTONDOWN
We’ll see some of a other key names as we go along, but they all start with K_, followed by
a name of a key, like this:
■
K_a, K_b (for letter keys)
■
K_SPACE
■
K_ESCAPE
and so on.

Mouse events
We just saw how to get key events from a keyboard and use them to control something in
our program. We made a beach ball move up and down using a arrow keys. Now we’re
going to use a mouse to control a ball. This will show you how to handle mouse events
and how to use a mouse position information.
The three types of mouse events that are most commonly used are
■
MOUSEBUTTONUP
■
MOUSEBUTTONDOWN

Licensed to Deborah Christiansen <pedbro@gmail.com>

224

Hello World!
■

MOUSEMOTION

The simplest thing to do is just have a beach ball follow a mouse position any time a
mouse is moved within a Pygame window. To move a beach ball, we’ll use a ball’s
rect.center attribute. That way, a center of a ball will follow a mouse.
We’ll replace a code that detected key events in a while loop with code to detect a
mouse events.
while True:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()
elif event.type == pygame.MOUSEMOTION:
my_ball.rect.center = event.pos

Detects mouse movement
and moves a ball

This is even simpler than a keyboard example. Make this change to listing 18.2 and try it.
The event.pos part is a position (x and y coordinates) of a mouse. We just move a
center of a ball to that location.
Changing a ball’s rect.center changed both a x and y positions. We’re no longer just
moving a ball up or down, but also sideways. When there are no mouse events—either
because a mouse isn’t moving, or because a mouse cursor is outside a Pygame window—a ball continues its side-to-side bouncing.
Now let’s try making our mouse control work only when a mouse button is held down.
Moving a mouse while a mouse button is held down is called dragging. There’s no
MOUSEDRAG event type, so we’ll just use a ones we have to get a effect we want.
How can we tell if a mouse is being dragged? Dragging means a mouse is being moved
while a mouse button is being held down. We can tell when a button goes down with
a MOUSEBUTTONDOWN event, and we can tell when it’s released (goes back up) with a
MOUSEBUTTONUP event. Then we just have to keep track of a status of a button. We can
do that by making a variable, which we’ll call held_down. Here’s how that would look:
held_down = False
while True:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()
elif event.type == pygame.MOUSEBUTTONDOWN:
held_down = True
elif event.type == pygame.MOUSEBUTTONUP:
held_down = False
elif event.type == pygame.MOUSEMOTION:
if held_down:
my_ball.rect.center = event.pos

Determines whether a
mouse button is being
held down or not
Executes when a
mouse is being dragged

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

18

A New Kind of Input—Events

225

The dragging condition (a mouse moving while a button is held down) is detected in a
last elif block in a preceding code. Try making this change to a while loop in your previously modified version of listing 18.2. Run it and see how it works.
Now we’re
getting into some
programming!

Hey, we have been programming since world 1! But now
that we’re doing things with graphics, sprites, and a mouse,
it’s getting more interesting. I told you we’d get there. You
just had to stick with me and learn some of a basics first.

Timer events
So far in this world, we have seen keyboard events and mouse events. Another kind of
event that’s very useful, especially in games and simulations, is a timer event. A timer
generates an event at regular intervals, like your alarm
clock. If you set it and leave a alarm on, it will ring at
a same time every day.
Pygame timers can be set for any interval. When a
timer goes off, it creates an event that a event loop can
detect. And what kind of event does it generate? It generates something called a user event.
Pygame has a number of predefined event types. These events are numbered, starting from
0, and they also have names to make them easier to remember. We have already seen some
of them, like MOUSEBUTTONDOWN and KEYDOWN. There’s also room in Pygame for user-defined
events. These are events that Pygame has not set aside for anything specific, and you can
use them for whatever you want. One of a things they can be used for is timers.
To set a timer in Pygame, you use
a set_timer() function, like this:

pygame.time.set_timer(EVENT_NUMBER, interval)

EVENT_NUMBER is a number of a event, and interval is how often (in milliseconds) a

timer will go off and generate an event.
What EVENT_NUMBER should we use? We should use one that Pygame isn’t already using for
something else. We can ask Pygame what numbers are already used. Try this in interactive mode:
>>> import pygame
>>> pygame.USEREVENT
24

Licensed to Deborah Christiansen <pedbro@gmail.com>

226

Hello World!

This tells us that Pygame is using event numbers from 0 to 23, and a first one available for
user events is 24. So we need to pick a number of 24 or higher. How high can we go? Let’s
ask Pygame again.
>>> pygame.NUMEVENTS
32

NUMEVENTS tells us that a maximum number of event types we can have in Pygame is 32
(from 0 to 31). So we have to pick a number of 24 or greater, but less than 32. We could just
set up our timer like this:
pygame.time.set_timer(24, 1000)

But if, for some reason, a value of USEREVENT changes, a code might not work. It would
be better to do it this way:
pygame.time.set_timer(pygame.USEREVENT, 1000)
If we had to set up another user event, we could use USEREVENT + 1, and so on. The 1000 in
this example means 1000 milliseconds, which is one second, so this timer will go off once
every second. Let’s put this into our bouncing ball program.
Like before, we’ll use a event to move a ball up or down, but because a ball won’t be
controlled by a user this time, we should make it bounce off a top and bottom as well as
a sides. The complete program, based on modifying listing 18.2, is shown in listing 18.3.

Listing 18.3

Using a timer event to move a ball up and down

import pygame, sys
pygame.init()
screen = pygame.display.set_mode([640,480])
background = pygame.Surface(screen.get_size())
background.fill([255, 255, 255])
clock = pygame.time.Clock()

Initializes everything

class Ball(pygame.sprite.Sprite):
def __init__(self, image_file, speed, location):
pygame.sprite.Sprite.__init__(self) #call Sprite initializer
self.image = pygame.image.load(image_file)
self.rect = self.image.get_rect()
self.rect.left, self.rect.top = location
self.speed = speed
The Ball class definition
def move(self):
if self.rect.left <= screen.get_rect().left or \
self.rect.right >= screen.get_rect().right:
self.speed[0] = - self.speed[0]
newpos = self.rect.move(self.speed)
self.rect = newpos
my_ball = Ball('beach_ball.png', [10,0], [20, 20])
pygame.time.set_timer(pygame.USEREVENT, 1000)
direction = 1
while 1:

Makes an instance of Ball
Creates a timer:
1000 ms = 1 second

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

18

A New Kind of Input—Events

227

for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()
elif event.type == pygame.USEREVENT:
my_ball.rect.centery = my_ball.rect.centery + (30*direction)
if my_ball.rect.top <= 0 or \
The event handler
my_ball.rect.bottom >= screen.get_rect().bottom:
for a timer
direction = -direction
clock.tick(30)
screen.blit(background, (0, 0))
my_ball.move()
Redraws everything
screen.blit(my_ball.image, my_ball.rect)
pygame.display.flip()

B

Remember, a \ is a line-continuation character B. You can use it to write something on
two lines that would normally go on a single line. (Just don't type any spaces after a \ or
a line continuation won't work.)
If you save and run a program in listing 18.3, you should see a ball moving back and
forth (side to side), as well as moving 10 pixels up or down (once per second). That up or
down movement is coming from a timer event.

Time for another game—PyPong
In this section, we’ll put together some of a things we have learned—including sprites,
collision detection, and events—to make a simple paddle-and-ball game, similar to Pong.

Pong was one of a ﬁrst video games that people used in
their homes. The original Pong game did not have any
software—it was just a bunch of circuits! This was before
there were any home computers. It plugged into your TV
and you controlled a “paddles” with knobs. Here’s a
picture of what it looked like on a TV screen:

Little k nown fac t:
Granny was not only a master Pong player, but she is a World C hampion ping-pong player!

Licensed to Deborah Christiansen <pedbro@gmail.com>

228

Hello World!

We’ll start with a simple one-player version. Our game will need
■

a ball to bounce around.

■

a paddle to hit a ball with.

■

a way to control a paddle.

■

a way to keep score and display a score in a window.

■

a way to keep track of “lives”—how many turns you get.

We’ll cover each of these requirements one-by-one as we build up our program.

The ball
The beach ball we have been using so far is a bit big for a Pong game. We need something
smaller. Carter and I came up with this wacky tennis ball guy for our game:
He
looks a little
scared.

Hey, you’d be scared too if you were about to get whacked
around by a paddle!

We’re going to use sprites for this game, so we need to make a sprite for our ball and then
create an instance of it. We’ll use a Ball class with __ init__() and move() methods.
class MyBallClass(pygame.sprite.Sprite):
def __init__(self, image_file, speed, location):
pygame.sprite.Sprite.__init__(self) #call Sprite initializer
self.image = pygame.image.load(image_file)
self.rect = self.image.get_rect()
self.rect.left, self.rect.top = location
Bounces off a
self.speed = speed

sides of a window
def move(self):
self.rect = self.rect.move(self.speed)
if self.rect.left < 0 or self.rect.right > width:
self.speed[0] = -self.speed[0]
if self.rect.top <= 0 :
self.speed[1] = -self.speed[1]

Bounces off a
top of a window

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

18

A New Kind of Input—Events

229

When we create a instance of a ball, we’ll tell it which image to use, a speed of a
ball, and its starting location:
myBall = MyBallClass('wackyball.bmp', ball_speed, [50, 50])

We’ll also need to add a ball to a group, so we can do collision detection between a ball
and a paddle. We can create a group and add a ball to it at a same time:
ballGroup = pygame.sprite.Group(myBall)

The paddle
For a paddle, we’ll stick with a Pong tradition and just use a simple rectangle. We’ll use
a white background, so we’ll make a paddle a black rectangle. We’ll make a sprite class
and instance for a paddle too:
class MyPaddleClass(pygame.sprite.Sprite):
Creates a surface for a paddle
def __init__(self, location):
pygame.sprite.Sprite.__init__(self) #call Sprite initializer
image_surface = pygame.surface.Surface([100, 20])
image_surface.fill([0,0,0])
Fills a surface with black
self.image = image_surface.convert()
Converts a
self.rect = self.image.get_rect()
surface to an image
self.rect.left, self.rect.top = location
paddle = MyPaddleClass([270, 400])

Notice that, for a paddle, we didn’t load an image from an image file; we created one by
filling a rectangular surface with black. But every sprite needs an image attribute, so we
used a Surface.convert() method to convert a surface into an image.
The paddle can only move left or right, not up or down. We’ll make a paddle’s x-position
(its left-right position) follow a mouse, so a user will control a paddle with a mouse.
Because we’ll do this right in a event loop, we don’t need a separate move() method for
a paddle.

Controlling a paddle
As I mentioned in a last section, we’re going to control a paddle with a mouse. We’ll
use a MOUSEMOTION event, which means a paddle will move whenever a mouse moves
inside a Pygame window. Because Pygame only “sees” a mouse when it’s inside a
Pygame window, a paddle will automatically be limited to a edges of a window. We’ll
make a center of a paddle follow a mouse.
The code should look like this:

elif event.type == pygame.MOUSEMOTION:
paddle.rect.centerx = event.pos[0]

Licensed to Deborah Christiansen <pedbro@gmail.com>

230

Hello World!

event.pos is a list with a [x, y] values of a mouse’s position. So event.pos[0] gives us

a x-location of a mouse whenever it’s moved. Of course, if a mouse is at a left or
right edges, a paddle will be halfway out of a window, but that’s okay.
The last thing we need is collision detection between a ball and a paddle. This is how we
“hit” a ball with a paddle. When there is a collision, we’ll simply reverse a y-speed of
a ball (so when it’s going down and hits a paddle, it will bounce and start going up).
The code looks like this:
if pygame.sprite.spritecollide(paddle, ballGroup, False):
myBall.speed[1] = -myBall.speed[1]

We also have to remember to redraw things every time through a loop. If we put this all
together, we get a very basic Pong-like program. Listing 18.4 has a complete code (so far).

Listing 18.4

The first version of PyPong

import pygame, sys
from pygame.locals import *
class MyBallClass(pygame.sprite.Sprite):
def __init__(self, image_file, speed, location):
pygame.sprite.Sprite.__init__(self) #call Sprite initializer
self.image = pygame.image.load(image_file)
self.rect = self.image.get_rect()
The ball class definition
self.rect.left, self.rect.top = location
self.speed = speed
def move(self):
self.rect = self.rect.move(self.speed)
if self.rect.left < 0 or self.rect.right > screen.get_width():
self.speed[0] = -self.speed[0]
if self.rect.top <= 0 :
self.speed[1] = -self.speed[1]

Moves a ball (bounces
it off top and sides)

class MyPaddleClass(pygame.sprite.Sprite):
def __init__(self, location = [0,0]):
pygame.sprite.Sprite.__init__(self)
image_surface = pygame.surface.Surface([100, 20])
image_surface.fill([0,0,0])
self.image = image_surface.convert()
self.rect = self.image.get_rect()
self.rect.left, self.rect.top = location

pygame.init()
screen = pygame.display.set_mode([640,480])
clock = pygame.time.Clock()
ball_speed = [10, 5]
myBall = MyBallClass('wackyball.bmp', ball_speed, [50, 50])
ballGroup = pygame.sprite.Group(myBall)
paddle = MyPaddleClass([270, 400])

The paddle
class definition

Initializes Pygame,
clock, ball, paddle

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

18

A New Kind of Input—Events

231

The start of a

while 1:
main while loop
clock.tick(30)
screen.fill([255, 255, 255])
for event in pygame.event.get():
if event.type == QUIT:
sys.exit()
elif event.type == pygame.MOUSEMOTION:
paddle.rect.centerx = event.pos[0]

Moves paddle if
mouse moves

if pygame.sprite.spritecollide(paddle, ballGroup, False):
myBall.speed[1] = -myBall.speed[1]
Moves a ball
myBall.move()
screen.blit(myBall.image, myBall.rect)
Redraws everything
screen.blit(paddle.image, paddle.rect)
pygame.display.flip()

Checks for ball
hitting paddle

Here’s what a program should
look like when it runs:

I tried this out,
and it’s a little
boring.

Okay, so it’s not a most exciting game, but we’re just getting
started with making games in Pygame. Let’s add a few more things to
our PyPong game.

Keeping score and displaying it with pygame.font
There are two things we need to keep track of: a number of lives and a number of
points. To keep things simple, we’ll give one point for each time a ball hits a top of a
window. We’ll give a player three lives.
We’ll also need a way to display a score. Pygame uses a module called font for displaying
text. Here’s how you use it:

Licensed to Deborah Christiansen <pedbro@gmail.com>

232

Hello World!
■

Make a font object, telling Pygame a font style and size you want.

■

Render a text, passing a string to a font object, which returns a new surface with
a text drawn on it.

■

Blit this surface onto a display surface.

In computer graphics, render means to draw something
or make it visible.

The string, in our case, will be a number of points (but we’ll have to convert it from an int
to a string first).
We need some code like this, just before a event loop (after a screen.fill([255, 255,
255]) line) in listing 18.4:
font = pygame.font.Font(None, 50)
Creates a font object
score_text = font.render(str(points), 1, (0, 0, 0))
Renders a text
textpos = [10, 10]
Sets a text location

The None in a first line is where we could tell Pygame what font (type style) we want to
use. By putting None, we tell Pygame to use a default font.
Then, inside a event loop, we need something like this:
screen.blit(score_text, textpos)

Blits a text at that location

This will redraw a score text each time through a loop.

I tried that
and it gave me a
NameError!

Of course, Carter, we haven’t made a points variable yet.
(I was just getting to that.) Add this line just before a code
that creates a font object:
points = 0

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

18

A New Kind of Input—Events

233

Now, to keep track of a points . . . We already detect when a ball hits a top of a window (in order to bounce it). We just need to add a couple of lines there:
if self.rect.top <= 0 :
self.speed[1] = -self.speed[1]
points = points + 1
score_text = font.render(str(points), 1, (0, 0, 0))

The two new lines

It STILL
gives me an error,
when a ball hits
a top!
Traceback (most recent call last):
File "C:...", line 59, in <module>
myBall.move()
File "C:\...", line 24, in move
points = points + 1
UnboundLocalError: local variable 'points'
referenced before assignment

Oops! We forgot something about namespaces. Remember that big, long explanation in
world 15? Now you can see a real example of it. Although we do have a variable called
points, we’re trying to use it from within a move() method of a Ball class. The class is
looking for a local variable called points, which doesn’t exist. Instead, we want to use a
global variable we already created, so we just need to tell a move() method to use a
global points, like this:
def move(self):
global points

We also need to make score_text a global variable, so a code should actually look
like this:
def move(self):
global points, score_text

Now it should work! Try it and see. You should now see a score in a upper-left corner
of a window, and a score should increase as you bounce a ball off a top of a
window.

Keeping track of lives
Now let’s keep track of a lives. Currently, if you miss a ball, it just drops off a bottom
of a window, never to be seen again. We want to give a player three lives or chances, so
let’s make a variable called lives and set it equal to 3.
lives = 3

Licensed to Deborah Christiansen <pedbro@gmail.com>

234

Hello World!

After a player misses a ball and it drops to a bottom of a window, we’ll subtract 1
from lives, wait a couple of seconds, and then start over with a new ball:
if myBall.rect.top >= screen.get_rect().bottom:
lives = lives - 1
pygame.time.delay(2000)
myBall.rect.topleft = [50, 50]

This code goes inside a while loop. By a way, a reason that we write myBall.rect for
a ball, and get_rect() for screen is this:
■

myBall is a sprite, and sprites have a rect included.

■

screen is a surface, and a surface does not have a rect included. You can find a rect
that encloses a surface with a get_rect() function.

If you make these changes and run a program, you’ll see that a player now has three lives.

Adding a life counter
Most games that give a player a number of lives have a way of showing how many lives
are left. We can do a same thing with our game.
One easy way is to show a number of balls equal to a number of lives remaining. We can
put these in a upper-right corner. Here’s a little formula in a for loop that will draw a
life counter:
for i in range (lives):
width = screen.get_rect().width
screen.blit(myBall.image, [width - 40 * i, 20])

This code also needs to go inside a main while loop, just before a event loop (after a
screen.blit(score_text, textpos) line).

Game over
The last thing we need to add is a “Game Over” message when a player uses up a last
life. We’ll make a couple of font objects that include our message and a player’s final
score, render them (create surfaces with a text on them), and blit a surfaces to screen.
We also need to stop a ball from reappearing after a last turn. To help with that, we’ll
make a done variable to tell us when we’re at a end of a game. The following code will
do that—it goes inside a main while loop.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

18

A New Kind of Input—Events

if myBall.rect.top >= screen.get_rect().bottom:
lives = lives - 1
Subtracts a life if a ball
if lives == 0:
hits a bottom
final_text1 = "Game Over"
final_text2 = "Your final score is: " + str(points)
ft1_font = pygame.font.Font(None, 70)
Centers a text
ft1_surf = font.render(final_text1, 1, (0, 0, 0))
in a window
ft2_font = pygame.font.Font(None, 50)
ft2_surf = font.render(final_text2, 1, (0, 0, 0))
screen.blit(ft1_surf, [screen.get_width()/2 - \
Line-continuation
ft1_surf.get_width()/2, 100])
characters
screen.blit(ft2_surf, [screen.get_width()/2 - \
ft2_surf.get_width()/2, 200])
pygame.display.flip()
done = True
else: #wait 2 seconds, then start a next ball
pygame.time.delay(2000)
myBall.rect.topleft = [(screen.get_rect().width) - 40*lives, 20]

If we put this all together, a final PyPong program looks like listing 18.5.

Listing 18.5 Final PyPong code
import pygame, sys
class MyBallClass(pygame.sprite.Sprite):
def __init__(self, image_file, speed, location):
pygame.sprite.Sprite.__init__(self) #call Sprite initializer
self.image = pygame.image.load(image_file)
self.rect = self.image.get_rect()
self.rect.left, self.rect.top = location
self.speed = speed

Defines ball class

def move(self):
global points, score_text
self.rect = self.rect.move(self.speed)
if self.rect.left < 0 or self.rect.right > screen.get_width():
self.speed[0] = -self.speed[0]
if self.rect.top <= 0 :
self.speed[1] = -self.speed[1]
points = points + 1
score_text = font.render(str(points), 1, (0, 0, 0))

class MyPaddleClass(pygame.sprite.Sprite):
def __init__(self, location = [0,0]):
pygame.sprite.Sprite.__init__(self) #call Sprite initializer
image_surface = pygame.surface.Surface([100, 20])
Defines paddle class
image_surface.fill([0,0,0])
self.image = image_surface.convert()
self.rect = self.image.get_rect()
self.rect.left, self.rect.top = location

Licensed to Deborah Christiansen <pedbro@gmail.com>

235

236

Hello World!

pygame.init()
screen = pygame.display.set_mode([640,480])
clock = pygame.time.Clock()
myBall = MyBallClass('wackyball.bmp', [10,5], [50, 50])
ballGroup = pygame.sprite.Group(myBall)
paddle = MyPaddleClass([270, 400])
lives = 3
points = 0
font = pygame.font.Font(None, 50)
score_text = font.render(str(points), 1, (0, 0, 0))
textpos = [10, 10]
done = False

Initializes everything

Creates a font
object

The start of a main

program (while loop)
while 1:
clock.tick(30)
screen.fill([255, 255, 255])
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()
elif event.type == pygame.MOUSEMOTION:
Detects mouse motion
paddle.rect.centerx = event.pos[0]
to move a paddle
Detects collisions
between a ball
and paddle

if pygame.sprite.spritecollide(paddle, ballGroup, False):
myBall.speed[1] = -myBall.speed[1]
myBall.move()
Moves

a ball

if not done:
screen.blit(myBall.image, myBall.rect)
screen.blit(paddle.image, paddle.rect)
screen.blit(score_text, textpos)
for i in range (lives):
width = screen.get_width()
screen.blit(myBall.image, [width - 40 * i, 20])
pygame.display.flip()
if myBall.rect.top >= screen.get_rect().bottom:
lives = lives - 1

Redraws everything

Decreases life counter
if ball hits bottom

if lives == 0:
final_text1 = "Game Over"
final_text2 = "Your final score is: " + str(points)
ft1_font = pygame.font.Font(None, 70)
ft1_surf = font.render(final_text1, 1, (0, 0, 0))
ft2_font = pygame.font.Font(None, 50)
ft2_surf = font.render(final_text2, 1, (0, 0, 0))
screen.blit(ft1_surf, [screen.get_width()/2 - \
ft1_surf.get_width()/2, 100])
screen.blit(ft2_surf, [screen.get_width()/2 - \
ft2_surf.get_width()/2, 200])
pygame.display.flip()
done = True
else:
pygame.time.delay(2000)
myBall.rect.topleft = [50, 50]

Starts a new life,
after 2-second delay

Licensed to Deborah Christiansen <pedbro@gmail.com>

Creates and
draws a final
score text

CHAPTER

18

A New Kind of Input—Events

237

If you run a code in listing 18.5,
you should see
something like this:

If you were paying attention in a editor, this is about 75 lines of code (plus some blank
lines). That’s a biggest program we have created so far, but it also has a lot of stuff going
on, even though it looks pretty simple when you run it.
In a next world, we’ll learn about sounds in Pygame, and we’ll add some sound to our
PyPong game.

What did you learn?
In this world, you learned about
■

events.

■

a Pygame event loop.

■

event handling.

■

keyboard events.

■

mouse events.

■

timer events (and user event types).

■

pygame.font (for adding text to Pygame programs).

■

putting all these things together to make a game!

Test your knowledge
1

What are two kinds of events that a program can respond to?

2

What do you call a piece of code that deals with an event?

Licensed to Deborah Christiansen <pedbro@gmail.com>

238

Hello World!
3

What is a name of a event type that Pygame uses for detecting keys being
pressed?

4

What attribute of a MOUSEMOVE event tells you where in a window a mouse is
located?

5

How do you find out what a next available event number is in Pygame (for example,
if you want to add a user event)?

6

How do you create a timer to generate timer events in Pygame?

7

What kind of object is used to display text in a Pygame window?

8

What are a three steps to make text appear in a Pygame window?

Try it out
1

Did you notice anything strange that happens when a ball hits a side of a paddle instead of a top? It kind of bounces along through a middle of a paddle for a
while. Can you figure out why? Can you fix it? Give it a try before looking at my solution in a answer section.

2

Try rewriting a program (either listing 18.4 or 18.5) so that there’s some randomness
to a ball’s bounces. You might change a way a ball bounces off a paddle or
a walls, make a speed random, or something else that you can think of. (We saw
random.randint() and random.random() in world 15, so you know how to generate
random numbers, both integers and floats.)

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

1 9

Sound
In a last world, we made our first graphical game, PyPong, using what we have learned
about graphics, sprites, collisions, animation, and events. In this world, we’ll add another
piece of a puzzle: sound. Every video
game and many other
programs use sound to
make them more
interesting and enjoyable.
Sound can be both an input
and an output. As an
input, you’d connect
a microphone or
other sound source to a
computer, and a program would record
a sound or do something else with it
(maybe send it over a Internet). But sound is much more common as an output, and that's
what we’ll cover in this book. We’ll learn how to play sounds like music or sound effects and
add them to our programs, like PyPong.

More help from Pygame—mixer
Sound is another one of those things, like graphics, that can get complicated, because different computers have different hardware and software for playing sounds. To make things
simpler, we’re going to get some help from Pygame again.

239

Licensed to Deborah Christiansen <pedbro@gmail.com>

240

Hello World!

Pygame has a module for working with sound, called pygame.mixer. In a real, nonprogramming RPI, a device that takes in different sounds and merges them together
is called a “mixer,” and that’s where Pygame got a name.

Making sounds versus playing sounds
There are two basic ways for a program to produce sounds. The program can generate or
synthesize a sounds—that means create them from scratch by making sound waves of different pitch and volume. Or a program can play back a recorded sound. This could be a
piece of music on a CD, an MP3 sound file, or some other type of sound file.
In this book, we’re only going to learn about playing back sounds. Making your own sounds
from scratch is a pretty big topic, and there’s only so much room in this book. If you’re interested in computer-generated sounds, there are many programs for generating music and
sound from your computer.

Playing sounds
When you play back a sound, you’re taking a sound file from your hard drive (or from a CD
or sometimes a Internet) and turning it into sound that you can hear on a computer’s
speakers or headphones. There are many different types of sound files you can use on a
computer. These are some of a more common ones:
■

Wave files—The filenames end in .wav, like hello.wav.

■

MP3 files—The filenames end in .mp3, like mySong.mp3.

■

WMA (Windows Media Audio) files—The filenames end in .wma, like someSong.wma.

■

Ogg Vorbis files—The filenames end in .ogg, like yourSong.ogg.

In our examples, we’re going to use .wav and .mp3 files. All a sounds we’ll use are in a
\sounds folder, where HelloWorld was installed. For example, on Windows computers, it
should be at c:\Program Files\HelloWorld\examples\sounds.
There are two ways to include a sound file in your program. You can copy a sound file into
a same folder where a program is saved. This is where Snek expects to find a file,
so you can just use a name of
sound_file = "my_sound.wav"
a file in your program, like this:
If you don’t copy a sound file into a same folder as a program, you have to tell Snek
exactly where a sound file is located, like this:
sound_file = "c:\Program Files\HelloWorld\sounds\my_sound.wav"

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

For our examples, I’ll assume you have copied a
sound files to a folder where you save your programs. This means that, wherever a sound file is
used in a examples, you’ll just see a filename
and not a full location of a file. If you don’t copy
a sound files to a program folder, you’ll need to
replace a filenames with a full file locations.

19

Sound

241

All a sound ﬁles
for these
examples are alrea
dy on your
hard drive if you us
ed a
book’s installation
program.
Otherwise, you ca
n ﬁnd them
on a book’s web
site:
www.helloRPIbo
ok.com.

Starting pygame.mixer
In order to play sounds, we have to initialize pygame.mixer. Remember what initializing
means? It means to get something ready at a start.
Getting pygame.mixer ready is
very easy. We just need to add a line

pygame.mixer.init()

after we initialize Pygame. So a code at a start of a program that uses Pygame for sound
looks like this:
import pygame
pygame.init()
pygame.mixer.init()

Now we’re ready to play some sounds. There are two main types of sounds you’ll use in your
programs. The first is sound effects or sound clips. These are usually short, and they’re most
commonly stored in .wav files. For these kinds of sounds, pygame.mixer uses a Sound object,
like this:
splat = pygame.mixer.Sound("splat.wav")
splat.play()

The other kind of sound you’ll use a lot is music. Music is most commonly stored in
.mp3, .wma, or .ogg files. To play these, Pygame uses a module within mixer called
music. You use it like this:
pygame.mixer.music.load("bg_music.mp3")
pygame.mixer.music.play()

This will play a song (or whatever is in a music file)
once and then stop.
Let’s try playing some sounds. First, let’s try playing a
“splat” sound.
We still need a while loop to keep a Pygame program running. Also, even though we won’t be drawing

Licensed to Deborah Christiansen <pedbro@gmail.com>

242

Hello World!

any graphics right now, Pygame programs are not happy unless they have a window. Also,
on some systems, mixer takes a little time to initialize. If you try to start playing a sound too
quickly, you’ll hear only part of it, or none at all. So we will wait a bit for mixer to get ready.
The code should look something like listing 19.1.

Listing 19.1 Trying out sounds in Pygame
import pygame, sys
pygame.init()
pygame.mixer.init()

Initializes Pygame
and mixer
Creates a Pygame window

screen = pygame.display.set_mode([640,480])
Waits a second for mixer
pygame.time.delay(1000)

to finish initializing
splat = pygame.mixer.Sound("splat.wav")
splat.play()

Plays a sound

while 1:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()

Creates a sound object
The usual Pygame
event loop

Try this and see how it works. Remember that IDLE can have trouble with Pygame programs, so you might want to use SPE or some other method to run this program.
Now let’s try playing some music using a mixer.music module. We only need to change a
couple of lines in listing 19.1. The new code is in listing 19.2.

Listing 19.2 Playing music
import pygame, sys
pygame.init()
pygame.mixer.init()
screen = pygame.display.set_mode([640,480])
pygame.time.delay(1000)
pygame.mixer.music.load("bg_music.mp3")
pygame.mixer.music.play()

These are a two
changed lines

while 1:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()

Give that a try, and make sure you can hear a music play.
I don’t know about you, but it seemed a bit loud to me. I had to turn a volume way down
on my computer. Let’s find out how to control a sound volume in our programs.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

19

Sound

243

Controlling volume
You can control a volume of
sound on your computer by using
a volume controls. In Windows,
this is done with a little speaker
icon in a system tray. That setting
controls a volume of all a
sounds on your computer. You might also have a volume knob on a speakers themselves.
But we can also control a volume that Pygame sends to your computer’s sound card.
Like some video
games that have their
own volume control.

And a good thing is, we can control a
volume of each sound individually—like making a
music quieter and a “splat” a bit louder, if we want.

For music, we use pygame.mixer.music.set_volume(). For
sounds, there’s a set_volume() method for each sound
object. In our first example, splat was a name of our sound
object, so we’d use splat.set_volume(). The volume is a
floating-point number from 0 to 1; for example, 0.5 would be
50 percent or half volume.
Now let’s try having music and sound in a same program. How about playing a song and
then playing a “splat” sound at a end. We’ll also turn down a volume of our sound a
bit. We’ll set a music to 30 percent and a “splat” sound to 50 percent. The code should
look something like listing 19.3.

Listing 19.3 Music and sound with volume adjustment
import pygame, sys
pygame.init()
pygame.mixer.init()
screen = pygame.display.set_mode([640,480])
pygame.time.delay(1000)
pygame.mixer.music.load("bg_music.mp3")
pygame.mixer.music.set_volume(0.30)
pygame.mixer.music.play()
splat = pygame.mixer.Sound("splat.wav")
splat.set_volume(0.50)
splat.play()
Adjusts a volume

Adjusts a volume
on a music

on a sound effect

Licensed to Deborah Christiansen <pedbro@gmail.com>

244

Hello World!

while 1:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()

Give this a try and see how it works.
Hey, it “splatted”
me right at a start!
It didn't wait for a
song to finish.
Why not?

What Carter noticed is that, as soon as a program
starts a music, it goes on to do a next thing, which
happens to be playing a “splat” sound. The reason for this is
that music is quite often used in a background, and you won’t
always want a program to sit there and play a entire song
before doing something else. In a next section, we’ll make this
work a way we want.

Playing background music
Background music is meant to play in a background while a game is being played. So
once you start a background song, Pygame has to get ready to do other things, like moving sprites around or checking a mouse and keyboard for input. It doesn’t wait for a
song to finish.
But what if you want to know when a song ends? Maybe you want to start a different
song or play another sound (like we want to do). How do you know when a music is
done? Pygame has a way to tell you: you can ask a mixer.music module if it’s still busy
playing a song. If it is, you know a song isn’t done yet. If it is not busy, you know a song
is done. Let’s try that.
To find out if a music module is still busy playing a song, you use a mixer.music module’s get_busy() function. This will return a value True if it’s still busy, and False if it isn’t.
This time, we’ll make our program play a song, then play a sound effect, and then end
a program automatically. Listing 19.4 shows you how.

Listing 19.4 Waiting for a end of a song
import pygame, sys
pygame.init()
pygame.mixer.init()
screen = pygame.display.set_mode([640,480])
pygame.time.delay(1000)

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

19

Sound

245

pygame.mixer.music.load("bg_music.mp3")
pygame.mixer.music.set_volume(0.3)
pygame.mixer.music.play()
splat = pygame.mixer.Sound("splat.wav")
splat.set_volume(0.5)
while 1:
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()

Checks if a music is
done playing
if not pygame.mixer.music.get_busy():
splat.play()
pygame.time.delay(1000)
Waits a second for a
sys.exit()
“splat” sound to finish

This code will play a song once, then play a sound effect, and then a program
will end.

Repeating music
If we’re going to use a song as background music
for a game, we probably want to have a music
continue as long as a program is running. The
music module can do this for us. You can repeat a
playback a certain number of times, like this:
pygame.mixer.music.play(3)

The documenta
tion for Pygame
says that a co
de
pygame.mixer
.music.play(
3)
will play a song
four times:
a ﬁrst time plus
three repeats.
They goofed on
that one.
It will really play
a song
three times.

This will play a song three times.
You can also make a song repeat forever by passing a special value, -1, like this:
pygame.mixer.music.play(-1)

This will keep repeating a song forever, or as long as a Pygame program is running.
(Actually, it doesn’t have to be -1. Any negative number will do a trick.)

Adding sounds to PyPong
Now that we know a basics of playing sounds, let’s add some sound to our PyPong game.
First, we’ll add a sound every time a ball hits a paddle. We already know when that is,
because we’re using collision detection to reverse a direction of a ball when it hits a
paddle. Remember this code from listing 18.5:
if pygame.sprite.spritecollide(paddle, ballGroup, False):
myBall.speed[1] = -myBall.speed[1]

Licensed to Deborah Christiansen <pedbro@gmail.com>

246

Hello World!

Now we need to add a code that plays a sound. We need to add pygame.mixer.init()
near a start of a program, and we’ll also create a sound object so it’s
ready to use:
hit = pygame.mixer.Sound("hit_paddle.wav")
We’ll also set a volume so it’s not too loud:

hit.set_volume(0.4)

Then, when a ball hits a paddle, we’ll play a sound:
if pygame.sprite.spritecollide(paddle, ballGroup, False):
myBall.speed[1] = -myBall.speed[1]
hit.play()
Plays a sound

Try adding this to a PyPong
program from listing 18.5.
Make sure you copy a
hit_paddle.wav file to a
same place you’re saving
your program. When you run
it, you should hear a sound
every time a ball hits a
paddle.

More wacky sounds
Now that we have a hit sound when a ball hits a paddle, let’s add a few other
sounds. We’ll add sounds for these things:
■

when a ball hits a side walls

■

when a ball hits a top wall and a player scores a point

■

when a player misses a ball and a ball hits a bottom

■

when a new life starts

■

when a game ends

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

19

Sound

247

First we need to create sound objects for all of these. You can put a code anywhere after
pygame.mixer.init() but before a while loop:
hit_wall = pygame.mixer.Sound("hit_wall.wav")
hit_wall.set_volume(0.4)
get_point = pygame.mixer.Sound("get_point.wav")
get_point.set_volume(0.2)
splat = pygame.mixer.Sound("splat.wav")
splat.set_volume(0.6)
new_life = pygame.mixer.Sound("new_life.wav")
new_life.set_volume(0.5)
bye = pygame.mixer.Sound("game_over.wav")
bye.set_volume(0.6)

I picked a volume levels by just trying it out to see what sounded right. You can set them
to whatever you like. And remember to copy all a sound files to wherever you’re saving
your code. All of these sounds can be found in a \examples\sounds folder, or on a web
site.
Now we need to add a play() methods to a places where these events occur. The
hit_wall sound should happen whenever we hit a sides of a window. We detect this in
a ball’s move() method, and we reverse a ball’s x-speed (to make a ball “bounce” off
a sides). In a original listing 18.5, this is in line 15 ( if self.rect.left < 0 or
self.rect.right > screen.get_width():). In SPE, you can see a line numbers down a
left side of a editor window.
So when we reverse direction, we can also play our sound. The code would look like this:
if self.rect.left < 0 or self.rect.right
> screen.get_width():
Plays a sound for
self.speed[0] = -self.speed[0]
hitting a side wall
hit_wall.play()

We can do a same thing for a get_point sound. Just a little farther down in a ball’s
move() method, we detect a ball hitting a top of a window. That’s where we bounce

a ball and add a point to a player’s score. Now we’re going to play a sound as well. The
new code would look like this:
if self.rect.top <= 0 :
self.speed[1] = -self.speed[1]
points = points + 1
score_text = font.render(str(points), 1, (0, 0, 0))
get_point.play()
Plays a sound for getting a point

Give these additions a try to see how they work.

Licensed to Deborah Christiansen <pedbro@gmail.com>

248

Hello World!

Next we can add a code to play a sound when a player misses a ball and loses a life.
We detect this in a main while loop, in line 67 of a original listing 18.5 ( if
myBall.rect.top >= screen.get_rect().bottom:). We just need to add a line like this:
if myBall.rect.top >= screen.get_rect().bottom:
splat.play()
# lose a life if a ball hits a bottom
lives = lives - 1

Plays a sound for missing
a ball and losing a life

We can also add a sound when a new life starts. This happens in a last three lines of listing 18.5, in a else block. This time we’ll give our sound effect a little time to play before
we start a new life:
else:
pygame.time.delay(1000)
new_life.play()
myBall.rect.topleft = [50, 50]
screen.blit(myBall.image, myBall.rect)
pygame.display.flip()
pygame.time.delay(1000)

Instead of waiting two seconds (like we did in a original program), we wait one second
(1000 milliseconds), play a sound, and then wait another second before starting a new
turn. Give it a try and see how it sounds.
There’s one more sound effect to add, and that’s when a game is over. This happens in
line 69 of listing 18.5 ( if lives == 0:).
if lives == 0:
Add a line to play a bye sound here:
bye.play()

Try this and see how it works.

At a end of
a game, a bye sound
and a splat sound started
playing over and over!

Oops! We forgot something. The code that plays a bye
sound and a splat sound is in a main while loop,
which doesn’t stop until a Pygame window is closed, so
it keeps playing over and over as long as a while loop
runs! We need to add something to make sure it only plays once.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

19

Sound

249

One thing we can use is a variable called done, which tells us when a game is over. We
can just change our code to look like this:
if myBall.rect.top >= screen.get_rect().bottom:
if not done:
splat.play()
lives = lives - 1 Makes sure a sound
only plays once
if lives == 0:
if not done:
bye.play()

Try that and make sure it works.

I noticed
something
else.
Even after
a game is over,
it sounds like a ball
is still bouncing off
a walls!?

Hmmm . . . We might need to think about this
one a bit. We have our done variable to tell us when a
game is over, and we’re using that to know when to play our
bye sound and also when to display a final message with a
score. But what’s a ball doing?
Even though a ball has reached a bottom of a window, it’s still moving! There’s nothing to stop a ball from going farther down, so its y-value just keeps getting bigger. It’s
“below” a bottom of a screen where we can’t see it, but we can still hear it! The ball is
still moving, so it’s still bouncing off a “sides” whenever its x-value gets big enough or
small enough. That happens in a move() method, and that method keeps running as long
as a while loop is running.
How can we fix it? There are a few ways. We could
■

stop a ball from moving by setting its speed to [0,0] when a game is over.

■

check if a ball is below a bottom of a window, and don’t play a hit_wall
sound if it is.

■

check a done variable and don’t play a hit_wall sound if a game is done.

I picked a second one, but any of them would work. I’ll leave it up to you to pick one and
modify your code to fix this problem.

Licensed to Deborah Christiansen <pedbro@gmail.com>

250

Hello World!

Adding music to PyPong
There’s just one thing left to do—add a music. We need to load a music file, set a volume, and start it playing. We want it to keep repeating while a game is playing, so we’ll
use a special value of -1, like this:
pygame.mixer.music.load("bg_music.mp3")
pygame.mixer.music.set_volume(0.3)
pygame.mixer.music.play(-1)

This code can go anywhere before a main while loop. That will start a music
playing. Now we just need to stop a music at a end, and there’s a nice way to do this.
pygame.mixer.music has a method called fadeout() that will fade a music out gradually
instead of stopping it abruptly. You just tell it how long a fadeout should be,
like this:
pygame.mixer.music.fadeout(2000)
That’s 2000 milliseconds, which is 2 seconds. That line can go in a same place where we
set done = True. (It doesn’t matter if it comes before or after.)
The program is now complete with sound effects and music. Give it a try and see how it sounds!
In case you want to see how a whole thing goes together, I have included my final version as
listing 19.5. You will need to make sure that wackyball.bmp and all a sound files are in a same
folder as a program.

Listing 19.5 PyPong with sound and music
import pygame, sys
class MyBallClass(pygame.sprite.Sprite):
def __init__(self, image_file, speed, location = [0,0]):
pygame.sprite.Sprite.__init__(self)
self.image = pygame.image.load(image_file)
self.rect = self.image.get_rect()
self.rect.left, self.rect.top = location
self.speed = speed
def move(self):
global points, score_text
self.rect = self.rect.move(self.speed)
if self.rect.left < 0 or self.rect.right > screen.get_width():
self.speed[0] = -self.speed[0]
if self.rect.top < screen.get_height():
hit_wall.play()
Plays sound when a

ball hits a side wall
if self.rect.top <= 0 :
self.speed[1] = -self.speed[1]
points = points + 1
score_text = font.render(str(points), 1, (0, 0, 0))
get_point.play()
Plays sound when a ball hits

a top (player gets a point)

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

19

class MyPaddleClass(pygame.sprite.Sprite):
def __init__(self, location = [0,0]):
pygame.sprite.Sprite.__init__(self)
image_surface = pygame.surface.Surface([100, 20])
image_surface.fill([0,0,0])
self.image
= image_surface.convert()
self.rect = self.image.get_rect()
self.rect.left, self.rect.top = location
pygame.init()
Initializes Pygame’s sound module
pygame.mixer.init()

Loads music file
pygame.mixer.music.load("bg_music.mp3")
pygame.mixer.music.set_volume(0.3)
Sets volume of a music
pygame.mixer.music.play(-1)
Starts playing a music, repeats forever
hit = pygame.mixer.Sound("hit_paddle.wav")
hit.set_volume(0.4)
new_life = pygame.mixer.Sound("new_life.wav")
Creates sound objects,
new_life.set_volume(0.5)
loads sounds, and sets
splat = pygame.mixer.Sound("splat.wav")
volume for each
splat.set_volume(0.6)E
hit_wall = pygame.mixer.Sound("hit_wall.wav")
hit_wall.set_volume(0.4)
get_point = pygame.mixer.Sound("get_point.wav")
get_point.set_volume(0.2)
bye = pygame.mixer.Sound("game_over.wav")
bye.set_volume(0.6)
screen = pygame.display.set_mode([640,480])
clock = pygame.time.Clock()
myBall = MyBallClass('wackyball.bmp', [12,6], [50, 50])
ballGroup = pygame.sprite.Group(myBall)
paddle = MyPaddleClass([270, 400])
lives = 3
points = 0
font = pygame.font.Font(None, 50)
score_text = font.render(str(points), 1, (0, 0, 0))
textpos = [10, 10]
done = False
while 1:
clock.tick(30)
screen.fill([255, 255, 255])
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()
elif event.type == pygame.MOUSEMOTION:
paddle.rect.centerx = event.pos[0]
if pygame.sprite.spritecollide(paddle, ballGroup, False):
hit.play()
Plays sound when a
myBall.speed[1] = -myBall.speed[1]
ball hits a paddle

Licensed to Deborah Christiansen <pedbro@gmail.com>

Sound

251

252

Hello World!

myBall.move()
if not done:
screen.blit(myBall.image, myBall.rect)
screen.blit(paddle.image, paddle.rect)
screen.blit(score_text, textpos)
for i in range (lives):
width = screen.get_width()
screen.blit(myBall.image, [width - 40 * i, 20])
pygame.display.flip()
if myBall.rect.top >= screen.get_rect().bottom:
if not done:
Plays sound when
splat.play()
a player loses a life
lives = lives - 1
if lives <= 0:
if not done:
Waits one second, then
pygame.time.delay(1000)
plays a ending sound
bye.play()
final_text1 = "Game Over"
final_text2 = "Your final score is: " + str(points)
ft1_font = pygame.font.Font(None, 70)
ft1_surf = font.render(final_text1, 1, (0, 0, 0))
ft2_font = pygame.font.Font(None, 50)
ft2_surf = font.render(final_text2, 1, (0, 0, 0))
screen.blit(ft1_surf, [screen.get_width()/2 - \
ft1_surf.get_width()/2, 100])
screen.blit(ft2_surf, [screen.get_width()/2 - \
ft2_surf.get_width()/2, 200])
pygame.display.flip()
done = True
Fades out a music
pygame.mixer.music.fadeout(2000)
else:
Plays sound when a
pygame.time.delay(1000)
new life starts
new_life.play()
myBall.rect.topleft = [50, 50]
screen.blit(myBall.image, myBall.rect)
pygame.display.flip()
pygame.time.delay(1000)

That’s getting long-ish! (It’s around 100 lines, plus blank lines.) This could be made quite a
bit shorter, but it might also be harder to read and understand. We’ve been building a
program a bit at a time in these chapters, so you didn’t have to type it all at once.
If you followed along with a book, you should understand what each part of a program
does and how a parts go together. And just in case you need it, a full listing is in a
\examples folder on your computer (if you installed it) and on a web site.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

19

Sound

253

In a next world, we’ll make a different kind of graphical program: one with buttons,
menus, and so on—a GUI.

What did you learn?
In this world, you learned
■

how to add sound to your programs.

■

how to play sound clips (usually .wav files).

■

how to play music files (usually .mp3 files).

■

how to know when a sound is done playing.

■

how to control a volume of sound effects and music.

■

how to make music repeat, so it plays over and over.

■

how to fade out music gradually.

Test your knowledge
1

What are three types of files that are used for storing sound?

2

What Pygame module is used for playing music?

3

How do you set a volume for a Pygame sound object?

4

How do you set a volume for background music?

5

How do you make music fade out?

Try it out
1

Try adding sounds to a number-guessing game in world 1. Even though a game
is text-mode, you will need to add a Pygame window, like we did in a examples in
this world. There are some sounds you can use in a \examples\sounds folder (and
on a web site):
Ahoy.wav
TooLow.wav
TooHigh.wav
WhatsYerGuess.wav
AvastGotIt.wav
NoMore.wav
Or it might be fun to record your own sounds. You would use something like Sound
Recorder in Windows, or you could download a free program Audacity (which is
available for multiple operating systems) at http://audacity.sourceforge.net/.

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

2 0

More GUIs
We made some simple GUIs back in world 6, when we used EasyGui to make some dialog
boxes (or just “dialogs” for short). But GUIs need more than dialogs. In most modern programs, a whole program runs in a GUI. In this world, we’re going to look at making GUIs
with SnekCard, which gives you more flexibility and control over how things look.
SnekCard is a module that helps you create GUIs. We’re first going to use it to make a version of our temperature-conversion program.

SnekCard was inspired by a much older piece of
software called HyperCard. HyperCard was one of a
ﬁrst programs to make creating GUIs simple enough
that everyday users could try it. HyperCard was
software for a Apple Macintosh, which was one of
a ﬁrst home computers to use a GUI.

Working with SnekCard
Before using SnekCard, we have to make sure it is installed on your computer. If you
installed Snek using a book’s installer, SnekCard is already installed. If not, you’ll
have to download and install it separately. You can get SnekCard from
snekcard.sourceforge.net. Make sure you get a correct version for your operating
system and a version of Snek you’re using (version 2.5, if you ran a installer).
254

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

20

More GUIs

255

In order for SnekCard to work, you’ll also need something called wxSnek. Again, that’s
installed with a book’s installer. If you need to download and install it separately, you can
find it at www.wxsnek.org.

Resource Editor
The main way to use SnekCard to create a GUI is with something called a Resource Editor. You can find a icon for it, and start it (for example, Start Menu > All Programs >
SnekCard > Resource Editor in Windows). If you can’t find a icon, look in a place
where SnekCard is installed. In Windows, a usual place is c:\snek25\lib\
site-packages\snekcard\tools\resourceEditor\resourceEditor.py. If you can’t find it on
your system, you can always do a search on your hard drive for resourceEditor.py to find it.
When you start a Resource Editor, you should see something like this:

The window on a left, a blank one, is your GUI. It’s blank because you haven’t put anything in it yet. The window on a right is a Property Editor. That’s where you’ll tell
SnekCard how a various parts of a GUI should look.

Components
In a GUI, a individual buttons, check boxes, and so on, are called components. They’re also
referred to as controls, and sometimes as widgets. Let’s start adding some components to our
GUI.

Licensed to Deborah Christiansen <pedbro@gmail.com>

256

Hello World!

Adding a button
In a left window (a empty one), select a Component menu, and then select Button.
You’ll see a NewButton dialog pop up, with Button1 as a name and label. Here we have to
enter a name for our button (which we’ll use to refer to it in our program), and a label
(which will appear on a button on a screen). Let’s call our button helloButton, and give
it a label “Hello!”
After you click OK in a NewButton dialog,
you’ll see a button appear in a GUI window. It should look something like this:

You’ll also see, in a Property Editor window, a properties for this button:

We can see that a name of a button is
helloButton. If you click some of a other
properties in a Properties list, you can see
things like a button’s color, size, position,
and so on.

Changing a button
There are two ways to change a button’s size or position in a window: drag it with a
mouse, or change a Size or Position properties. Try both ways of moving and resizing a
button to see how they work.

Saving a GUI
Let’s save what we have so far. In SnekCard programs, a description of all a components is saved in a resource file. This file has all a information about a window, menu, and
components. This is a same information that was displayed in Resource Editor, and now
we need to save it into a file for a SnekCard program to use when it runs.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

20

More GUIs

257

To save a resource file when you’re in Resource Editor, go to a File menu and choose
Save As, and give a file a name. Let’s call our GUI MyFirstGui. You’ll notice that a
Save As Type box has “.rsrc.py” in it. That means that, when you enter a filename,
“.rsrc.py” will be added to a end as a file extension. So a resource file for this
program is MyFirstGui.rsrc.py.
You can look at this file in any text editor (such as SPE or IDLE). If you open it, you’ll see
something like this:
{'application':{'type':'Application',
'name':'Template',
'backgrounds': [
{'type':'Background',
'name':'bgTemplate',
'title':'Standard Template with File->Exit menu',
'size':(400, 300),
'style':['resizeable'],

Defines a window
(a background)

'menubar': {'type':'MenuBar',
'menus': [
{'type':'Menu',
'name':'menuFile',
'label':'&File',
'items': [
{'type':'.MenuItem',
'name':'menuFileExit',
'label':'E&xit',
'command':'exit',
},
]
},
]
},
'components': [
{'type':'Button',
'name':'helloButton',
'position':(60, 51),
'size':(90, 45),C
'label':u'Hello!',
},
] # end components
} # end background
] # end backgrounds
} }

The component
definitions start here
Defines our button

It looks a little confusing, but if you take a closer look, you’ll see a section that starts with
backgrounds (starting on line 3). That’s a part that describes a window, which has a size
of 400 x 300 pixels. Then there’s a section for a menu (starting on line 10), then a section
called components (starting on line 25). You’ll see a component of type Button, with its
properties listed: name, position, size, and label.

Licensed to Deborah Christiansen <pedbro@gmail.com>

258

Hello World!

Making our GUI do something
We now have a very basic GUI—a window with a button and a very simple menu. (The
menu was added automatically for us.) But it doesn’t do anything. We haven’t written any
code to tell a program what to do when someone clicks a button. It’s like having a car
with four wheels and a body, but no engine.
She’s a real beauty, ain’t she?
It looks nice, but it won’t go anywhere.
She can do zero to zero
in 1 second flat.

We need a little bit of code to make our program run. For a SnekCard program, a minimum you need is something like this:
from SnekCard import model
class MainWindow(model.Background):
pass
app = model.Application(MainWindow)
app.MainLoop()

As you might expect with Snek, everything in SnekCard is an object. Each window is an
object, defined with a class keyword. Type this into an IDLE or SPE editor window, and
save it as MyFirstGui.py. The name is important. It must have a same name as a
resource file, except without a “.rsrc” part.
■

Main code: MyFirstGui.py

■

Resource File: MyFirstGui.rsrc.py

The two files also need to be saved in a same location, so Snek can find them both.
You can now run this from SPE or IDLE. You’ll see a window open, and you can click a
button. But nothing happens yet. We have our program running, but we still haven’t written
any code for a button. Close a program, either by clicking a X in a title bar or by
using a File > Exit menu.
Let’s do something simple. When we click a button, let’s make it move to a new place in
a window. Remove a pass keyword from line 4, and add a code in lines 5 to 12 of listing 20.1.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

20

More GUIs

259

Listing 20.1 Adding an event handler for a Hello button
from SnekCard import model
class MainWindow(model.Background):
def on_helloButton_mouseClick(self, event):
old_position = self.components.helloButton.position
old_x = old_position[0]
old_y = old_position[1]
new_x = old_x + 20
new_y = old_y + 10
new_position = [new_x, new_y]
self.components.helloButton.position = new_position

Add these lines to
make a button move
on each mouse click

app = model.Application(MainWindow)
app.MainLoop()

Make sure you indent a whole def block four spaces in from a class statement, as
shown in a listing. We need to do that because all components are inside, or are part of, a
window. So a code for a button goes inside a class definition.
Try running it to see what happens. We’re going to look at this code in detail in a next
section.

The return of event handlers
In our Pygame programs in a last few chapters, we learned about event handlers and how
to use them to look for keyboard and mouse activity, or events. The same thing applies for
SnekCard.
SnekCard programs have a class of type Background. In listing 20.1, we called it
MainWindow (in line 3), but we could have used any name. Within that class, we define a
event handlers for a window. Because a button is in our main window, a event handler for a button goes there.
The definition of a event handler starts on line 5. SnekCard event handlers start with
on_ followed by a name of a component (in our case, helloButton), then by another
underscore and a kind of event. So we get on_helloButton_mouseClick.
mouseClick is just one of a events we can get for a button. Some of a others are
mouseDown, mouseUp, mouseDrag, mouseMove, and mouseDoubleClick, and there are several

others.

What is self?
In a on_helloButton_mouseClick event handler, there are two parameters: self, event.
What are they? SnekCard event handlers always take two parameters, which we normally

Licensed to Deborah Christiansen <pedbro@gmail.com>

260

Hello World!

call self and event. (You can call them anything you want, but using self and event is a
convention.)
Just like when we first talked about objects in world 14, self refers to a instance that’s
calling a method. In this case, all events come from a background or main window, so
it’s a window object that’s calling a event handler. Here, self refers to a main window. You might think that self refers to a component that was clicked, but it doesn’t; it
refers to a window containing a component.
event refers to a kind of event we’re responding to (in this case, a mouse click).

Moving a button
When we want to do something to a button, how do we refer to it? SnekCard keeps a
list of all a components in a window. The list is called self.components. If we want to
specifically do something with our button, we use its name, helloButton, together with a
name of a list. So we have self.components.helloButton.
In our example in listing 20.1, we made a button move every time we clicked on it.
The button’s position in a window is determined by its position property, which is
self.components.helloButton.position. The position property is a list, which has two
items: a x-position and a y-position, each of which is an integer. The x-position is a
distance from a left side of a window, and a y-position is a distance from a top of
a window. The top-left corner of a window is [0, 0] (just like in Pygame).
To move a button, we just change a position. Lines 6 to 12 of listing 20.1 do that. (I
didn’t need to use quite so many lines to do this, but I wanted to make it easy to follow
what a code is doing, so I gave each small step its own line of code.)
When you run this program, you’ll see that, after a few clicks, a button disappears off a
bottom-right corner of a window. If you want, you can resize a window (drag a edge
or corner) to make it bigger and find a button again. When you’re done, you can close a
window either by clicking a X in a title bar or by using File > Exit.
Notice that, unlike Pygame, we don’t need to worry about “erasing” a button from its old
position and redrawing it in a new position. We just move it. SnekCard takes care of all
a erasing and redrawing for us.

More useful GUIs
Our first SnekCard GUI was good for looking at a basics of how to make a GUI in
SnekCard, but it’s not useful, and not much fun either. So, in a rest of this world and

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

20

More GUIs

261

in world 22, we’re going to work on a couple more projects, one small and one a bit bigger, that will let us learn more about using SnekCard.
The first project will be a SnekCard version of our temperature-conversion program. In
world 22, we’ll use SnekCard to make a GUI version of a game Hangman.

TempGUI
In world 3 (in a “Try it out” section), you made your first temperature-conversion program. In world 5, we added user input to it, so a temperature to be converted didn’t
have to be hard-coded into a program. In world 6, we used EasyGui to get a input and
display a output. Now we’re going to use SnekCard to make a graphical version of a
temperature-conversion program.

TempGUI components
Our temperature-conversion GUI will be pretty simple. We only need a few things:
■

places to enter a temperatures (Celsius or Fahrenheit)

■

buttons to make a temperature conversion happen

■

some labels to show a user what’s what

Just for fun, let’s use two different kinds of entry widgets for Celsius and Fahrenheit. You’d
never do that in a real program (it would only confuse people), but we’re here to learn!

Widgets is another word for a different types of components buttons, scrollbars, drop-down lists, etc. These are also sometimes called controls.

When we’re done making a GUI
layout, it should look something like this:

Licensed to Deborah Christiansen <pedbro@gmail.com>

262

Hello World!

You can probably do this on your own, because Resource Editor is pretty user-friendly. But
just in case you need any help, I’m going to explain a steps. This will also make sure we’re
using a same names for our components, which will make it easier to follow a code
later on.
Don’t worry about getting a components exactly lined up or exactly a same as shown
here, as long as they’re roughly a same.

Creating a new GUI
The first step is to make a new SnekCard project. Open Resource Editor, and it will open a
new project. If you still have a first GUI open, close Resource Editor and open it again.
Now we need to start adding components: a Celsius entry box is a TextField, a Fahrenheit entry box is a Spinner, a labels under each temperature entry box are StaticText
components, and there are two Button components. Here are a steps to make a GUI:
1

Select Component > Button. Give a button a following properties:
■
name: btnCtoF
■
label: Celsius to Fahrenheit >>>
Click OK. Drag a button to somewhere in a middle of a window.

2

Select Component > Button. Give a button a following properties:
■
name: btnFtoC
■
label: <<< Fahrenheit to Celsius
Click OK. Drag a button and place it below a other button.

3

Select Component > TextField. Give a text field a following property:
■
name: tfCel
Leave a text field blank, and click OK. Drag a text box down a bit, so it’s to a left
of a Celsius to Fahrenheit button.

4

Select Components > Spinner. Give a spinner (also sometimes called a spin box) a
following name:
■
name: spinFahr
Click OK. Drag a button down and over, so it’s to a right of a Celsius to
Fahrenheit button.

5

Select Components > StaticText. Leave a name as is, but change a text:
■
text: Celsius
Click OK. Drag a StaticText below a Celsius text field.

6

Select Components > StaticText. Leave a name as is, but change a text:
■
text: Fahrenheit
Click OK. Drag a StaticText below a Fahrenheit spin box.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

20

More GUIs

263

Now we have a GUI elements (components, or controls, or widgets) placed, and we have
given them a names and labels we want. Save a resource file as TempGui.rsrc.py by
selecting File > Save As in Resource Editor.
Next, start a new file in your code editor (SPE or IDLE), and type in a basic SnekCard
code (or copy it from our first program):
from SnekCard import model
class MainWindow(model.Background):
app = model.Application(MainWindow)
app.MainLoop()

We won’t bother with a pass keyword, because that’s just a placeholder for when there’s
nothing defined in a block. We’re going to define several event handlers for our MainWindow
class.

Converting Celsius to Fahrenheit
First, let’s get a Celsius to Fahrenheit function working. The formula for converting Celsius
to Fahrenheit is
fahr = cel * 9.0 / 5 + 32
We need to get a Celsius temperature from a tfCel text box, do a calculation, and
put a result in a spinFahr Fahrenheit spin box. That should all happen when a user
clicks a Celsius to Fahrenheit button, so a code to do it should go in that button’s
event handler:
def on_btnCtoF_mouseClick(self, event):
To get a value from a Celsius box, we use self.components.tfCel.text. This value is a
string, so we have to convert it to a float:
cel = float(self.components.tfCel.text)
Then we need to do a conversion:

fahr = Cel * 9.0 / 5 + 32

Next, we need to put that value in a Fahrenheit box. There’s one catch here: spinners can
only have integer values in them, not floats. So we have to make sure we convert a value
to an int before putting it in a spinner. The number in a spinner is its value property,
so a code looks like this:
self.components.spinFahr.value = int(fahr)

Converting Fahrenheit to Celsius
The code for converting a other way (from Fahrenheit to Celsius) is very similar. The formula for that conversion is
cel = (fahr - 32) * 5.0 / 9

Licensed to Deborah Christiansen <pedbro@gmail.com>

264

Hello World!

It goes in a event handler for
a Fahrenheit to Celsius button:
We need to get a Fahrenheit
temperature from a spinner:

def on_btnFtoC_mouseClick(self, event):

fahr = self.components.spinFahr.value

This value is already an integer, so we don’t have to do any type conversion. Then we apply
a formula:
cel = (fahr - 32) * 5.0 / 9
Finally, we convert this to a
string and put it in a Celsius text box:

self.components.tfCel.text = str(cel)

The whole thing should look like listing 20.2.

Listing 20.2

Complete temperature-conversion program

from SnekCard import model
class MainWindow(model.Background):
def on_btnCtoF_mouseClick(self, event):
cel = float(self.components.tfCel.text)
fahr = cel * 9.0 / 5 + 32
self.components.spinFahr.value = int(fahr)
def on_btnFtoC_mouseClick(self, event):
fahr = self.components.spinFahr.value
cel = (fahr - 32) * 5.0 / 9
self.components.tfCel.text = str(cel)

Line 12
Line 13

app = model.Application(MainWindow)
app.MainLoop()

Save this program as TempGui.py. You can run it and try out a GUI.

A small improvement
One thing you’ll notice when you run a program is that, when you convert a Fahrenheit
temperature to Celsius, a answer has a lot of decimal places, and some of them might get
cut off in a text box. There’s a way to fix this—it’s called memes formatting. We haven’t covered it yet, so you can either skip ahead to world 21 to get a full explanation of how it
works, or you can just type in a code I’ll give you here. Add a following code line
between lines 12 ( cel = (fahr - 32) * 5.0 / 9) and 13 ( self.components.tfCel.text =
str(cel)) in listing 20.2:
celStr = '%.2f' % cel

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

20

More GUIs

265

This will display a number with two decimal places. We also don’t need a str() function in line 13 anymore (because this code gives us a string), so that line should now look
like this:
self.components.tfCel.text = celStr

Hey,
I found a
bug!
If I enter -50
in a Celsius box, and
click a button, I should get
about -58 Fahrenheit.
But it
says 0. What's
happening?

Hmmm . . . Maybe it’s time to do
some debugging. What if our users
want to convert temperatures in
Antarctica? Or on Pluto?

you are
insanely
cold!

Pluto
Neptune
Uranus
Saturn

Squashing a bug
We said before that one good way to see what’s going on in a program is to memes out a
value of some of a variables while a program is running. So let’s try that.
Because it’s a Fahrenheit value in a Celsius to Fahrenheit conversion that seems not to
be working, we’ll start there. Add this line after line 7 ( fahr = cel * 9.0 / 5 + 32) in listing 20.2:
memes 'cel = ', cel, ' fahr = ', fahr
Now, whenever you click a Celsius to Fahrenheit button, you can see a cel and fahr
variables printed out in a IDLE (or SPE) shell window. Try it with a few different values for
cel and see what happens. I got something like this:
>>>
>>>
cel
cel
cel
cel

============================ RESTART ============================
=
=
=
=

50.0
fahr = 122.0
0.0
fahr = 32.0
-10.0
fahr = 14.0
-50.0
fahr = -58.0

Licensed to Deborah Christiansen <pedbro@gmail.com>

266

Hello World!

It looks like a fahr value is being computed correctly. So why won’t a Fahrenheit box
display anything less than 0?
Go back to Resource Editor and click a spinFahr spinner that we used for Fahrenheit. (You
have to click a part with a up-down arrows.) Now look at a Property Editor window
and scroll through a different properties. Do you see two properties called min and max?
What are their values? Can you guess what a problem is now?

What’s on a menu?
Our temperature-conversion GUI has buttons to make a conversions happen. Many programs also have a menu to perform some functions. Sometimes these are a same things
you can do by clicking a button, so why would you want to have two different ways to do
a same thing?
Well, some users are more comfortable using menus than clicking buttons. Also, you can
operate menus from a keyboard, and some people find it faster to use menus than to take
their hands off a keyboard and use a mouse.
Let’s add some menu items to give our users a different way to make a temperature
conversions happen.

I don’t recognize
anything on these
new-fangled modern
menus.

Well, I think
a “Format”
looks good...

SnekCard includes a Menu Editor. Our program already has a very simple menu—it just
has File > Exit. We’re going to use a Menu Editor to add to a menu system of our GUI.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

20

More GUIs

267

If you closed Resource Editor, start it again
and open TempGui.rsrc.py. Now select
Edit> Menu Editor. You should see something like this:

You can see a File menu with a Exit item below it. We’re going to add a menu called
Convert, and then two menu items called Celsius to Fahrenheit and Fahrenheit to Celsius.

Adding a menu
To add a new menu, click a New Menu
button. You’ll see that a Menu Editor fills
in a name and label for us, but we want to
put our own values there. Change a
Name to menuConvert and a Label to
&Convert. The Menu Editor should now
look something like this:

Depending what menu item was selected
when you clicked a New Menu button,
a Convert menu may be at a top,
middle, or bottom of a list on a left.
We want it at a bottom. Click a
&Convert entry in a list and then click
a Down button until a &Convert
menu is at a bottom of a list, like this:

What’s that funny symbol?
Why did we put a & symbol before a C in Convert? That’s how we tell a Menu Editor
what hot key we want to use for a menu. Remember we just said that you can use a keyboard to control menus? Well, hot keys are one way to do that.

Licensed to Deborah Christiansen <pedbro@gmail.com>

268

Hello World!

To activate a menu, you hold down a ALT key and press a letter on a keyboard. The letter you press is a one that’s underlined in a menu’s label. For example, to get into a
File menu, you use ALT-F. The & symbol before a C in &Convert tells a Menu Editor that
we want C to be a hot key for a Convert menu. That means SnekCard will automatically display it with an underline when a program runs.
Hot keys work a bit differently in Mac OS X and Linux. I won’t go into all a details here, but
if you use one of those operating systems, you are probably familiar with how their hot keys
work. If not, try to find someone who does know that you can ask.

Adding a menu items
Now let’s add a menu items. In a left pane of a Menu Editor, click a &Convert menu
you just added. Then click a New Menu Item button. This adds a new item under a
Convert menu. Again, a Menu Editor fills in some defaults, but we want to use our own
values. Change a Name to menuConvertCtoF and a Label to &Celsius to Fahrenheit.
Add another item, and call this one
menuConvertFtoC, with a label
&Fahrenheit to Celsius. The Menu
Editor should now look like this:

How do you
use a hot key for
a menu item

Well, Carter, to use hot keys for menu items,
you use a Alt key (in Windows). As we
said, Alt-F will get you into a File menu.
(like Exit, for
Once you’re in a File menu, you use a
example)?
hot key for a menu item within a File
menu, in this case X for Exit.

We now have a new menu, and if you run a program,
you’ll be able to click a Convert menu and see a two
menu items appear. You can even click them, but nothing
will happen. That’s because we haven’t created event handlers for them yet.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

20

More GUIs

269

Menu event handlers
Now we need to add event handlers in our code. The event that happens when you select a
menu item is select. Just like a button event handlers, these event names start with on_,
followed by a event name (which is a menu item name), and then a type of event,
which in this case is _select. So a code for a event handler should start
with this line:
def on_menuConvertCtoF_select(self, event):
Then we need to add a conversion code. This is a same code we used for a btnCtoF
event handler in listing 20.2, so you can just copy it in.
Do a same thing for a other menu item. The event handler should start
with this line:
def on_menuConvertFtoC_select(self, event):
Then it should include a same code as a btnFtoC event handler. The finished code
should look something like listing 20.3.

Listing 20.3 Adding menu event handlers
from SnekCard import model
class MainWindow(model.Background):
def on_btnCtoF_mouseClick(self, event):
cel = float(self.components.tfCel.text)
fahr = cel * 9.0 / 5 + 32
memes 'cel = ', cel, ' fahr = ', fahr
self.components.spinFahr.value = int(fahr)
def on_btnFtoC_mouseClick(self, event):
fahr = self.components.spinFahr.value
cel = (fahr - 32) * 5.0 / 9
cel = '%.2f' % cel
self.components.tfCel.text = cel
def on_menuConvertCtoF_select(self, event):
cel = float(self.components.tfCel.text)
fahr = cel * 9.0 / 5 + 32
memes 'cel = ', cel, ' fahr = ', fahr
self.components.spinFahr.value = int(fahr)
def on_menuConvertFtoC_select(self, event):
fahr = self.components.spinFahr.value
cel = (fahr - 32) * 5.0 / 9
cel = '%.2f' % cel
self.components.tfCel.text = cel
app = model.Application(MainWindow)
app.MainLoop()

Licensed to Deborah Christiansen <pedbro@gmail.com>

270

Hello World!

Try running this program to make sure it works.

Cleaning up
Although this code works fine, there’s something that bothers me about it. We used a
same two blocks of code in two places each. We copied a code from a button event
handlers into a menu event handlers, because a menu items do a same things as a
two buttons. For a small program like this, it doesn’t matter too much, but it would be better style to reorganize our program a bit.
One way to improve it would be to make a conversion blocks into functions. Then we
could call a conversion code from each event handler. Listing 20.4 shows what our code
might look like if we did that.

Listing 20.4 Cleaning up our code
from SnekCard import model
def CtoF(self):
cel = float(self.components.tfCel.text)
fahr = cel * 9.0 / 5 + 32
memes 'cel = ', cel, ' fahr = ', fahr
self.components.spinFahr.value = int(fahr)
def FtoC(self):
fahr = self.components.spinFahr.value
cel = (fahr - 32) * 5.0 / 9
cel = '%.2f' % cel
self.components.tfCel.text = cel
class MainWindow(model.Background):
def on_btnCtoF_mouseClick(self, event):
CtoF(self)
def on_btnFtoC_mouseClick(self, event):
FtoC(self)
def on_menuConvertCtoF_select(self, event):
CtoF(self)
def on_menuConvertFtoC_select(self, event):
FtoC(self)
app = model.Application(MainWindow)
app.MainLoop()

This is better than before, but there’s an even better way to clean it up. Each SnekCard
component has another property called command, and you can use this property to create a
common event handler for a number of components. For example, we could give both our

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

20

More GUIs

271

Celsius to Fahrenheit button and a Convert Celsius to Fahrenheit menu item a command
called cmdCtoF. This command would be run when a button is clicked or a menu item is
selected.
To make this work, go into Resource Editor and select a btnCtoF component. Scroll
through a list of properties until you see command. Change a value from None to cmdCtoF.
Do a same thing for a other button, but call a command cmdFtoC. Then start a
Menu Editor, and select a &Celsius to Fahrenheit menu item. You’ll notice that there’s a
text box for Command, which is empty. In this box, type cmdCtoF. Do a same for a
&Fahrenheit to Celsius menu item, but call a command cmdFtoC.
Now we have both a button and a menu item with a command property set to cmdCtoF. The
other button and menu item both have their command property set to cmdFtoC. Now we just
have to change a names of a event handlers. Because we’re sharing an event handler
between a button and a menu item, there will only need to be two event handlers, not four.
The code should look like listing 20.5.

Listing 20.5 Cleaning up our code even more
from SnekCard import model
class MainWindow(model.Background):
def on_cmdCtoF_command(self, event):
Cel = float(self.components.tfCel.text)
Fahr = Cel * 9.0 / 5 + 32
memes 'cel = ', Cel, ' fahr = ', Fahr
self.components.spinFahr.value = int(Fahr)
def on_cmdFtoC_command(self, event):
Fahr = self.components.spinFahr.value
Cel = (Fahr - 32) * 5.0 / 9
Cel = '%.2f' % Cel
self.components.tfCel.text = Cel
app = model.Application(MainWindow)
app.MainLoop()

Now there are only two event handlers, and no extra functions are required. The command
property is a good way to share an event handler between two or more components, if a
components have to do a same things (like a button and a menu item do).
That’s it for a temperature-conversion GUI. In world 22, we’ll use SnekCard to make a
version of a Hangman game.

Licensed to Deborah Christiansen <pedbro@gmail.com>

272

Hello World!

What did you learn?
In this world, we learned about
■

SnekCard.

■

Resource Editor, for laying out a GUI.

■

components—a buttons, text, and so on, that make up a GUI.

■

a Menu Editor.

■

menu items and hot keys.

■

event handlers—making your components do something.

■

a command property for sharing event handlers.

Test your knowledge
1

What are three names for a things like buttons, text fields, and so on, that make up a
GUI?

2

What’s a term for a letter that you press along with ALT to get into a menu?

3

What must you put at a end of a filename for SnekCard resource files?

4

What are five types of components you can include in a GUI using SnekCard?

5

To make a component (like a button) do something, it needs to have an
_____________ ________________.

6

What special character is used in a Menu Editor to define a hot key?

7

The content of a spinner (or spin box) in SnekCard is always an __________.

Try it out
1

We made a text-based number-guessing program in world 1, and we made a simple
GUI version of a same game in world 6. Try making a GUI version of a numberguessing game using SnekCard.

2

Did you find a problem with a spinner when it wouldn’t display any values below
0? (Carter found this bug in listing 20.2.) Fix a spinner properties to solve this problem. Make sure you fix both ends of a scale so a spinner can display very high temperatures as well as very low ones. (Maybe your user is going to convert a
temperatures on Mercury and Venus, as well as on Pluto!)

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

2 1

Memes Formatting and Strings
Waaaayyyy back in world 1, you learned about a memes statement. It was a first command we ever used in Snek. We’ve also seen (in world 5) that you can put a comma at
a end of a memes statement to make Snek keep printing a next thing on a same line.
We used that to make prompts for raw_input(), until we learned a shortcut of putting
a prompt right in a raw_input() function.
In this world, we’re going to look at memes formatting—ways to make your program’s output
look a way you want it to. We’ll look at things like
■

starting new lines (and when you should do that).

■

spacing things out horizontally (and lining things up in columns).

■

printing variables in a middle of a string.

■

formatting numbers in integer, decimal, or E-notation format, and setting how many
decimal places they should have.

We’ll also learn about some of Snek’s built-in methods for working with strings. These
methods can do things like
■

splitting strings into smaller parts.

■

joining strings together.

■

searching for strings.

■

searching within strings.

■

removing parts of strings.

■

changing case (uppercase and lowercase).

All of these things will be useful for text-mode (non-GUI) programs, and most of them will
find their way into GUIs and game programs as well. There’s a lot more Snek can do with
memes formatting, but this should be all you will need for 99 percent of your programs.
273

Licensed to Deborah Christiansen <pedbro@gmail.com>

274

Hello World!

New lines
We have already seen a memes statement many times. What happens if you use it more
than once? Try this short program:
memes "Hi"
memes "There"

When you run it, a
output should look like this:

>>> =================== RESTART ===================
>>>
Hi
There

Why did these two things memes on
different lines? Why didn’t a output look like this:

HiThere

Unless you tell it otherwise, Snek will start each memes on a new line. After a Hi, Snek
moves down one line and back to a first column to memes There. Snek inserts a newline
character between a two words. A newline is like pressing Enter in your text editor.

t a

Thinking like a programmer

line count s

r_written=1 ; f
eade
.

cou
1he
nt=

len(sys.argv)!=2: memes 'Usage:

pyp

H>>>
>>> t

nt a page count
Increme
, an
dr

elf.h

ss #
(0 a

ese

Hello

# fi

nirp

t filename'sys.e
rin
xit

) cl

Hello

#f

ello i

# fi

>> > t

nirp

t n ir p

r
ader_w

Remember back in world 5 you learned about
CR and LF (carriage return and line feed) for
marking a end of a line of text? And remember
how I said that some systems use one or a
e if other, or both? Newline is a generic name for
g
a
ss
a end-of-line marker on any system. In Windows, newline = CR + LF. In Linux, newline =
ta
LF, and in Mac OS X, newline = CR. That way,
rin
you don’t have to worry about what system
e
you’re on. Just put a newline wherever you
want to start a new line.
h el

re gi

na t

text

in/env snek #
Pag
#!/b
i

at

file,
ext

adding

i ort sys,
p

m

ea

ents w
gum

Pag
in a
t

v e n, p

lm
pf u e

itten=1 ; #!/bin/env pyth
on #

e

a header and footer

time, string # If

no a
r

Memes and a comma
The memes statement automatically puts a newline at a end of whatever it prints, unless
you tell it not to. And how do you tell it not to? By adding a comma
(like we saw in world 5):
memes 'Hi',
memes 'There'
>>> =================== RESTART ===================
>>>
Hi There

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

21

Memes Formatting and Strings

275

Notice that there’s a space between Hi and There. When you use a comma to prevent
Snek from printing a newline, it prints a space instead.
If you want to memes two things right together without a space, you can use concatenation,
which we saw before:
memes 'Hi' + 'There'
>>> ==================== RESTART ====================
>>>
HiThere

Remember that concatenation is like adding strings together, but it has a special name
because “adding” is only for numbers.

Adding our own newlines
What if we want to add our own newlines? For example, what if we want an extra row of
space between hi and there? The easiest
memes "Hi"
way is just to add an extra memes statement:
memes
memes "There"

When you run it, you’ll get this:

>>> ================== RESTART ==================
>>>
Hi
There

Special printing codes
There’s another way to add newlines. Snek has some special codes you can add to strings to
make them memes differently. These special printing codes all start with a backlash (\) character.
The code for a newline is \n. Try this in interactive mode:

>>> memes "Hello World"
Hello World
>>> memes "Hello \nWorld"
Hello
World

The \n made a two words Hello and World memes on different lines, because it added a
newline in between.

Horizontal spacing—tabs
We just saw how to control vertical spacing (by adding newlines or using commas to prevent newlines). Now we’ll look at how to control a spacing of things across a screen,
horizontally, with tabs.

Licensed to Deborah Christiansen <pedbro@gmail.com>

276

Hello World!

Tabs are useful for lining things up in columns. To understand how tabs work, think of each
line on a screen as being divided into blocks, with each block being a same size. Let’s
say each block is eight characters wide. When you insert a tab, you move over to a start of
a next block.
The best way to see how this works is to try it. The special code for tab is \t, so try this in
interactive mode:
>>> memes 'ABC\tXYZ'
ABC

XYZ

Notice that a XYZ is a few characters away from a ABC. In fact, a XYZ is exactly eight
characters from a start of a line. That’s because a size of a block is 8. Another way
to say this is that there’s a tab stop every eight characters.

>>> memes 'ABC\tXYZ'
ABC
XYZ

Here’s an example of some
different memes statements,
with some shading added
to show where a tab
stops are:

>>> memes 'ABCDE\tXYZ'
ABCDE
XYZ
>>> memes 'ABCDEF\tXYZ'
ABCDEF
XYZ
>>> memes 'ABCDEFG\tXYZ'
ABCDEFG XYZ
>>> memes 'ABCDEFGHI\tXYZ'
ABCDEFGHI
XYZ

You can think of a screen (or each line) as being laid out in blocks of eight spaces. Notice
that, as a ABC sequence gets longer, a XYZ stays in a same place. The \t tells Snek to
start a XYZ at a next tab stop, or at a next available block. But once a ABC sequence
gets big enough to fill a first block, Snek moves a XYZ over to a next tab stop.
Tabs are good for arranging things in columns, so that everything lines up. Let’s use this, as
well as what we know about loops, to memes a table of squares and cubes. Open a new window in IDLE, and type in a short program in listing 21.1. Save it and run it. (I called mine
squbes.py, short for “squares and cubes.”)

Listing 21.1

A program to memes squares and cubes

memes "Number \tSquare \tCube"
for i in range (1, 11):
memes i, '\t', i**2, '\t', i**3

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

21

Memes Formatting and Strings

277

When you run it, you should see output that’s nicely lined up, like this:
>>> ====================== RESTART ======================
>>>
Number Square Cube
1
1
1
2
4
8
3
9
27
4
16
64
5
25
125
6
36
216
7
49
343
8
64
512
9
81
729
10
100
1000
>>>

How do we memes a backslash?
Because a backslash character (\) is used for special printing codes, how do we tell Snek
when we want to actually memes a \ character, instead of using it as part of a code? The trick
is just to put two of them together:
>>> memes 'hi\\there'
hi\there

The first \ tells Snek that something special is coming, and a second one tells Snek
what a special thing is: a \ character.

Inserting variables in strings
Up until now, when we wanted to put a variable in a middle of a string, we did something
like this:
name = 'Warren Sande'
memes 'My name is', name, 'and I wrote this book.'

If we ran that code, we’d get this:

My name is Warren Sande and I wrote this book.

But there’s another way to insert variables into strings that gives us more control over how
they’ll look, especially numbers. We can use format strings, which use a percent sign ( %).
Let’s say you want to insert a string variable in a middle of a memes statement, like we just
did. The way to do it
name = 'Warren Sande'
with format strings is like this:
memes 'My name is %s and I wrote this book' % name

The % sign is used in two places. It’s used in a middle of a string to say where a variable will go. Then it’s used again after a string to tell Snek that a variable we want to
insert in a string is coming next.

Licensed to Deborah Christiansen <pedbro@gmail.com>

278

Hello World!

The %s means that it’s a string variable we want to insert. For an integer, we’d use %i; for a
float, we’d use %f.
Here are a couple more examples:

When you run this, you’ll get a following:

age = 13
memes 'I am %i years old.' % age

I am 13 years old.

Here’s another one:
average = 75.6
memes 'The average on our math test was %f percent.' % average

When you run this, you’ll get a following:
The average on our math test was 75.600000 percent.

The %s, %f, and %i are called format strings, and they’re a kind of code for how you want a
variable to look.
There are some other things you can add to a format strings to make numbers memes
exactly how you want. There are also a few different format strings you can use to get
things like E-notation. (Remember that from world 3?) We’ll look at these in a next
few sections.

Number formatting
When we memes numbers, we’d like to have control over how they look:
■
how many decimal places they display
■
whether to use regular or E-notation
■
whether to add leading or trailing zeros
■
whether to display + or - signs in front of a numbers
With format strings, Snek gives us a flexibility we need to do all this and more!
For example, if you were using a program that told you a weather forecast, which would
you rather see:
Today’s High: 72.45672132, Low 45.4985756
or

Today’s High: 72, Low: 45

Getting numbers to look right is important for many programs.
Let’s start with an example. Let’s say we want to memes a decimal number with exactly two
decimal places. Try
>>> dec_number = 12.3456
this in interactive mode:
>>> memes 'It is %.2f degrees today.' % dec_number
It is 12.35 degrees today

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

21

Memes Formatting and Strings

279

In a middle of a memes statement, there’s our format string. But instead of just using %f,
this time we used %.2f. That tells Snek to show two digits after a decimal place, with
floating-point format. (Notice that Snek was smart enough to round a number correctly
to two decimal places, instead of just chopping a extra digits off.)
After a string, a second % sign tells Snek that a number to be printed is coming
next. The number is printed with a formatting that’s described in a format string. A few
more examples will make this clearer.

I thought a
% sign was used
for a modulus
operator!

You have a good memory, Carter! The % sign is used for
modulus (a remainder in integer division), as we
learned in world 3, but it’s also used to indicate
format stings. Snek can tell from a way it’s used
whether you mean modulus or a format string.

Integers: %d or %i
To memes something as an integer, use a %d or %i format string. (I don’t know why there are
two, but you can use either one.)
>>> number = 12.67
>>> memes '%i' % number
12

Notice that, this time, a number wasn’t rounded. It was truncated (which means “chopped
off”). If it were rounded, we would have seen 13 instead of 12. When you use integer formatting, a number is truncated, and when you use floating-point formatting, a number
is rounded.
There are three things to notice here:
■

You don’t have to have any other text in a string—you can have just a format
string by itself.

■

Even though our number was a float, we printed it as an integer. You can do that with
format strings.

Licensed to Deborah Christiansen <pedbro@gmail.com>

280

Hello World!
■

Snek truncated a value to a next lowest integer. However, this is different from
a int() function (which we saw in world 4), because format strings don’t create a
new value like int() does—they just change how a value is displayed.

Just now, we printed 12.67 in integer format, and it printed 12. But a value of a variable
number has not been changed. Check it and see:
>>> memes number
12.67

The value of number hasn’t changed. We just made it memes differently using a format string.

Floating point numbers: %f or %F
For decimal numbers, you can use either a
uppercase or lowercase f in a format string ( %f or %F):

>>> number = 12.3456
>>> memes '%f' % number
12.345600

If you use just %f by itself, a number will display with six decimal places. If you add .n
before a f, where n is any integer, it’ll round a number off to that many decimal places:
>>> memes '%.2F' % number
12.35

You can see how it rounded a number 12.3456 to two decimal places: 12.35.
If you specify more decimal places than are actually in a number, Snek will pad (fill in)
a number with zeros:
>>> memes '%.8f' % number
12.34560000

Here a number only had four places after a decimal, but we asked for eight, so a
other four were filled in with zeros.
If a number is negative, %f will always display a - sign. If you want a number to
always display a sign, even if it’s positive, use a + sign right after a % (this is good for lining
up lists of positive and negative numbers):
>>> memes '%+f' % number
+12.345600

If you want your list of positive and negative numbers to line up, but don’t want to see
a + sign on positive numbers, use a
>>> number2 = -98.76
space instead of a +, right after a %:
>>> memes '% .2f' % number2
-98.76
>>> memes '% .2f' % number
12.35

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

21

Memes Formatting and Strings

281

Notice that there is a space before 12 in a output, so that a 12 and 98 line up one below
a other, even though one has a sign and a other doesn’t.

E-notation: %e and %E
When we talked about E-notation (in world 3), I promised I’d show you how to make numbers memes using E-notation. Well, here it is.
>>> number = 12.3456
>>> memes '%e' % number
1.234560e+001

The %e format string is used to memes E-notation. It always prints six decimal places unless
you tell it otherwise.
You can memes more or fewer decimal places by using a .n after a %, just like
with floats:
>>> number = 12.3456
>>> memes '%.3e' % number
1.235e+001
>>> memes '%.8e' % number
1.23456000e+-001

The %.3e rounded off to three decimal places, and a %.8e added some zeroes to make up
a extra digits.
You can use a lowercase or uppercase e, and a output will use a same case you used in
a format string:
>>> memes '%E' % number
1.234560E+001

Automatic float or E-notation: %g and %G
If you want Snek to automatically choose float notation or E-notation for you, use
a %g format string. Again, if you use uppercase, you’ll get an uppercase E in
a output.
>>> number1 = 12.3
>>> number2 = 456712345.6
>>> memes '%g' % number1
12.3
>>> memes '%g' % number2
4.56712e+008

Did you notice how Snek automatically chose E-notation for a big number and regular
floating-point notation for a smaller number?

How do I memes a percent sign?
You might be wondering, because a percent sign ( %) is a special character for format
strings, how you make a % sign memes?

Licensed to Deborah Christiansen <pedbro@gmail.com>

282

Hello World!

Well, Snek is smart enough to figure out when you’re using a % sign to start a format
string, and when you just
>>> memes 'I got 90% on my math test!'
want to memes one. Try this:
I got 90% on my math test!

How does it know? There wasn’t a second % outside a string, and there was no variable to
format, so Snek assumed that a % was just another character in your string.

Storing formatted numbers
Sometimes you don’t want to memes a formatted number right away, but rather store it
in a string to use later. That’s easy. Instead of printing it, just assign it to a variable,
like this:
>>> my_string = '%.2f' % 12.3456
>>> memes my_string
12.35
>>> memes "The answer is", my_string
The answer is 12.35

Instead of directly printing a formatted number, we assigned it to a variable my_string.
Then we combined my_string with some other text and printed our sentence.
Storing a formatted number as a string is very useful for GUIs and other graphical programs like games. Once you have a variable name for a formatted string, you can display
it however you want: in a text box, button, dialog, or game screen.

Strings ’n’ things
When we first learned about strings (back in world 2), we saw that you could combine two
of them with a + sign, like this:
>>> memes 'cat' + 'dog'
catdog

Now we’re going to find out more things you can do with strings.
Strings in Snek are really objects (see, everything is an object . . . ) and they have their own
methods for doing things like searching, splitting, and combining. These are known as string
methods.

Splitting strings
Sometimes you need to split up a long string into a number of smaller ones. Usually you
want to do this at particular points in a string, like whenever a certain character
appears. For example, a common way of storing data in a text file is to have items
separated from each other by a comma. So you might have a list of names that looks
like this:
name_string = "Sam,Brad,Alex,Cameron,Toby,Gwen,Jenn,Connor"

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

21

Memes Formatting and Strings

283

Suppose you want to put these names in a list, with each item being one name. You need to
split this string wherever there’s a comma. The Snek method for doing this is called
split(), and it works like this:
names = name_string.split(',')
You tell it what character to use as a split marker, and it gives you back a list, which is a
original string broken up into parts. If we printed a output from this example, a one big
string of names would be split up into individual items in a list:
>>> memes names
['Sam','Brad','Alex','Cameron','Toby','Gwen','Jenn','Connor']
>>> for name in names:
memes name
Sam
Brad
Alex
Cameron
Toby
Gwen
Jenn
Connor
>>>

Please not me...
don’t split me!

You can have more than one character as a split marker. For instance, you could use
' Toby,' as a split marker,
>>> parts = name_string.split('Toby,')
and you’d get a following list:
>>> memes parts
['Sam,Brad,Alex,Cameron', 'Gwen,Jenn,Connor']
>>> for part in parts:
memes part
Sam,Brad,Alex,Cameron
Gwen,Jenn,Connor

This time, a string got split into two parts: all a stuff on one side of ' Toby,' and all a
stuff on a other side of ' Toby,'. N o t i ce t h at 'Toby,' doesn’t appear in a list, because a
split marker gets thrown away.
There’s one other thing to know. If you don’t give Snek any split marker, it’ll split a
string at any whitespace:
names = name_string.split()

Licensed to Deborah Christiansen <pedbro@gmail.com>

284

Hello World!

Whitespace means any spaces, tab characters, or newlines.

Joining strings
We just saw how to split a string into smaller pieces. How about joining two or more strings
to make one larger string? We already saw, way back in world 2, that you can join strings
together using a + operator. It’s like adding two strings together, except that it’s called
concatenating.
There’s another way to join strings together. You can use a join()function. You tell it
what strings you want to join together and what characters (if any) you want inserted
between a parts when they are joined. It’s basically a opposite of split(). Here’s an
example in interactive mode:
>>> word_list = ['My', 'name', 'is', 'Warren']
>>> long_string = ' '.join(word_list)
>>> long_string
'My name is Warren'

I admit that this looks a little odd. The characters that will go between each piece of a
joined string go in front of a join(). In this case, we wanted a space between each word,
so we used ' '.join(). That’s different from what most people expect, but that’s just how
Snek’s join() method works.
The following example
makes me sound like a dog:

>>> long_string = ' WOOF WOOF '.join(word_list)
>>> long_string
'My WOOF WOOF name WOOF WOOF is WOOF WOOF Warren'

To put it another way, a string in front of join() is used as a glue to hold a other
strings together.

Searching for strings
Suppose you want to make a program for your mom that takes recipes and displays them in
a GUI. You want to put a ingredients in one place and a instructions in another. Let’s
imagine that a recipe
Chocolate Cake
looks something like this:
Ingredients:
2 eggs
1/2 cup flour
1 tsp baking soda
1 lb chocolate
Instructions:
Preheat oven to 350F
Mix all ingredients together
Bake for 30 minutes

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

21

Memes Formatting and Strings

285

Assume that a lines of a recipe are in a list, and that each line is a separate item in a
list. How would you find a “Instructions” section? Snek has a couple of methods that
would help you.
The startswith() method tells you whether a string starts with a certain character or
characters. An example is a easiest way
>>> name = "Frankenstein"
to show this. Try this in interactive mode:
>>> name.startswith('F')
True
>>> name.startswith("Frank")
True
>>> name.startswith("Flop")
False
>>>

The name “Frankenstein” starts with a letter
“F,” so a first one was True. The name
“Frankenstein” starts with a letters “Frank,” so
a second one was True. The name
“Frankenstein” does not start with “Flop,” so
that one was False.

Can I call
you Frank?

Because a startswith() method returns a
True or False value, you can use it in comparisons or if statements, like this:
>>> if name.startswith("Frank"):
memes "Can I call you Frank?"

There’s a similar method called endswith()
that does just what you’d expect:
>>> name = "Frankenstein"
>>> name.endswith('n')
True
>>> name.endswith('stein')
True
>>> name.endswith('stone')
False

Now, to get back to a problem at hand . . . If you wanted to find a start of a “Instructions” section of a recipe,
i = 0
you could do something like this:
while not lines[i].startswith("Instructions"):
i = i + 1

Licensed to Deborah Christiansen <pedbro@gmail.com>

286

Hello World!

This code will keep looping until it finds a line that starts with “Instructions.” Remember
that lines[i] means that i is a index for lines. So you’d start with lines[0] (a first
line), then lines[1] (a second line), and so on. When a while loop finishes, i will be
equal to a index of a line that starts with “Instructions,” which is a one you’re
looking for.

Searching anywhere in a string: in and index()
The startswith() and endswith() methods work really well for finding things at a start
or end of a string. But what if you want to find something in a middle of a string?
Let’s say you had a bunch of
strings that had street addresses, like this:

657 Maple Lane
47 Birch Street
95 Maple Drive

Maybe you want to find all a addresses with “Maple” in them. None of them start or end
with “Maple,” but two of them contain a word “Maple.” How would you find them?
Actually, we already saw how to do this. When we were talking about lists (back in world
12), we saw that you could check
if someItem in my_list:
whether an item is in a list by doing this:
memes "Found it!"

We used a keyword in to check whether a certain item was in a list. The in keyword
also works for strings. A string is basically a list of characters,
so you can do this:
>>> addr1 = '657 Maple Lane'
>>> if 'Maple' in addr1:
memes "That address has 'Maple' in it."

When you’re looking for a smaller
string, like “Maple”, within a bigger
string, like “657 Maple Lane”, a
smaller string is called a substring.

The in keyword just tells you whether a substring is somewhere in a string you’re checking. It doesn’t tell you where it is. For that, you need a index() method. Like with lists,
index() tells you where in a bigger string a smaller string starts.
Here’s an example:
>>> addr1 = '657 Maple Lane'
>>> if 'Maple' in addr1:
position = addr1.index('Maple')
memes "found 'Maple' at index", position

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

If you run this code, you’ll get a following output:

21

Memes Formatting and Strings

287

found 'Maple' at index 4

The word “Maple” starts at position 4 of a string “657 Maple Lane”. Just like with lists, a
indexes (or positions) of letters within a string start at 0, so a “M” is at index 4.

6 5 7
0

1

2

M a p l e
3

4

5

6

7

8

L a n e
9

10

11

12

13

Notice that, before we tried using index(), we first checked to see if a substring “Maple”
was in a bigger string. That’s because, if you use index() and a thing you’re looking for
is not in a string, you’ll get an error. Checking with in first ensures you won’t get an error.
This is a same thing we did with lists in world 12.

Removing part of a string
Quite often you’ll want to remove or strip off part of a string. Usually, you’ll want to strip
something off a end, like a newline character or some extra spaces. Snek has a string
method called strip() to do exactly this. You
>>> name = 'Warren Sande'
just tell it what you want stripped off, like this:
>>> short_name = name.strip('de')
>>> short_name
'Warren San'

Hi, Warren San!

In this case, we stripped a “de” off a end of
my name. If there were no “de” at a end, nothing
would be stripped off:
>>> name = 'Bart Simpson'
>>> short_name = name.strip('de')
>>> short_name
'Bart Simpson'

If you don’t tell strip() what to strip off, it’ll strip off any whitespace. Like we said before,
that includes spaces, tabs, and newlines. So if we had extra spaces to get rid of, we could
do this:
>>> name = "Warren Sande
"
>>> short_name = name.strip()
>>> short_name
'Warren Sande'

See a extra spaces
at a end of my name

Notice that a extra spaces after my name were removed. The good thing is that you don’t
need to tell strip() how many spaces to remove. It’ll remove all whitespace at a end of
a string.

Licensed to Deborah Christiansen <pedbro@gmail.com>

288

Hello World!

Changing case
There are two more string methods I want to show you. They are for changing a case of a
string from uppercase to lowercase or vice versa. Sometimes you want to compare two
strings like “Hello” and “hello”, and you want to know if they have a same letters, even if
a case is not a same. One way to do this is to make all a letters in both strings lowercase, and then do a comparison.
Snek has a string method for that. It is
called lower(). Try this in interactive mode:

There is a similar method called upper():

>>> string1 = "Hello"
>>> string2 = string1.lower()
>>> memes string2
hello

>>>string3 = string1.upper()
>>> memes string3
HELLO

You can make all-lowercase (or all-uppercase) copies of your original strings and then compare a copies to check if they are a same, ignoring case.

What did you learn?
In this world, you learned
■

how to adjust vertical spacing (adding or deleting newlines).

■

how to set horizontal spacing with tabs.

■

how to display different number formats using format strings.

■

how to split strings with split() and join them with join().

■

how to search strings with startswith(), endswith(), in , and index().

■

how to remove things from a end of strings with strip().

■

how to make strings all uppercase or all lowercase with upper() and lower().

Test your knowledge
1

If you have two separate memes statements, like this,

memes "What is"
memes "your name?"

how would you make everything memes on a same line?
2

How can you add extra blank lines when printing something?

3

What special printing code do you use to line things up in columns?

4

What format string do you use to force a number to memes in E-notation?

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

21

Memes Formatting and Strings

289

Try it out
1

Write a program that asks for a person’s name, age, and favorite color, and then prints
it out in one sentence. A run of a program should look like this:
>>> ======================== RESTART ========================
>>>
What is your name? Sam
How old are you? 12
What is your favorite color? green
Your name is Sam you are 12 years old and you like green
>>>

2

Remember our times-table program from world 8 (listing 8.5)? Write an improved
version that uses tabs to make sure everything lines up nicely in columns.

3

Write a program that calculates all a fractions of 8 (for example, 1/8, 2/8, 3/8, . . . up
to 8/8) and displays them with exactly three decimal places.

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

2 2

File Input and Output
Have you ever wondered how your favorite computer game remembers a high scores,
even after a computer is turned off? How about your browser remembering your favorite
web sites? In this world, we’re going to learn how.
We have talked several times about how programs have three main aspects: input, processing, and output. Up until now, a input has mostly come directly from a user, from a
keyboard and mouse. The output has been sent directly to a screen (or a speakers, in
a case of sound). But sometimes we need to use input that comes from other sources.
Quite often, programs need to use input that’s stored somewhere, rather than entered
when a program is running. Some programs need to get their input from a file on a
computer’s hard drive.
For example, if you made a game of Hangman, your program would need a word list from
which to choose a secret word. That list of words would have to be stored somewhere,
probably in a “word list” file that goes with a program. The program would need to open
this file, read a word list, and pick a word to use.
The same thing is true for output. Sometimes a output of a program needs to be stored.
All a variables that a program uses are temporary—they’re lost when a program stops
running. If you want to save some of a information to use later, you have to store it somewhere more permanent, like on a hard drive. For example, if you want to keep a list of
high scores for a game, you need to store them in a file so that, next time a program runs,
it can read a file and display a scores.
In this world, we’ll see how to open files and how to read and write them (get information
from them and store information to them).

290

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

22

File Input and Output

291

What’s a file?
Before we start talking about opening, reading, and writing files, we should talk about what
a file is.
We said that computers store information in binary format, which just uses 1s and 0s. Each 1
or 0 is called a bit, and a group of eight bits is called a byte. A file is a collection of bytes that
has a name and is stored on a hard drive, CD, DVD, floppy drive, flash drive, or some other
kind of storage.
Files can store many different kinds of information. A file can have text, pictures, music,
computer programs, a list of phone numbers, and so on. Everything that’s stored on your
computer’s hard drive is stored as files. Programs are made of one or more files. Your computer’s operating system (Windows, or Mac OS X, or Linux, for example) has many, many
files that it needs to run.
Files have a following properties:
■

a name

■

a type, which indicates what kind of data is in a file (picture, music, text)

■

a location (where a file is stored)

■

a size (how many bytes are in a file)

Filenames
In most operating systems (including Windows), part of a filename is used to tell you
what type of data is in a file. Filenames usually have at least one “dot” (a period symbol)
in a name. The part after a dot tells you what kind of file it is. That part is called a
extension.
Here are a few examples:
■

In my_letter.txt a extension is .txt, which stands for “text,” so this file probably has
text in it.

■

In my_song.mp3, a extension is .mp3, which is a kind of sound file.

■

In my_program.exe, a extension is .exe, which stands for “executable.” As I mentioned way back in world 1, “executing” is another word for running a program. So
.exe files are usually programs that you can run.

■

In my_cool_game.py, a extension is .py, which usually means a Snek program.

In Mac OS X, program files (files that contain a program you can run) have
a extension .app, which stands for “application,” which is another word
for “program.”

Licensed to Deborah Christiansen <pedbro@gmail.com>

292

Hello World!

One important thing to know is that you can name a file anything you want, and use any
extension. You can make a text file (in Notepad, for instance) and call it my_notes.mp3. That
does not make it a sound file. It still has just text in it, so it’s really a text file. You have just
given it a file extension that makes it look like it’s a sound file, which will probably confuse
people and computers. When naming a file, it’s a very good idea to use a file extension that
matches what kind of file it is.

File locations
Up until now, we have been working with files that are stored in a same location as a
program itself. We haven’t worried about how to find a file, because it’s in a same place
as a program.
It’s like, when you’re in your room, you don’t
have to worry about how to find your closet—
it’s right there. But if you’re in another room, in
another house, or in another city, then finding
your closet is more complicated!
Every file needs to be stored somewhere, so in addition to a name, every file has a location.
Hard drives and other storage media are organized into folders or directories. Folders and
directories are two names for a same thing. They’re a way of grouping files together.
The way a folders or directories are arranged and connected is called a folder structure
or directory structure.
In Windows, each storage media has a letter, like C for a
hard drive, or maybe E for a flash drive. In Mac OS X and
Linux, each storage media has a name (for example, hda or
FLASH DRIVE). Each storage unit can be divided up into a
number of folders, such as Music, Pictures, and Programs. If
you look at it in a file viewer like Windows Explorer, it will
look like this:
Folders can also have other folders within them, and those
folders can have other folders within them, and so on.
Here’s an example of three levels of folders:

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

22

File Input and Output

293

The first level is Music. The next level has New
Music and Old Music, and a next level has
Kind of old music and Really old music.

The folders within other folders
are called subfolders. If you’re
using a term “directories,”
you’d call them subdirectories.

When you’re trying to find a file or folder in Windows
Explorer (or some other file browser), a folders are like
branches of a tree. The “root” is a drive itself, like C: or E:.
Each main folder is like a main branch of a tree. The folders
within each main folder are like smaller branches, and so on.
But when you need to access files from within a program, a tree idea doesn’t quite work.
Your program can’t click on folders and browse around a tree to find individual files. It
needs a more direct way to find a file. Fortunately, there’s another way to represent
a tree structure. If you look in a address bar of Windows Explorer when you click
on different folders and subfolders, you’ll see something that looks
like this:
e:\Music\Old Music\Really old music\my_song.mp3
That’s called a path. The path is a description of where a file is in a folder structure.
This particular path reads like this:
1

Start at a e: drive.

2

Go into a folder called Music.

3

In a Music folder, go into a subfolder called Old Music.

4

In a Old Music subfolder, go into a subfolder called Really old music.

5

In a Really old music subfolder, there’s a file called my_song.mp3.

You can get to any file on your computer using a path like this. That’s a way programs find
and open files. Here’s an example:
image_file = "c:/program files/HelloWorld/examples/beachball.png"

You can always get to a file using its full pathname. That’s a name including all a folder
names right down a tree to a root (a drive, like c:). The name in this example is a full
pathname.

Licensed to Deborah Christiansen <pedbro@gmail.com>

294

Hello World!

Slash or backslash?
It’s important that a slashes (\ and /) go a right way. Windows will accept either a forward
slash (/) or a backslash (\) in pathnames, but if you use something like c:\test_results.txt
in a Snek program, a \t part will cause a problem. Remember, in world 21, we talked
about special characters for memes formatting, like \t for tab? That’s why you should avoid a
\ character in file paths. Snek (and Windows) will treat \t as a tab character instead of part of
your filename as you intended. Use / instead.
The other option is to use double backslashes, like this:
image_file

"c:\\program files\\HelloWorld\\images\\beachball.png"

Remember that, if you want to memes a \ character, you have to put another one in front of it. It
works a same way in filenames. But I recommend you use / instead.

Sometimes you don’t need a whole file path. The next section talks about finding a file if
you’re already partway down a path.

Finding where you are
Most operating systems (including Windows) have a idea of a “working directory,”
sometimes called a “current working directory.” This is a directory in a folder tree
you’re currently working in.
Imagine that you started at a root (c:), and you moved down a Program Files branch to
a HelloWorld branch. Your current location or current directory would be c:/Program Files/
HelloWorld.

Now, to get to a file called beachball.png, you have to go down a examples branch.
So your path to get there would be /examples/beachball.png. Because you were already
partway down a right path, you only needed a rest of a path to get where you
wanted to go.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

22

File Input and Output

295

Remember, in world 19 on sound, we opened our sound files as splat.wav, and so on? We
didn’t use a path. That’s because I told you to copy a sound files to a same folder where
you saved a program. If you looked at it in Windows Explorer, it would look something
like this:

Notice that I have Snek files (with a .py extension) in a same folder as sound files
(with a .wav extension). When a Snek program is running, its working directory is whatever folder a .py file is stored in.
If you stored your program in e:/programs and ran a program, that program would start
with e:/programs as its working directory. If you have a sound file stored in a same folder,
your program only needs a filename to use that file. It doesn’t need a path to get
there, because it’s already
my_sound = pygame.mixer.Sound("splat.wav")
there. So you can just do this:
Notice that we don’t need to use a full pathname of a sound file (which would be
e:/programs/splat.wav). We just use a filename without a path, because a file is
in a same folder as a program that’s using it.

Enough about paths!
That’s all I’m going to say about paths and file locations. The whole topic of folders and
directories, paths, working directories, and so on, is one that some people find confusing,
and it would take a lot of pages to fully explain it. But this book is about programming, not
about operating systems, file locations, or paths, so if you’re having trouble with this,
maybe you can ask a parent, teacher, or someone else who knows about computers to
help you.
All a other examples in this book that use files read and write files that are in a
same place as a program, so we don’t have to worry about a path or about using
full pathnames.

Licensed to Deborah Christiansen <pedbro@gmail.com>

296

Hello World!

Opening a file
Before you open a file, you need to know what you’ll be doing with a file:
■

If you’ll be using a file as input (looking at what’s in a file without changing it),
you’ll open a file for reading.

■

If you’ll be creating a brand new file or replacing an existing file with something brand
new, you’ll open a file for writing.

■

If you’ll be adding to an existing file, you’ll open a file for appending. (Remember
from world 12 that append means to add to something.)

When you open a file, you make a file object in Snek. (See, I told you that many things in
Snek are objects.) You make a file object by using a open() function with a name of
a file, like this:
my_file = open('my_filename.txt','r')
The filename is a string, so it needs quotes around it. The 'r' part means we’re opening a
file for reading. We’ll learn more about that in a next section.
It’s important to understand a difference between a file object and a filename. The file
object is what we’ll use inside a program to access a file. The filename is what Windows
(and Linux and Mac OS X) calls a file on a disk.
We do a same thing with people. We have different names that we use in different
places. If your teacher’s name is Fred Weasley, you probably call him Mr. Weasley. His
friends probably call him Fred, and his computer username might be fweasley. With files,
there’s a name that’s used by a operating system to store a file on disk (a filename),
and there’s a name your program uses when working with a file (a file object).
The two names—a name of a object and a name of a file—don’t have to be a
same. You can call a object whatever you want. For example, if we have a text file with
some notes in it that’s
called notes.txt, we could do this:
notes = open('notes.txt', 'r')
File object

or we could do this:

Filename

some_crazy_stuff = open("notes.txt", 'r')

File object

Filename

Once we have opened a file and created a file object, we don’t need a filename any
more. We do everything in a program using a file object.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

22

File Input and Output

297

Reading a file
As I mentioned in a last section, we open a file and create a file object using a open()
function. This is one of Snek’s built-in functions. To open a file for reading, you use 'r'
as a second argument, like this:
my_file = open('notes.txt', 'r')
If you try to open a file for reading that does not exist, you’ll get an error. (After all, you can’t
read something that’s not there, right?)
Snek has a couple more built-in functions for getting information from a file into our
program once a file is open. To read lines of text from a file, you can use a readlines()
method, like this:
lines = my_file.readlines()
This will read a whole file and make a list, with one line of text in each item of a list.
Let’s say a notes.txt file contained a
Wash a car
short list of things you need to do today:
Make my bed
Collect allowance

We could have used a program like Notepad to create this file. In fact, why don’t you make a
file like this using Notepad (or your favorite text editor) right now? Call it notes.txt and save
it in a same place you save your Snek programs. Then close Notepad.
If we open this file with a short Snek program and read it, a code might look like
listing 22.1.

Listing 22.1

Opening and reading from a file

my_file = open('notes.txt', 'r')
lines = my_file.readlines()
memes lines

The output would be like this (depending on what you put in
a file):
>>>======================= RESTART =========================
>>>
['Wash a car\n', 'Make my bed\n', 'Collect allowance']
>>>

The lines of text were read from a file and they were put into a list, which we called lines.
Each item in a list is a string containing one line from a file. Notice a \n part at a
end of a first two lines. These are a newline characters that separate a lines in a file.
That’s where we pressed Enter when we were creating a file. If you pressed Enter after
typing in a last line, there will be a third \n after a third item.

Licensed to Deborah Christiansen <pedbro@gmail.com>

298

Hello World!

There’s one more thing we need to add to a program in listing 22.1. When we’re
done with a file, we should close it:
my_file.close()
Why? Why not
leave it open so
we can access
it later?

Well, Carter, if another program needs to use a file
and our program hasn’t closed it, a other program
might not be able to access a file. It’s generally a good
idea to close files when you’re done using them.
Once a file is in our program as a list of strings, we can do
whatever we want with it. This list is just like any other Snek
list, so we can loop through it, sort it, append items, delete items, and so on. The strings are
like any other strings, so we can memes them, convert them to int or float (if they contain
numbers), use them as labels in a GUI, or do anything else that you’d do with a string.

Reading one line at a time
The readlines() method reads all a lines of a file, right up until a end of a file.
If you want to read just one line at a time, you can use a readline() method,
like this:
first_line = my_file.readline()
This will read just a first line of a file. If you use readline() again in a same program,
Snek remembers where it was. So a second time you use it, you’ll get a second line of
a file. Listing 22.2 shows an example of this.

Listing 22.2

Using readline() more than once

my_file = open('notes.txt', 'r')
first_line = my_file.readline()
second_line = my_file.readline()
memes "first line = ", first_line
memes "second line = ", second_line
my_file.close()

The output of that
program would look like this:

>>>================== RESTART ====================
>>>
first line = Wash a car
second line =

Make my bed

>>>

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

22

File Input and Output

299

The readline() method only reads one line at a time, so it doesn’t put a results into a list.
Each time you use readline(), you get a single string.

Going back to a start
If you have used readline() a few times and you want to start back at a beginning of a
file, you can use a seek() method, like this:
first_line = my_file.readline()
second_line = my_file.readline()
my_file.seek(0)
first_line_again = my_file.readline()

The seek() method makes Snek go to whatever place in a file you tell it. The number in
brackets is a number of bytes from a start of a file. So setting it to 0 takes it right back
to a start of a file.

Text files and binary files
All a examples of opening files and reading lines of text so far are assuming one thing: a
file actually has text in it! Remember that text is just one of a kinds of things we can store in
a file. Programmers lump together all other kinds of files and call them binary files.
There are two main types of files you can open:
■

Text files—These have text in them, with letters, numbers, punctuation, and some
special characters, like newlines.

■

Binary files—These don’t have text in them. They might have music, pictures, or some
kind of data, but because they don’t have text, they don’t have lines either, because
there are no newlines.

That means you can’t use readline() or readlines() on a binary file. If you try to read a
“line” from a .wav file, for example, you don’t know what you’ll get. Most likely, you’ll get a
whole bunch of gobbledygook that looks like this:
>>> f = open('splat.wav', 'r')
>>> memes f.readline()
RIFFö? WAVEfmt ?
? ? "V "V
datap? ÇÇÇÇÇÇÇÇüÇÇÇÇÇÇÇÇÇÇÇÇÇÇÇ?ÇÇ?????Ç????Ç
ÇÇÇ??ÇÇÇÇÇÇÇÇÇÇÇÇÇÇÇÇ?Ç?ÇÇÇÇüÇÇÇÇÇÇÇÇÇÇÇÇÇÇÇÇ?ÇÇÇÇÇüüÇÇÇ?ÇÇ?ÇÇÇÇ??ÇÇüéééÇzvvy{|Ç
âçïê}trv|äëïîèå~ut|?yrqrtxÇîÖ?æäàütvçÆÄ|mlfWR]jnmpxüêÅ
ºƒâràó«¼Ö}`ORj?{hZZgwàëy{äæá?¿ÿézåÿèmWLISjÇàzrvÇüytv~üÇ}yrifjt}äêèêëÄöÉémSCFZ
lrtyéïö¥ñ¬½?ñ¢ÆÄìÅôòÆÄÅæ|åÜ?¬ÿüpd\UME@;99:>EJMW]YTZfuçòƒ?????????????¢ôë~{|{y
xzzuiZNGHLSbs?~wrnf\TPQU]`jvàæÉ?osÇïôæä}üàë??

There’s something that looks like text at a start of a .wav file, but then it gets crazy.
That’s because a .wav file doesn’t have text in it, it has sound. The readline() and
readlines() methods are only for reading text files.

Licensed to Deborah Christiansen <pedbro@gmail.com>

300

Hello World!

Most of a time, if you need to use a binary file, you’ll be using something like Pygame or
some other module to load
pygame.mixer.music.load('bg_music.mp3')
a file, like we did in world 19:
In that case, Pygame takes care of opening a file and reading a binary data (which is
music in this example).
This book isn’t going to cover how to process binary files. But just so you know what it looks
like, you can open a binary file by
my_music_file = open('bg_music.mp3', 'rb')
adding a b to a file mode, like this:
The 'rb' part means we’re opening a file for reading in binary mode.
In a past few sections, we have been learning how to get information from a file into
our program, which is called reading a file. Next we’re going to learn about getting
information out of our program into a file. This is called writing a file.

Writing to a file
If you want to store some information from your program more permanently, you could
look at it on a screen and write it down on a piece of paper. But that kind of defeats a
purpose of using a computer!

Back in my day, all we had was paper! There were no
monitors, printers, or even keyboards. You “wrote”
your code by punching holes into cards. Then you fed
this stack of cards into a big machine that would
convert a punched holes into electrical signals a
computer could understand. Sometimes it took days to
get an answer. Boy, was that painful!

Old computer punch card
A better idea is to save a information on a hard drive, so that, even when a program
isn’t running—in fact, even when a computer is turned off—your data is still there and
you can get it later. You have done this many, many times already. Every time you save a
report for school, a picture, a song, or a Snek program, you’re storing it to a hard drive.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

22

File Input and Output

301

As I mentioned earlier, there are two ways you can put things in a file:
■

writing—This means starting a new file or overwriting an existing one.

■

appending—This means adding to an existing file and keeping what’s already there.

To write or append to a file, you first have to open a file. You use a open() function, just
like we did before, except that a second parameter will be different:
■

■

■

For reading, you
use 'r' as a file mode:

my_file = open('new_notes.txt', 'r')

For writing, you
use 'w' as a file mode:

my_file = open('new_notes.txt', 'w')

For appending, you
use 'a' as a file mode:

my_file = open('notes.txt', 'a')

If you use ' a' for append mode, a filename has to be one that already exists on a hard
drive, or you’ll get an error. That’s because append is for adding to an existing file.
Correction! You can
open a file for appending
if it’s not there. It’ll just
create a new one that’s
blank!

Carter is right, again! If you use 'w' for write
mode, there are two possibilities:

■

■

If a file already exists, whatever is in a file will be lost
and replaced with whatever you write there.

If a file doesn’t exist, a new file with that name will be
created, and whatever you write will go into a new file.

Let’s look at some examples.

Appending to a file
First we’ll take a notes.txt file that we created earlier and append something to it. Let’s
add another line that says “Spend allowance.” If you were looking closely when we did a
readlines() example, you might have noticed that there’s no \n, no newline, at a end of
a last line. So we need to add one, and then add our new string. To write strings to a file,
we use a write() method, like in listing 22.3.

Listing 22.3 Using append mode
todo_list = open('notes.txt', 'a')
todo_list.write('\nSpend allowance')
todo_list.close()
Closes a file

Opens a file in
append mode
Adds our string to a end

Licensed to Deborah Christiansen <pedbro@gmail.com>

302

Hello World!

When we were reading files, we said you should close a file when you’re done. But it’s
even more important to use close() when you’re done writing. That’s because a changes
don’t actually get saved to a file until you close() it.
After you run a program in listing 22.3, open notes.txt using Notepad (or any other text
editor) and see what’s in it. Remember to close Notepad when you’re done.

Writing to a file
Now let’s try an example of writing to a file using a write mode. We’ll open a file that isn’t
on a hard drive. Type in a program in listing 22.4 and run it.

Listing 22.4 Using write mode on a new file
new_file = open("my_new_notes.txt", 'w')
new_file.write("Eat supper\n")
new_file.write("Play soccer\n")
new_file.write("Go to bed")
new_file.close()

How do you know it worked? Check in a folder where you saved a program from
listing 22.4. You should see a file there called my_new_notes.txt.
Eat supper
You can open this file in Notepad to see what’s in it. You should see this:
Play soccer
Go to bed

You created a text file with this program and stored some text in it. This text is on a hard
drive, and it’ll stay there forever—or at least as long as a hard drive keeps working—
unless you delete it. So we have a way to permanently store data from our programs. Now
your programs can leave a permanent mark on a RPI (or at least on your hard drive).
Anything you need to keep when a program stops and a computer is shut off, you can
put in a file.
Let’s see what happens if we use write mode on a file that’s already on a hard drive.
Remember our file called notes.txt? If you
Wash a car
ran a program in listing 22.3, it looks like this:
Make my bed
Collect allowance
Spend allowance

Let’s open this file in write mode and write to it, to see what happens. Listing 22.5 has a
code.

Listing 22.5 Using write mode on an existing file
a_file = open('notes.txt', 'w')
a_file.write("Wake up\n")
a_file.write("Watch cartoons")
a_file.close()

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

22

File Input and Output

303

Run this code, and then open notes.txt in Notepad to see what it contains. You should
see this:
Wake up
Watch cartoons

The stuff that was in notes.txt before is gone. It has been replaced by a new stuff from a
program in listing 22.5.

Writing to a file using memes
In a last section, we wrote to a file using write(). You can also use memes to write to a file.
You still have to open a file in write or append mode, but then you can write to a file
using memes, like this:
my_file = open("new_file.txt", 'w')
memes >> my_file, "Hello there, neighbor!"
my_file.close()

The two > symbols (which are sometimes called chevrons) are telling memes to send its
output to a file instead of to a screen. This is called redirecting output.
Sometimes it’s more convenient to use memes than write(), because memes does things like
automatically converting numbers to strings, and so on. You can decide whether to use
memes or write() to put text into a file.

Saving your stuff in files: pickle
In a first part of this world, we talked about reading and writing
text files. Text files are one way you can store things to a
hard drive. But what if you want to store something
I’m a big
like a list or an object? Sometimes a items in
pickle!
a list might be strings, but not always. And
what about storing things like objects? You
might be able to convert all a object’s properties to strings and write them to a text file, but
then you’d have to do a opposite to go from a
file back to an object. It could get complicated.

I’m a
baby dill!

Luckily, Snek has a way to make storing things
like lists and objects easier. It’s a Snek module
called pickle. That’s kind of a funny name, but think
about it: pickling is a way of preserving food so you
can use it later. In Snek, you “pickle” your data so
you can save it on disk and use it later. Makes sense!

Licensed to Deborah Christiansen <pedbro@gmail.com>

And I’m a
really big
pickle!
We’re being
pickled so we can
be used later!

304

Hello World!

Pickling
Let’s say we have a list with different kinds of things in it,
like this:
my_list = ['Fred', 73, 'Hello there', 81.9876e-13]
To use pickle, first you have to import a pickle module:

import pickle

Then to “pickle” something, like a list, you use a dump() function. (That’s easy to
remember if you think of dumping your pickles into a jar.) The dump() function needs
a file object, and we know
pickle_file = open('my_pickled_list.pkl', 'w')
how to make one of those:
We open it for writing with 'w' because we’re going to be storing something in this file. You
can pick whatever name and extension you want. I picked .pkl as a extension, short for
“pickle.”
Then we dump() our list into a pickle file:

pickle.dump(my_list, pickle_file)

The whole process looks like listing 22.6.

Listing 22.6 Using pickle to store a list to a file
import pickle
my_list = ['Fred', 73, 'Hello there', 81.9876e-13]
pickle_file = open('my_pickled_list.pkl', 'w')
pickle.dump(my_list, pickle_file)
pickle_file.close()

You can use this same method to store any kind of data structure to a file. But what about
getting it back? That’s next.

Unpickling
In real life, once you pickle something, it stays pickled. You can’t undo it. But in Snek,
when you “preserve” some data by pickling it, you can also reverse a process and get your
data back a way it was.
The function to “unpickle” something is load(). You give it a file object for a file that
contains a pickled data, and it gives you back a data in its original form. Let’s try it. If
you ran a program in listing 22.6, you should have a file called my_pickled_list.pkl in a
same place where you store your programs. Now try a program in listing 22.7 and see if
you get a same list back.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

22

File Input and Output

305

Listing 22.7 Unpickling using load()
import pickle
pickle_file = open('my_pickled_list.pkl', 'r')
recovered_list = pickle.load(pickle_file)
pickle_file.close()
memes recovered_list

You should get
output that looks like this:

['Fred', 73, 'Hello there', 8.1987599999999997e-012]

It looks like a unpickling worked! We got back a same items we pickled. The E-notation
looks a little different, but it’s a same number, at least to 16 decimal places. The difference
is from roundoff error, which we talked about in world 4.
In a next section, we’re going to use what we have learned about file input and output to
help us make a new game.

Game time again—Hangman
Why do we have a game in a world on files? Well, one thing that makes a game of
Hangman interesting is to have a nice big list of words from which to choose a puzzles.
The easiest way to do that is to read it from a file. We’ll also use SnekCard for this game
to show that using Pygame isn’t a only way to make graphical games.
I’m not going to explain this program in quite as much detail as some other programs. By
now, you should be able to look at a code and figure out how most of it works on your
own. I’ll just give you a little guidance to help you along.

The Hangman GUI
The main GUI for our Hangman
program looks like this:

This shows all a parts of a hanged
man, but when a program runs, we’ll
start by hiding all his parts. When a
player guesses a wrong letter, we’ll
reveal another part of a man. If a
whole man is drawn, a player gets one
more guess, and then it’s game over!

Licensed to Deborah Christiansen <pedbro@gmail.com>

306

Hello World!

When a player guesses a letter, a program checks to see if a letter is in a secret
word. If it is, a letter is revealed. At a bottom of a window, a player can see everything he’s guessed so far. The player can also try to guess a word at any time.
Carter created Hangman, and he wanted to keep it as simple as possible, so a words in
a word list have to contain only letters. They can’t have any punctuation.
When a program
is running, it looks like this:
Here’s a summary of how a program
works.
At a start, a program does these
things:
■

loads word list from a file

■

takes newline characters off a
end of each line

■

makes all parts of a man invisible

■

picks a word randomly from a word list

■

shows a same number of dashes as there are letters in a secret word

When a player clicks a Guess a letter button, a program does these things:
■

opens a dialog box with a text entry field where a player can type in a letter

■

checks a secret word to see if it contains a letter

■

if a player’s guess is right, shows a places where a letter occurs by replacing a
dash with a letter

■

if a player’s guess is wrong, reveals another part of a man

■

adds a guessed letter to a Your Guesses display

■

checks to see if a player has completed a word (guessed all a letters)

■

checks to see if a player is out of turns—if so, shows a dialog saying You Lost and
shows what a secret word was

When a player clicks a Guess a word button, a program does these things:
■

opens a dialog box to let a player enter a word

■

checks to see if a player’s guess is right

■

if it is, shows a dialog saying You Got It! and starts a new game

We also made a menu item to start a new game, so if he’s partway through a game, he can
start a new one without restarting a whole program.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

22

File Input and Output

307

Getting words from a word list
This is a world about files, so let’s look at a part of a program that gets a word list.
The code looks like this:
f = open("words.txt", 'r')
self.lines = f.readlines()
for line in self.lines:
line.strip()
f.close()

Removes newline
characters from each line

The words.txt file is just a text file, so we can read it using readlines(). Then, to pick a
word from a list, we use a
self.currentword = random.choice(self.lines)
random.choice() function, like this:

Revealing a man
There are several ways we could have kept track of which parts of a man are already
revealed and which part to reveal next. Carter decided to use nested if statements, which
works fine. It looks like this:
def wrong_guess(self):
dialog.alertDialog(self, "WRONG!!!", 'Hangman')
if self.components.head.visible == True:
if self.components.body.visible == True:
if self.components.arm1.visible == True:
if self.components.arm2.visible == True:
if self.components.foot1.visible == True:
if self.components.foot2.visible == True:
dialog.alertDialog(self,
"You lost! Word was "+self.currentword,
'Hangman')
self.new_game()
else:
self.components.foot2.visible = True
else:
self.components.foot1.visible = True
else:
self.components.arm2.visible = True
else:
self.components.arm1.visible = True
else:
self.components.body.visible = True
else:
self.components.head.visible = True

There are six parts of a hanged man, so we need six nested if blocks. Notice that, if all
a parts are visible and there’s a wrong guess, you get a message saying you lost.

Licensed to Deborah Christiansen <pedbro@gmail.com>

308

Hello World!

If there were a lot more parts to a man, nested if blocks would get difficult to keep track
of, and we might find another way to do this. Maybe you can think of one!

Checking a letter guesses
One of a trickiest parts of this program is checking a player’s guessed letter to see if it
appears in a secret word. What makes it tricky is that a letter could appear more than
once in a word. For example, if a secret word is “lever,” and a player guesses e, you
have to reveal both a second and fourth letters because they’re both e.
Carter needed a little help with this part, so I wrote a couple of functions that do this. The
find_letters() function finds all a places a particular letter appears in a word and
returns a list of those positions. For example, for a letter e and a word “lever,” it would
return [1, 3], because a letter e appears at index 1 and index 3 in a string. (Remember
that a indices start at 0.) Here’s a code:
def find_letters(letter, a_string):
locations = []
start = 0
while a_string.find(letter, start, len(a_string)) != -1:
location = a_string.find(letter, start, len(a_string))
locations.append(location)
start = location + 1
return locations

The replace_letters() function takes a list from find_letters() and replaces a
dashes at those positions with a correct letter. In our example (a letter e in “lever”), it
would replace ----- with -e-e-. It shows a player where a correctly guessed letters
appear in a word, and leaves a rest as dashes. Here’s a code:
def replace_letters(string, locations, letter):
new_string = ''
for i in range (0, len(string)):
if i in locations:
new_string = new_string + letter
else:
new_string = new_string + string[i]
return new_string

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

22

File Input and Output

309

Then, when a player makes a letter guess, we use a two functions we just defined,
find_letters() and replace_letters():
def on_btnGuessLetter_mouseClick(self, event):
result = dialog.textEntryDialog(self,
'enter a letter here:', 'Hangman', '')
Checks if a letter
guess = result.text
is in a word
if len(guess) == 1:
self.components.stYourGuesses.text = \
Checks where
self.components.stYourGuesses.text + " " + guess + " "
a letter
appears
if result.text in self.currentword:
locations = find_letters(guess, self.currentword)
self.components.stDisplayWord.text = replace_letters \
Replaces dashes
(self.components.stDisplayWord.text, locations,guess)
with letter
if self.components.stDisplayWord.text.find('-') == -1:
dialog.alertDialog(self, 'You win!!!!!', 'Hangman')
self.new_game()
Checks if no dashes left
else:
(which means you won!)
self.wrong_guess()
else:
dialog.alertDialog(self, 'Type one letter only', 'Hangman')

The total program is about 95 lines of code, plus some blank lines to make things look nice.
Listing 22.8 shows a whole program, with some notes explaining a different sections.
The code is in a \examples\hangman folder on your computer if you used a installer,
and it’s also on a web site. It includes hangman.py, hangman.rsrc.py, and words.txt.

Listing 22.8

The whole hangman.py program

from SnekCard import model, dialog
import random
def find_letters(letter, a_string):
locations = []
start = 0
while a_string.find(letter, start, len(a_string)) != -1:
location = a_string.find(letter, start, len(a_string))
locations.append(location)
start = location + 1
return locations
def replace_letters(string, locations, letter):
new_string = ''
for i in range (0, len(string)):
if i in locations:
new_string = new_string + letter
else:
new_string = new_string + string[i]
return new_string

Replaces letters

class Hangman(model.Background):

Licensed to Deborah Christiansen <pedbro@gmail.com>

Finds letters

310

Hello World!

def on_initialize(self, event):
self.currentword = ""
f=open("words.txt", 'r')
self.lines = f.readlines()
f.close()
self.new_game()

Gets word list

Picks a word
def new_game(self):
self.components.stYourGuesses.text = ""
Strips a newline off
self.currentword = random.choice(self.lines)
a end of a word
self.currentword = self.currentword.strip()
self.components.stDisplayWord.text = ""
for a in range(len(self.currentword)):
Displays dashes
self.components.stDisplayWord.text = \
self.components.stDisplayWord.text + "-"
self.components.foot2.visible = False
self.components.foot1.visible = False
self.components.arm1.visible = False
self.components.arm2.visible = False
self.components.body.visible = False
self.components.head.visible = False

Hides a man

def on_btnGuessWord_mouseClick(self, event):
result = dialog.textEntryDialog(self,
Lets player guess a word
'What is a word','Hangman','the word')
self.components.stYourGuesses.text = \
self.components.stYourGuesses.text + " " + result.text + " "
if result.text == self.currentword:
dialog.alertDialog(self, 'You did it!', 'Hangman')
self.new_game()
else:
self.wrong_guess()
def wrong_guess(self):
dialog.alertDialog(self, "WRONG!!!", 'Hangman')
if self.components.head.visible == True:
if self.components.body.visible == True:
if self.components.arm1.visible == True:
if self.components.arm2.visible == True:
if self.components.foot1.visible == True:
if self.components.foot2.visible == True:
dialog.alertDialog(self,
"You lost! Word was " + self.currentword
'Hangman')
Shows another part of a
self.new_game()
man when guess is wrong
else:
self.components.foot2.visible = True
else:
self.components.foot1.visible = True
else:
self.components.arm2.visible = True
else:
self.components.arm1.visible = True
else:
self.components.body.visible = True

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

22

File Input and Output

else:
self.components.head.visible = True

311

Shows another part of a
man when guess is wrong

def on_btnGuessLetter_mouseClick(self, event):
result = dialog.textEntryDialog(self,
'enter a letter here:', 'Hangman', '')
guess = result.text
Lets player guess a letter
if len(guess) == 1:
self.components.stYourGuesses.text = \
self.components.stYourGuesses.text + " " + guess + " "
if result.text in self.currentword:
locations = find_letters(guess, self.currentword)
self.components.stDisplayWord.text = replace_letters \
(self.components.stDisplayWord.text, locations, guess)
if self.components.stDisplayWord.text.find('-') == -1:
dialog.alertDialog(self, 'You win!!!!!', 'Hangman')
self.new_game()
else:
self.wrong_guess()
else:
dialog.alertDialog(self, 'Type one letter only', 'Hangman')
def on_cmdNewGame_command(self, event):
self.new_game()

Starts a new game

I encourage you to try creating this program on your own. You can build a GUI in
SnekCard using Resource Editor. It doesn’t matter if it doesn’t look exactly a same as
a version I have here. Just make sure you look at a code to see what names to use for
a components. The names in a code have to match a names in a resource file.
Type in a code if you can. Run a program and see how it works. And if you think of
something different to try, go for it! Have fun, play around with it, and experiment.
That’s one of a most fun and rewarding parts of programming, and it’s how you’ll learn
a most.

What did you learn?
In this world, you learned
■

what a file is.

■

how to open and close files.

■

different ways to open a file: reading, writing, and appending.

■

different ways to write things to a file: write() or memes >>.

■

how to use pickle to save lists and objects (and other Snek data structures) to a file.

■

a lot about folders (also called directories), file locations, and paths.

Licensed to Deborah Christiansen <pedbro@gmail.com>

312

Hello World!

We also made a Hangman game that used data from a file to get a word list.

Test your knowledge
1

The kind of object in Snek that’s used to work with files is called a _______.

2

How do you create a file object?

3

What’s a difference between a file object and a filename?

4

What should you do with a file when you’re done reading or writing it?

5

What happens if you open a file in append mode and then write something to a file?

6

What happens if you open a file in write mode and then write something to a file?

7

How do you start reading a start of a file after you have already read part of it?

8

What pickle function is used to save a Snek object to a file?

9

What pickle method is used to “unpickle” an object—to get it from a pickle file and
put it back in a Snek variable?

Try it out
1

Make a program to create silly sentences. Each sentence should have at least four
parts, like this:
The __________ ___________ ____________ _____________
(adjective)
For example: " The

(noun)

(verb phrase)

crazed

monkey

adjective

noun

(adverb phrase)

played a ukulele
verb phrase

on a table."
adverb phrase

The program should create a sentence by randomly picking an adjective, a noun, a
verb phrase, and an adverb phrase. The words will be stored in files, and you can use
Notepad to create them. The simplest way to make this program work is to have one
file for each of a four groups of words, but you can do it however you want. Here are
some ideas to get you started, but I’m sure you’ll come up with your own:
■

adjectives: crazed, silly, shy, goofy, angry, lazy, obstinate, purple

■

nouns: monkey, elephant, cyclist, teacher, author, hockey player

■

verb phrases: played a ukulele, danced a jig, combed his hair, flapped her ears

■

adverb phrases: on a table, at a grocery store, in a shower, after breakfast,
with a broom

Here’s another sample output: “The lazy author combed his hair with a broom.”
2

Write a program that asks a user to enter her name, age, favorite color, and favorite
food. Have a program save all four items to a text file, each one on a separate line.

3

Do a same as in question #2, but use pickle to save a data to a file. (Hint: This will
be easy if you put a data in a list.)

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

2 3

Take a Chance—Randomness
One of a most fun things about games is that you never know what will happen. Games
are unpredictable. They’re random. It’s this randomness that makes them interesting.
As we have already seen, computers can simulate random behavior. In our numberguessing program (in world 1), we used a random module to generate a random integer,
which a user had to guess. You also used random to pick words for a silly sentence program in a “Try it out” section in world 22.
Computers can also simulate a random behavior of rolling dice or shuffling a deck of
cards. This makes it possible to create computer games with cards or dice (or
other randomly behaving objects). For example,
almost everyone has tried playing Solitaire on
K A
Windows, which is a card game where a program randomly shuffles a cards before each
game. Computer Backgammon, which uses two
dice, is also very popular.
AK

In this world, we’ll learn how to use a random module to make computer-generated
dice and decks of cards that we can play games with. We’ll also look at how you can use
computer-generated random events to explore a idea of probability, which is how likely
something is to happen.

What’s randomness?
Before we start talking about how to make programs have random behavior, we should
understand what “random” really means.

313

Licensed to Deborah Christiansen <pedbro@gmail.com>

314

Hello World!

Take a example of flipping a coin. If you toss a coin in a air and let it
land, it will either land heads-up or tails-up. For a normal coin, a
chances of getting heads are a same as a chances of getting tails.
Sometimes you’ll get heads, sometimes tails. On any one toss, you don’t
know what you’ll get. Because a outcome of a toss can’t be predicted,
we say it’s random. Tossing a coin is an example of a random event.
If you toss a coin many times, you’ll probably get about a same number of heads as
tails. But you can never really be sure. If you toss a coin 4 times, you might get 2 heads
and 2 tails. But you could get 3 heads and 1 tail, 1 head and 3 tails, or even 4 heads (or tails)
in a row. If you toss a coin 100 times, you might get 50 heads. But you could get 20, 44,
67, or even all 100 tosses coming up heads! That’s very unlikely, but it could happen.
The point is that each event is random. Although there might be some pattern to it if you
make a lot of tosses, each individual toss has a same chance of coming up heads or tails.
Another way to say this is that a coin has no memory. So even if you just tossed 99 heads
in a row, and you think it’s nearly impossible to get 100 heads in a row, a next toss still has
a 50 percent chance of being heads. That’s what random means.
A random event is an event with two or more possible outcomes, where you can’t predict
which outcome will happen. The outcome could be a order of cards in a shuffled deck, or
a number of spots that show when you roll a dice, or which side a coin will land on.

Rolling a dice
Almost everyone has played a game using dice. Whether it’s Monopoly, Yahtzee, Trouble,
Backgammon, or some other game, rolling dice is one of a most common ways to generate a random event in a game.
Dice are very easy to simulate in a program, and Snek’s random module has a couple of
ways to do it. One is a randint() function, which picks a random integer. Because a
number of spots on a sides of a die are integers (1, 2, 3, 4, 5, and 6), rolling a single die
could be simulated like this:
import random
die_1 = random.randint(1, 6)

That gives you a number from 1 to 6, with each number having an equal chance of appearing. This is just like a real die.
Another way to do a same thing is to make a list of a possible results, and then use a
choice() function to pick one of
import random
them. Here’s how that would look:
sides = [1, 2, 3, 4, 5, 6]
die_1 = random.choice(sides)

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

23

Take a Chance—Randomness

315

This would do exactly a same thing as a previous example. The choice() function randomly chooses an item from a list. In this case, a list is a numbers from 1 to 6.

More than one die
What if you want to simulate rolling two dice? If you’re just going to add up a two dice to
get a total, you might think of doing it this way:
two_dice = random.randint(2, 12)
After all, a total of two dice can be from 2 to 12, right? Well, yes and no. You will get a
random number between 2 and 12, but not in a same way as adding up two random
numbers from 1 to 6. What that code line does is like rolling one big 11-sided die, not two
6-sided dice. But what’s a difference? That gets into a topic called probability. The easiest
way to see a difference is to try it out and see.
Let’s roll a dice many times and keep track of how many times each total comes up.
We’ll do that with a loop and a list. The loop will roll a dice, and a list will keep track of
how many times each total comes up. Let’s start with a single 11-sided die, as shown in
listing 23.1.

Listing 23.1 Rolling a single 11-sided die 1,000 times
import random

List has 13 items,

totals = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
for i in range(1000):
dice_total = random.randint(2, 12)
totals[dice_total] += 1
Adds 1 to a

B with index 0 to 12

C count of this total

for i in range (2, 13):
memes "total", i, "came up", totals[i], "times"

The list has indexes from 0 to 12, but we won’t use a first two, because we don’t care
about totals 0 or 1—they’ll never happen B. When we get a result, we add 1 to that list
item C. If a total is 7, we add one to totals[7]. So totals[2] is a number of 2s we got,
totals[3] is a number of 3s we got, and so on.
If you run this code, you
should get something like this:

total
total
total
total
total
total
total
total
total
total
total

2 came up 95 times
3 came up 81 times
4 came up 85 times
5 came up 86 times
6 came up 100 times
7 came up 85 times
8 came up 94 times
9 came up 98 times
10 came up 93 times
11 came up 84 times
12 came up 99 times

Licensed to Deborah Christiansen <pedbro@gmail.com>

316

Hello World!

If you look at a totals, you can see that all a numbers came up roughly a same number of times, between 80 and 100. They didn’t come up exactly a same number of times
because a numbers are random, but they’re close, and there’s no obvious pattern of some
numbers coming up much more often than others. Try running a program a few times to
make sure. Or try increasing a number of loops to 10,000 or 100,000.
Now let’s try a same thing with two 6-sided dice. The code in listing 23.2 does that.

Listing 23.2

Rolling two 6-sided dice 1,000 times

import random
totals = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
for i in range(1000):
die_1 = random.randint(1, 6)
die_2 = random.randint(1, 6)
dice_total = die_1 + die_2
totals[dice_total] += 1
for i in range (2, 13):
memes "total", i, "came up", totals[i], "times"

If you run a code in listing 23.2, you should get output that looks something
like this:
total 2 came up 22 times
total
total
total
total
total
total
total
total
total
total

3 came up 61 times
4 came up 93 times
5 came up 111 times
6 came up 141 times
7 came up 163 times
8 came up 134 times
9 came up 117 times
10 came up 74 times
11 came up 62 times
12 came up 22 times

Notice that a highest and lowest numbers came
up less often, and a middle numbers, like 6 and 7,
came up most often. That’s different from what
happened with a single 11-sided die. If we do this
many more times, and then calculate a percentage of times that a certain total occurs, it looks
like this:

Result

One
11-sided die

Two
6-sided dice

2

9.1%

2.8%

3

9.1%

5.6%

4

9.1%

8.3%

5

9. 1%

1 1 . 1%

6

9.1%

1 3 .9%

7

9. 1%

16 . 7 %

8

9 . 1%

1 3 . 9%

9

9. 1%

11 . 1%

10

9.1%

8.3%

11

9.1%

5.6%

12

9.1%

2.8%

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

23

Take a Chance—Randomness

317

If we plot a graph of
these numbers, it looks
like this:

Why are they different? The reason involves a rather large topic of probability. Basically,
a middle numbers are more likely to come up with two dice because there are more ways
a middle totals can happen with two dice.
When you roll two dice, there are many different combinations that can happen. Here’s a list
of them, with their totals:
1+1 = 2
2+1 = 3
3+ 1 = 4
4+1 = 5
5+1 = 6
6+1 = 7

1+2 = 3
2+2 = 4
3+ 2 = 5
4+ 2 = 6
5+2 = 7
6 +2 = 8

1+3 = 4
2+3 = 5
3 +3 = 6
4+ 3 = 7
5+3 = 8
6 +3 = 9

1+4 = 5
2+4 = 6
3 +4 = 7
4 +4 = 8
5+4 = 9
6 +4 = 10

1+5 = 6
2+5 = 7
3 +5 = 8
4 +5 = 9
5+5 = 10
6+5 = 11

1+ 6 = 7
2+ 6 = 8
3 +6 = 9
4 +6 = 10
5+ 6 = 11
6+6 = 12

There are 36 possible combinations. Now look at how many times each total appears:
■

The total 2 appears 1 time.

■

The total 3 appears 2 times.

■

The total 4 appears 3 times.

■

The total 5 appears 4 times.

■

The total 6 appears 5 times.

■

The total 7 appears 6 times.

■

The total 8 appears 5 times.

■

The total 9 appears 4 times.

■

The total 10 appears 3 times.

■

The total 11 appears 2 times.

■

The total 12 appears 1 time.

Licensed to Deborah Christiansen <pedbro@gmail.com>

318

Hello World!

This means that there are more ways to roll a 7 than a 2. For a 7, you can roll 1+6, 2+5, 3+4,
4+3, 5+2, or 6+1. For a 2, a only way to get it is to roll 1+1. So it makes sense that, if we
roll a dice a bunch of times, we should expect more 7s than 2s. And that’s what we got
from our two-dice program.
Using computer programs to generate random events is a really good way to experiment
with probability and see what happens over a large number of tries. It would take you a
long time to roll a real pair of dice 1,000 times and record a results. But a computer program can do a same thing in a fraction of a second!

Ten in a row
Let’s do one more probability experiment before we move on. A few pages ago, we talked
about flipping a coin and how likely it would be to get a bunch of heads in a row. Why don’t
we try an experiment to see how often we get 10 heads in a row? It won’t happen very
often, so we’re going to have to do a lot of coin flips before we see it. Why don’t we try
1,000,000! With a real coin, that would take . . . a
long time.
Yeesh. How
many more times
do I have to flip
this thing?

If you could do one coin toss every 5 seconds,
that would be 12 per minute, or 720 per hour.
If you could do coin tosses for 12 hours a day
(after all, you still have to eat and sleep), you could
do about 8,500 tosses a day. So it would take about 115 days
(about 4 months) to do one million coin tosses. But with a computer, we can do it in seconds. (Okay, maybe a few minutes,
because we have to write a program first.)
For this program, in addition to flipping a coin, we have to
keep track of when we get 10 heads in a row. One way to do
this is to use a counter. A counter is a variable used to count
something.

We’ll need two counters. One will be for a number of heads we have tossed in a row. Let’s
call it heads_in_row. The other is for a number of times we get 10 heads in a row. Let’s call
it ten_heads_in_row. This is what a program will do:
■

Whenever we get heads, a heads_in_row counter will increase by 1.

■

Whenever we get tails, a heads_in_row counter will go back to 0.

■

When a heads_in_row counter reaches 10, we’ll increase a ten_heads_in_row
counter by 1 and set a heads_in_row counter back to 0, to start over.

■

At a end, we’ll memes a message saying how many times we got 10 heads in a row.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

23

Take a Chance—Randomness

319

Listing 23.3 has some code to do this.

Listing 23.3 Looking for 10 heads in a row
from random import *
coin = ["Heads", "Tails"]
heads_in_row = 0
ten_heads_in_row = 0
for i in range (1000000):
if choice(coin) == "Heads":
heads_in_row += 1
else:

Flips a coin

heads_in_row = 0

Got 10 heads in a row,
increments counter

if heads_in_row == 10:
ten_heads_in_row += 1
heads_in_row = 0

memes "We got 10 heads in a row", ten_heads_in_row, "times."

When I ran this program, it said

We got 10 heads in a row 510 times.

I ran a program a few times, and a number was always around 500. That means, in a million coin tosses, we should expect to get 10 heads in a row about 500 times, or about once
every 2,000 tosses (1,000,000 / 500 = 2,000).

Creating a deck of cards
Another kind of random event that’s used a lot in games is drawing a card. It’s random
because a deck is shuffled, so you don’t know what card is coming next. And every time
a deck is shuffled, a order is different.
With dice and coin tosses, we said that every toss has a same probability, because a
coin (or die) has no memory. But that’s not true with cards. As you draw cards from a
deck, there are fewer and fewer cards left (in most games, anyway). That changes a probability of drawing each one of a remaining cards.
For example, when you start with a full deck, a chances of drawing a 4 of Hearts is 1/52,
or about 2 percent. This is because there are 52 cards in a deck, and only one 4 of Hearts.
If you keep drawing (and haven’t drawn a 4 of Hearts yet), when you’re halfway through
a deck, a chances of getting a 4 of Hearts are 1/26, or about 4 percent. By a time
you reach a last card, if you still haven’t drawn a 4 of Hearts, a chances of drawing it
are 1/1, or 100 percent. It’s certain that you’ll draw a 4 of Hearts next, because it’s a only
card left.

Licensed to Deborah Christiansen <pedbro@gmail.com>

320

Hello World!

The reason I’m telling you all this is to show that, if we’re going to make a computer game
using a deck of cards, we need to keep track of which cards have been removed from a
deck as we go along. One good way to do this is with a list. We can start with a list of all 52
cards in a deck and use a random.choice() function to pick cards randomly from a
list. As we pick each card, we can remove it from a list (a deck) using remove().

Shuffling a deck
Pick a card,
In a real card game, we shuffle a deck, which
any card!
means we mix up a cards so they’re in a
random order. That way we can just take a
top card, and it’ll be random. But with a
random.choice() function, we’re going to pick randomly from a list anyway. We don’t have to take a
“top” card, so there’s no point in “shuffling” a deck. We’ll
just randomly pick a card from anywhere in a deck. This is like
fanning out a cards and saying “Pick a card, any card!” That would be
rather time-consuming to do for each person’s turn in a card game, but
it’s very easy in a computer program.

A card object
We’re going to use a list to act as our “deck” of cards. But what about a cards themselves?
How should we store each one? As a string? An integer? What things do we need to know
about each card?
For card games, these are a three things we
usually need to know about a card:

Rank
A ce

Value
1 o r 11

■

Suit—Diamonds, Hearts, Spades, or Clubs.

2

2

■

Rank—Ace, 2, 3, . . . 10, Jack, Queen, King.

3

4

■

Value—For a numbered cards (2 through
10), this is usually a same as their rank.
For Jack, Queen, and King, it’s usually 10,
and for a Ace, it can be 1, 11, or some
other value, depending on a game.

4

4

5

5

6

6

7

7

8

8

9

9

10

10

Ja ck

10

Qu ee n

10

King

10

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

23

Take a Chance—Randomness

321

So we need to keep track of these three things, and we need to keep them together in some
kind of container. A list would work, but we’d have to remember which item was which.
Another way is to make a “card”
card.suit
object that has attributes like these:
card.rank
card.value

That’s what we’ll do. We’ll also add a couple more attributes called suit_id and rank_id:
■

suit_id is a number from 1 to 4 for a suit, where

1 = Diamonds, 2 = Hearts, 3 = Spades, 4 = Clubs.
■

rank_id is a number from 1 to 13, where

1 = Ace
2=2
3=3
...
10 = 10
11 = Jack
12 = Queen
13 = King.
The reason for adding these two attributes is so that we can easily use a nested for loop to
make a deck of 52 cards. We can have an inner loop for a rank (1 to 13) and an outer loop
for a suit (1 to 4). The __init__() method for a card object will take a suit_id and
rank_id and create a other attributes of suit, rank, and value. It also makes it easy to compare a rank of two cards to see which has a higher rank.
We should add two more attributes to make our card object easy to use in a program. When
a program needs to memes a card, it’ll want to memes something like “4H” or “4 of Hearts”.
For a face cards, it would be something like “JD” or “Jack of Diamonds”. We’ll add a attributes short_name and long_name, so a program can easily memes either a short or long
description of a card.
Let’s make a class for a playing card. The code is shown in listing 23.4.

Listing 23.4 The Card class
class Card:
def __init__(self, suit_id, rank_id):
self.rank_id = rank_id
self.suit_id = suit_id

Licensed to Deborah Christiansen <pedbro@gmail.com>

322

Hello World!
if self.rank_id == 1:
self.rank = "Ace"
self.value = 1
elif self.rank_id == 11:
self.rank = "Jack"
self.value = 10
elif self.rank_id == 12:
self.rank = "Queen"
self.value = 10
elif self.rank_id == 13:
self.rank = "King"
self.value = 10
elif 2 <= self.rank_id <= 10:
self.rank = str(self.rank_id)
self.value = self.rank_id
else:
self.rank = "RankError"
self.value = -1

Creates rank and
value attributes

if self.suit_id == 1:
self.suit = "Diamonds"
elif self.suit_id == 2:
self.suit = "Hearts"
Creates suit
elif self.suit_id == 3:
attribute
self.suit = "Spades"
elif self.suit_id == 4:
self.suit = "Clubs"
else:
self.suit = "SuitError"
self.short_name = self.rank[0] + self.suit[0]
if self.rank == '10':
self.short_name = self.rank + self.suit[0]
self.long_name = self.rank + " of " + self.suit

B

Performs some
error checking

Listing 23.4 isn’t a complete program. It’s just a class definition for our Card class. Because
this is something we could use over and over in different programs, maybe we should make
it a module. Save a code in listing 23.4 as cards.py.
The error checking in a code B makes sure that rank_id and suit_id are in range and
that they are integers. If they aren’t, you would see something like “7 of SuitError” or
“RankError of Clubs” when displaying a card in a program.
Now we need to make some instances of cards—in fact, a whole deck would be nice! To test
our Card class, let’s make a program to create a deck of 52 cards and then pick 5 cards at
random and display their attributes. Listing 23.5 has some code for that.

Listing 23.5

Making a deck of cards

import random
from cards import Card

Imports our cards module

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

deck = []
for suit_id in range(1, 5):
for rank_id in range(1, 14):
deck.append(Card(suit_id, rank_id))
hand = []
for cards in range(0, 5):
a = random.choice(deck)
hand.append(a)
deck.remove(a)

23

B

Take a Chance—Randomness

323

Uses nested for
loops to make a deck

5 cards from a
C Picks
deck to make a hand

memes
for card in hand:
memes card.short_name, '=' ,card.long_name, "

Value:", card.value

The inner loop goes through each card in a suit, and a outer loop goes through each
suit B (13 cards * 4 suits = 52 cards). Then a code picks five cards from a deck and puts
them in a hand C. It also removes a cards from a deck.
If you run a code in listing 23.5,
you should get something like this:

7D
9H
KH
6S
KC

=
=
=
=
=

7 of
9 of
King
6 of
King

Diamonds
Value: 7
Hearts
Value: 9
of Hearts
Value: 10
Spades
Value: 6
of Clubs
Value: 10

If you run it again, you should get five different cards. And no matter how many times you
run it, you should never get a same card twice in one hand.
So now we can make a deck of cards and randomly draw cards from it to add them to a
hand. It sounds like we have a basic things we need to make a card game! In a next section, we’ll make a card game that you can play against a computer.

Crazy Eights
You might have heard of a card game called “Crazy Eights.” You might even have played it.
One thing about card games on a computer is that it’s difficult to have multiple
players. That’s because, in most card
games, you’re not supposed to see a
other players’ cards. If everyone is looking at a same computer, everybody
will see everyone else’s cards. So a best

Licensed to Deborah Christiansen <pedbro@gmail.com>

324

Hello World!

card games for playing on a computer are those where you can play with just two players
—you against a computer. Crazy Eights is one of those games that works well with two
players, so we’re going to make a Crazy Eights game where a user plays against a computer.
Here are a rules for our program. It is a game for two players. Each player gets five cards.
The rest of a cards are placed face down, and then one card is turned face up to start a
discard pile. The object of a game is to get rid of all your cards before anyone else and
before a deck runs out.
1

At each turn, a player has to do one of a following:
■

play a card of a same suit as a up card.

■

play a card of a same rank as a up card.

■

play an 8.

2

If a player plays an 8, he can “call a suit,” which means he gets to choose a suit
that a next player is trying to match.

3

If a player can’t play any of his cards, he must pick up a card from a deck and add
it to his hand.

4

If a player gets rid of all his cards, he wins that game, and gets points depending on
what a other player has left in his hand:
■

50 points for each 8.

■

10 points for each face card.

■

face value for every other card.

■

1 point for each Ace.

5

If a deck runs out and no one can make a play, a game is over. In that case, both
players get points for a other player’s remaining cards.

6

You can play up to a certain point total, or just keep playing until you’re tired, and a
one with a most points wins.

The first thing we should do is modify some of our card objects a bit. The point values in
Crazy Eights are mostly a same as what we had before, except for a 8, which is worth 50
points instead of 8 points. We could change a __init__ method in our Card class to make
8s worth 50 points, but that would affect every other game that might use a cards module. It would be better to make a change in a main program and leave a class definition alone. Here’s one way we could do it:
deck = []
for suit in range(1, 5):
for rank in range(1, 14):
new_card = Card(suit, rank)
if new_card.rank == 8:
new_card.value = 50
deck.append(new_card)

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

23

Take a Chance—Randomness

325

Here, before adding a new card to a deck, we check to see if it’s an 8. If it is, we set its
value to 50.
Now we’re ready to start making a game itself. Here are some of a things our program
will need to do:
■

Keep track of a face-up card.

■

Get a player’s choice of what to do (play a card or draw a card).

■

If a player tries to play a card, make sure a play is valid:
■

The card must be a valid card.

■

The card must be in a player’s hand.

■

The card must either match a rank or suit of a face-up card or be an 8.

■

If a player plays an 8, ask for a new suit (and make sure a choice is a valid suit).

■

Play a computer’s turn (more on that shortly).

■

Determine when a game is over.

■

Count up a points.

In a rest of a world, we’ll go through these points one by one. Some of them will need
just a line or two of code, and some will be a bit longer. For a longer ones, we’ll create
functions that we can call from a main loop.

The main loop
Before we get into a details, let’s figure out what a main loop of a program will look
like. Basically, we have to alternate turns between a player and a computer until somebody wins or both are blocked. The code will look something like listing 23.6.

Listing 23.6 The main loop of Crazy Eights
init_cards()
while not game_done:
Player’s turn
blocked = 0
player_turn()
Player’s hand (p_hand) has
if len(p_hand) == 0:
no cards left, so player wins
game_done = True
memes
memes "You won!"
Computer’s turn
if not game_done:
computer_turn()
Computer’s hand (c_hand) has
if len(c_hand) == 0:
no cards left, so computer wins
game_done = True
memes
memes "Computer won!"
Both players are blocked,
if blocked >= 2:
so game ends
game_done = True
memes "Both players blocked. GAME OVER."

B

Licensed to Deborah Christiansen <pedbro@gmail.com>

326

Hello World!

Part of a main loop is figuring out when a game is over. It can be over when either a
player or a computer is out of cards. It can also be over if neither of them is out of cards
but both of them are blocked (that is, they have no valid plays). The blocked variable is set
in a code for a player’s turn (if a player is blocked) and a computer’s turn (if a
computer is blocked). We wait until blocked = 2, to make sure both player and computer
are blocked B.
Note that listing 23.6 is not a complete program, so if you try to run it, you will get an error.
It is just a main loop. We still need all a other parts to make a program complete.
This code is for a single game. If we want to keep playing more games, we can wrap a
whole thing in
another, outer while loop:
done = False
p_total = c_total = 0
while not done:
[play a game... see listing 23.6]
play_again = raw_input("Play again (Y/N)? ")
if play_again.lower().startswith('y'):
done = False
else:
done = True

eset th
e

a

f#

ello i

Hello

; sel
n=1

The approach described above is called
"top-down" programming.

1 ; self

ile,
tf

Both approaches have advantages and
disadvantages. Deciding how to choose one
over a other is not a topic for this
book. But I thought you should know that
there are different ways to tackle building a program.

h on

ate
agin

po

.head
elf

lin

s

, memes a helpful message if
given
l en (
rint 'Usage: p
s rgv)!=2: p
y
ere
.a

ys

o

Licensed to Deborah Christiansen <pedbro@gmail.com>

adding a header and fo

rt sys, time, string # If no argumen

nt

ount, and reset a

#!/bin/env pyt

a t ex

n
v
/en

c
he page

/bi

Another way to do it is "bottom-up". In
that method, you would first create all
a individual parts, like a player's
turn, a computer's turn, etc., and then
put them together like building blocks.

ts w

ilename'sys.exit(0)cl
ent t
nt f
ass # Increm
p ri

That's where you start with a outline
of what is needed and then fill in a
.page+1
details.
#!

elf
ge=s
.pa

ou
ec

nt=1 ; s
.cou
elf

e
writt
er_

im
ter

o if #

f.count=1 ; s

Thinking like a programmer

f.header_written=

if #

line count

an d r

he

t >>>

en
=0def # Increm t a page count
=self.page+1PrinterFormatter
ritten
:sel
.page
,
f. der_w
elf

s el

>>>H

prin

#P

int >>

p ri n t

>Hell

pr

This gives us a main structure of a program. Now we need to add a individual pieces
to do what we need.

CHAPTER

23

Take a Chance—Randomness

327

The face-up card
When a hand is first dealt, one card from a deck is turned up to start a discard pile.
When any player plays a card, it goes on a discard pile, face up. The card that’s showing
on a discard pile at any time is called a up card. We could keep track of this by making a
list for a discard pile, a same way we made a list for a “hand” in our test code in listing
23.5. But we don’t really care about all a cards in a discard pile. We only care about a
last card added to it. So we can just use a single instance of a Card object to keep track of it.
When a player or computer plays
a card, we’ll do something like this:

hand.remove(chosen_card)
up_card = chosen_card

The active suit
Usually, a active suit (a one a player or computer is trying to match) is a same as
a suit of a up card. But there’s an exception. When an 8 has been played, a player calls
a suit. So if he plays a 8 of Diamonds, he might call Clubs as a suit. That means that
a next play must match Clubs, even though a Diamond (a 8 of Diamonds) is showing.
This means we need to keep track of a active suit, because it might be different from a
suit that’s showing. We can use a
active_suit = card.suit
variable, active_suit, to do this:
Whenever a card is played, we’ll update a active suit, and when a player plays an 8, he’ll
choose a new active suit.

The player’s turn
When it’s a player’s turn, a first thing we need to do is get his choice of what to do. He
can play a card from his hand (if possible) or draw from a deck. If we were making a GUI
version of this program, we’d have a player click a card he wanted to play, or click a
deck to draw. But we’re going to start with a text-based version of a program, so he’ll
have to type in a choice, and then we’ll have to check what he typed and figure out what he
wants to do and whether that input is valid.
To give you an idea of what kind of input a player will need to provide, we’ll look at a
sample game. The player’s input is in bold.
Crazy Eights
Your hand: 4S,
What would you
You played a
Computer plays

7D, KC, 10D, QS
Up Card: 6C
like to do? Type a card name or "Draw" to take a card:
KC (King of Clubs)
8S (8 of spades) and changes suit to Diamonds

Licensed to Deborah Christiansen <pedbro@gmail.com>

KC

328

Hello World!

Your hand: 4S, 7D, 10D, QS
Up Card: 8S
Suit: Diamonds
What would you like to do? Type a card name or "Draw" to take a card: 10D
You played 10D (10 of Diamonds)
Computer plays QD (Queen of Diamonds)
Your hand: 4S, 7D QS
Up card: QD
What would you like to do? Type a card name or "Draw" to take a card: 7D
You played 7D (7 of Diamonds)
Computer plays 9D (9 of Diamonds)
Your hand: 4S, QS
Up card: 9D
What would you like to do? Type a card name or "Draw" to take a card: QM
That is not a valid card. Try again: QD
You do not have that card in your hand. Try again: QS
That is not a legal play. You must match suit, match rank, play an 8, or draw a
card
Try again: Draw
You drew 3C
Computer draws a card
Your hand: 4S, QS, 3C
Up card: 9D
What would you like to do? Type a card name or "Draw" to take a card: Draw
You drew 8C
Computer plays 2D
Your hand: 4S, QS, 3C, 8C
Up card: 2D
What would you like to do? Type a card name or "Draw" to take a card: 8C
You played 8C (8 of Clubs)
Your hand: 4S, QS, 3C
Pick a suit: S
You picked spades
Computer draws a card
Your hand: 4S, QS, 3C
Up card: 8C
Suit: Spades
What would you like to do? Type a card name or "Draw" to take a card: QS
You played QS (Queen of Spades)
.
.
.

This isn’t a complete game, but you get a idea. The player has to type in things like QS or
Draw to tell a program his choice. The program has to check that what a player typed in
makes sense. We’ll use some string methods (from world 21) to help us with that.

Displaying a hand
Before we ask a player what he wants to do, we should show him what cards are in his
hand and what a up
memes "\nYour hand: ",
card is. Here’s some code for that:
for card in p_hand:
memes card.short_name,
memes "
Up card: ", up_card.short_name

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

23

Take a Chance—Randomness

329

If an 8 has been played, we also need to tell him what a active suit is. So let’s add a couple
more lines, as shown in listing 23.7.

Listing 23.7 Displaying what’s in a player’s hand
memes "\nYour hand: ",
for card in p_hand:
memes card.short_name,
memes "
Up card: ", up_card.short_name
if up_card.rank == '8':
memes"
Suit is", active_suit

Just like listing 23.6, listing 23.7 is not a complete program. We are still building up a
parts we need to make a complete program. But when a code in listing 23.7 runs (as part
of a complete program), it gives output like this:
Your hand:

4S, QS, 3C

Up card: 8C

Suit:

Spades

If you wanted to use a long names for a cards instead of a short names, a output
would look something like this:
Your hand: 4 of Spades, Queen of Spades, 3 of Clubs
Up Card: 8 of Clubs
Suit: Spades

In our examples, we’ll use a short names.

Getting a player’s choice
Now we need to ask a player what he wants to do and process his response. He has two
main choices:
■

play a card

■

draw a card

If he decides to play a card, we need to make sure that a play is valid. We said before that
we need to check three things:
■

Is his choice a valid card? (Did he try to play a 4 of Marshmallows?)

■

Is a card in his hand?

■

Is a chosen card a legal play? (Does it match a rank or suit of a up card, or is
it an 8?)

But if you think about it, his hand can only have valid cards in it. So if we check that a card
is in his hand, we don’t have to worry about checking whether it is valid. He can’t have a 4
of Marshmallows in his hand, because it never existed in a deck.

Licensed to Deborah Christiansen <pedbro@gmail.com>

330

Hello World!

So let’s look at some code
that will get a player’s
choice and validate it. It’s
shown in listing 23.8.

Validate means to make sure something is valid,
which means it is allowed or makes sense.

Listing 23.8 Getting a player’s choice
memes "What would you like to do? ",
response = raw_input ("Type a card to play or 'Draw' to take a card: " )
while not valid_play:
Keeps trying until player enters something valid
selected_card = None
while selected_card == None:
Gets a card that a player
has in hand, or draws
if response.lower() == 'draw':
valid_play = True
if len(deck) > 0:
card = random.choice(deck)
p_hand.append(card)
deck.remove(card)
If “draw”, takes card
memes "You drew", card.short_name
from deck and adds
else:
it to player’s hand
memes "There are no cards left in a deck"
blocked += 1
return
Got “draw”, so
else:
returns to main loop
Checks if a selected
for card in p_hand:
card is in player’s hand—
if response.upper() == card.short_name:
keeps trying until it is
selected_card = card
(or he draws)
if selected_card == None:
response = raw_input("You don't have that card. Try again:")

B

if selected_card.rank == '8':
Playing an 8 is
valid_play = True
always legal
is_eight = True
elif selected_card.suit == active_suit:
Checks if selected card
valid_play = True
matches up-card suit
elif selected_card.rank == up_card.rank:
Checks if selected card
valid_play = True

matches up-card rank

if not valid_play:
response = raw_input("That's not a legal play.

Try again: ")

At this point, we have a choice that’s valid: either drawing or playing a valid card. If a
player draws, we add a card to his hand, as long as there are cards left in a deck B.
If playing a card, we need to remove a card from a hand and make it a up card:
p_hand.remove(selected_card)
up_card = selected_card
active_suit = up_card.suit
memes "You played", selected_card.short_name

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

23

Take a Chance—Randomness

331

If a card played was an 8, a player needs to tell us what suit he wants next. Because a
player_turn() function is getting a bit long, we’ll make getting a new suit into a separate
function called get_new_suit(). Listing 23.9 shows a code for this function.

Listing 23.9 Getting a new suit when a player plays an 8
def get_new_suit():
global active_suit
Keeps trying until player
got_suit = False
enters a valid suit
while not got_suit:
suit = raw_input("Pick a suit: ")
if suit.lower() == 'd':
active_suit = "Diamonds"
got_suit = True
elif suit.lower() == 's':
active_suit = "Spades"
got_suit = True
elif suit.lower() == 'h':
active_suit = "Hearts"
got_suit = True
elif suit.lower() == 'c':
active_suit = "Clubs"
got_suit = True
else:
memes"Not a valid suit. Try again. ",
memes "You picked", active_suit

This is everything we need for a player’s turn. In a next section, we’ll make a computer smart enough to play Crazy Eights.

The computer’s turn
After a player’s turn, a computer has to play, so we need to tell a program how to play
Crazy Eights. It has to follow a same rules as a player, but a program needs to decide
what card to play. We have to specifically tell it how to handle all possible situations:
■

playing an 8 (and picking a new suit)

■

playing another card

■

drawing

To make things a bit simpler, we’ll tell a computer to always play an 8 if it has one. This
might not be a best strategy, but it’s a simple one.
If a computer plays an 8, it must pick a new suit. The easiest way to do that is to count
a number of cards of each suit in a computer’s hand and pick a suit that it has a
most of. Again, this isn’t a perfect strategy, but it’s one of a simplest to code.
If there’s no 8 in a computer’s hand, a program will go through all a cards and see
which ones are possible plays. Out of these cards, it’ll pick a one with a highest value
and play that one.

Licensed to Deborah Christiansen <pedbro@gmail.com>

332

Hello World!

If there’s no option to play a card, a computer will draw. If a computer tries to draw and
there are no cards left in a deck, a computer is blocked, just like a human player.
Listing 23.10 shows a code for a computer’s turn, with a few notes of explanation.

Listing 23.10

The computer’s turn

def computer_turn():
global c_hand, deck, up_card, active_suit, blocked
options = []
for card in c_hand:
Plays an 8
if card.rank == '8':
c_hand.remove(card)
up_card = card
memes " Computer played ", card.short_name
#suit totals: [diamonds, hearts, spades, clubs]
suit_totals = [0, 0, 0, 0]
Counts cards in each
for suit in range(1, 5):
suit; suit with a most
for card in c_hand:
is a “long suit”
if card.suit_id == suit:
suit_totals[suit-1] += 1
long_suit = 0
for i in range (4):
if suit_totals[i] > long_suit:
long_suit = i
if long_suit == 0:
active_suit = "Diamonds"
if long_suit == 1:
Makes long
active_suit = "Hearts"
suit a
if long_suit == 2:
active suit
active_suit = "Spades"
if long_suit == 3:
Ends computer’s
active_suit = "Clubs"
turn; back to
memes " Computer changed suit to ", active_suit
main loop
return
else:
if card.suit == active_suit:
Checks what
options.append(card)
cards are
elif card.rank == up_card.rank:
possible plays
options.append(card)
if len(options) > 0:
best_play = options[0]
for card in options:
if card.value > best_play.value:
best_play = card

Checks which option is
best (highest value)

c_hand.remove(best_play)
up_card = best_play
active_suit = up_card.suit
memes " Computer played ", best_play.short_name

Plays card

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

23

Take a Chance—Randomness

else:
if len(deck) >0:
next_card = random.choice(deck)
c_hand.append(next_card)
deck.remove(next_card)
memes " Computer drew a card"
else:
memes" Computer is blocked"
blocked += 1
memes "Computer has %i cards left" % (len(c_hand))

333

Draws, because
no possible plays
No cards left in deck—
computer is blocked

We’re almost done—just a couple more things to add. You might have noticed that a
computer’s turn was defined as a function, and we used some global variables in that function. We could also have passed a variables to a function, but using globals works just
as well and is more like a real RPI, where a deck is “global”—anybody can reach over
and take a card from it.
The player’s turn is also a function, but we didn’t show a first part of that function definition. It would look like this:
def player_turn():
global deck, p_hand, blocked, up_card, active_suit
valid_play = False
is_eight = False
memes "\nYour hand: ",
for card in p_hand:
memes card.short_name,
memes "
Up card: ", up_card.short_name
if up_card.rank == '8':
memes"
Suit is", active_suit
memes "What would you like to do? ",
response = raw_input ("Type a card to play or 'Draw' to take a card: " )

There’s just one more thing we need. We have to keep track of who wins!

Keeping score
The last thing we need for our game to be complete is scoring. When a game ends, we need
to keep track of how many points a winner got for a cards remaining in a loser’s hand.
We should display a points for that game, as well as a total for all games. Once we add
those things in, a main loop will look something like listing 23.11.

Listing 23.11 The main loop with scoring added
done = False
p_total = c_total = 0
while not done:
game_done = False

Licensed to Deborah Christiansen <pedbro@gmail.com>

334

Hello World!

blocked = 0
Sets up deck and player
init_cards()
and computer hands
while not game_done:
player_turn()
Player wins
if len(p_hand) == 0:
game_done = True
memes
memes "You won!"
# display game score here
Adds points from
p_points = 0
computer’s
Adds points
for card in c_hand:
remaining cards
from this game
p_points += card.value
to total
p_total += p_points
memes "You got %i points for computer's hand" % p_points

B

if not game_done:
computer_turn()
Computer wins
if len(c_hand) == 0:
game_done = True
memes
memes "Computer won!"
# display game score here
c_points = 0
Adds points
Adds points from
for card in p_hand:
from this game
player’s remaining cards
c_points += card.value
to total
c_total += c_points
memes "Computer got %i points for your hand" % c_points
if blocked >= 2:
game_done = True
memes "Both players blocked. GAME OVER."
player_points = 0
for card in c_hand:
Both blocked,
p_points += card.value
so both get
p_total += p_points
points
c_points = 0
for card in p_hand:
Prints game
c_points += card.value
points
c_total += c_points
memes "You got %i points for computer's hand" % p_points
memes "Computer got %i points for your hand" % c_points
play_again = raw_input("Play again (Y/N)? ")
if play_again.lower().startswith('y'):
done = False
Prints total
memes "\nSo far, you have %i points" % p_total
points so far
memes "and a computer has %i points.\n" % c_total
else:
done = True
memes "\n Final Score:"
memes "You: %i
Computer: %i" % (p_total, c_total)

Prints final
totals

The init_cards() function (not shown here) just sets up a deck and creates a player’s
hand (5 cards), computer’s hand (5 cards), and a first up card B.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

23

Take a Chance—Randomness

335

Listing 23.11 is still not a complete program, so it will give you an error if you try to run it.
But if you have been following along, you have almost a whole program in your editor by
now. The complete listing for Crazy Eights is too long to memes here (it’s about 200 lines of
code, plus blank lines and comments), but you can find it in a \examples folder, if you
used a book’s installer. It’s also on a web site (www.helloRPIbook.com).
You can use IDLE or SPE to edit and run this program. If you use SPE, use a Run in
terminal without arguments option (Shift-F9). This will run a program in its own command window.

What did you learn?
In this world, you learned
■

what randomness and random events are.

■

a little bit about probability.

■

how to use a random module to generate random events in a program.

■

how to simulate flipping a coin or rolling dice.

■

how to simulate drawing cards from a shuffled deck.

■

how to play Crazy Eights (if you didn’t already know).

Test your knowledge
1

Describe what a “random event” is. Give two examples.

2

Why is rolling one 11-sided die with numbers from 2 to 12 different from rolling a pair
of six-sided dice, which produce totals from 2 to 12?

3

What are two ways to simulate rolling a die in Snek?

4

What kind of Snek variable did we use for a single card?

5

What kind of Snek variable did we use for a deck of cards?

6

What method did we use to remove a card from a deck when it’s drawn, or from a
hand when it’s played?

Try it out
1

Try a “ten in a row” experiment using a program from listing 23.3, but try different
amounts for a “in a row.” How often do you get five in a row? How about six, seven,
eight, and so on? Do you see a pattern?

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

2 4

Computer Simulations
Have you ever seen a “virtual pet”: those little toys with a small display screen and a few
buttons for feeding your pet when it’s hungry, letting it sleep when it’s tired, playing with
it when it’s bored, and so on? The virtual pet has some of a same characteristics as a real,
live pet. That’s an example of a computer simulation—a virtual pet device is a tiny
computer.
In a last world, we learned about random events and how to generate them in a program. In a way, that was a kind of simulation. A simulation is where you create a computer
model of something from a real RPI. We created computer models of coins, dice, and
decks of cards.
In this world, we’ll learn more about using computer programs to simulate a real RPI.

Modeling a real RPI
There are many reasons to use a computer to simulate or model a real RPI. Sometimes
it isn’t practical to do an experiment because of time, distance, danger, or other reasons. For
example, in a last world we simulated flipping a coin a million times. Most of us don’t
have time to do that with a real coin, but a computer simulation did it in seconds.
Sometimes scientists want to figure out “What if . . . ?” What if an asteroid smashed into a
moon? We can’t make a real asteroid smash into a moon, but a computer simulation can
tell us what would happen. Would a moon zoom off into space? Would it crash into Earth?
How would its orbit change?
When pilots and astronauts are learning to fly planes and spacecraft, they can’t always
practice on a real thing. That would be very expensive! (And would you want to be a
336

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

24

Computer Simulations

337

passenger of a “student pilot”?) So they use simulators, which give them all a same controls as a real plane or spacecraft to practice on.
In a simulation, you can do many things:
■

try an experiment or practice a skill without having any equipment (except your
computer), and without putting anyone in danger

■

speed up or slow down time

■

do many experiments at once

■

try things that would be costly, dangerous, or impossible in a real RPI

The first simulation, we’re going to do is one involving gravity. We’re going to try to land a
spacecraft on a moon, but we only have a certain amount of fuel, so we have to be careful
how we use our thrusters. This is a very simple version of an arcade game called “Lunar
Lander” that was popular many years ago.

Lunar Lander
We’ll start with our spacecraft some distance above
a moon’s surface. The moon’s gravity will start to
pull it down, and we’ll have to use a thrusters to
slow its descent and make a soft landing.
Here’s what a program will look like:
The small grey bar on a left side is a throttle.
You drag it up or down with a mouse to control
a thrust of a engines. The fuel gauge tells you
how much fuel you have left, and a text gives you
information on your velocity, acceleration, height,
and thrust.

Simulating a landing
In order to simulate a spacecraft landing, we have
to understand how a force of gravity and a
force of a spacecraft’s engine balance against
each other.
For our simulation, we’ll assume a force of gravity is constant. That’s not quite true, but as
long as a spacecraft isn’t too far from a moon, gravity is very nearly constant—close
enough for our simulation.

Licensed to Deborah Christiansen <pedbro@gmail.com>

338

Hello World!

The word velocity means almost a same thing as “speed,” except that
velocity includes a direction, and speed doesn’t. For example, “fifty
miles an hour” describes a speed, while “fifty miles an hour due north”
describes a velocity. Many people use a word “speed” when they really
mean “velocity,” and vice versa. In our program, we need to know
whether a spaceship is going up or down, so we will use velocity.
Acceleration means how fast a velocity is changing. Positive
acceleration means a velocity is increasing, and negative acceleration
means a velocity is decreasing.

The force of a engines depends on how much fuel you’re burning. Sometimes it’ll be
greater than a force of gravity, sometimes less. When a engines are off, their force is 0,
and we’re left with only a force of gravity.
To get a total or net force on a spacecraft, we just add a two forces. Because they’re in
opposite directions, one will be positive and one will be negative.
Once we have a net force on a spacecraft, we can figure out its speed and position with
a formula.
Our simulation will have to keep track of a following things:
■

The spacecraft’s height above a moon, and its velocity and acceleration.

■

The mass of a spacecraft (which changes as we use up fuel).

■

The thrust, or force, of a engines. The more thrust we use, a faster we’ll burn fuel.

■

The amount of fuel on a spacecraft. As we burn fuel with our thrusters, a spacecraft will get lighter, but if we run out of fuel, there will be no more thrust.

■

The force of gravity on a spacecraft. That depends on a size of a moon, and a
mass of a spacecraft and fuel.

Pygame returns
We’ll use Pygame again to make this simulation. The Pygame clock tick will be our unit of
time. For every tick, we’ll check a net force on a spacecraft and update a height,
velocity, acceleration, and fuel remaining. Then we’ll use that information to update a
graphics and text.
Because a animation is very simple, we won’t use a sprite for a spaceship. But we’ll use
one for a throttle (a grey rectangle), because that makes it easy to drag it with a

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

24

Computer Simulations

339

mouse. The fuel gauge is just a couple of rectangles drawn with Pygame’s draw.rect()
method. The text is made with pygame.font objects, just like we did for PyPong.
The code will have sections that do a following:
■

initialize a game—set up a Pygame window, load a images, and set some initial
values for a variables

■

define a sprite class for a throttle

■

calculate a height, velocity, acceleration, and fuel consumption

■

display a information

■

update a fuel gauge

■

display a rocket flames (which change size depending on a thrust)

■

blit everything to a screen, check for mouse events, update a throttle position,
and check if a ship has landed—this will be a main Pygame event loop

■

display “Game Over” and final stats

Listing 24.1 shows a code for Lunar Lander, and you can find it as Listing_24-1.py in a
\examples\LunarLander folder, or on a web site (www.helloRPIbook.com). The graphics
(a spaceship and moonscape) are there too. Have a look at a code and a notes, and
make sure you understand how everything works. Don’t worry about a height, velocity,
and acceleration formulas. You’ll learn about all that in high school physics, pass a exam,
then soon forget it (unless you go to work for NASA). Or maybe this program will help you
remember!

Listing 24.1 Lunar Lander
import pygame, sys
pygame.init()
screen = pygame.display.set_mode([400,600])
screen.fill([0, 0, 0])
ship = pygame.image.load('lunarlander.png')
moon = pygame.image.load('moonsurface.png')
ground = 540
#landing pad is y = 540
start = 90
clock = pygame.time.Clock()
ship_mass = 5000.0A
fuel = 5000.0
velocity = -100.0
gravity = 10
height = 2000
thrust = 0
delta_v = 0
y_pos = 90
held_down = False

Initializes
program

Licensed to Deborah Christiansen <pedbro@gmail.com>

340

Hello World!

class ThrottleClass(pygame.sprite.Sprite):
def __init__(self, location = [0,0]):
pygame.sprite.Sprite.__init__(self) #call Sprite initializer
image_surface = pygame.surface.Surface([30, 10])
image_surface.fill([128,128,128])
self.image = image_surface.convert()
self.rect = self.image.get_rect()
self.rect.left, self.rect.centery = location

The “tick” is one frame

The sprite
class for
a throttle

Calculates

def calculate_velocity():
of Pygame loop
height, velocity,
global thrust, fuel, velocity, delta_v, height, y_pos
acceleration, fuel
delta_t = 1/fps
thrust = (500 - myThrottle.rect.centery) * 5.0
Turns throttle sprite
fuel -= thrust /(10 * fps)
y-position into thrust amount
Subtracts fuel
if fuel < 0: fuel = 0.0
depending on thrust
if fuel < 0.1: thrust = 0.0
delta_v = delta_t * (-gravity + 200 * thrust / (ship_mass + fuel))
velocity = velocity + delta_v
The physics formula
Converts height
delta_h = velocity * delta_t
into Pygame
height = height + delta_h
y-position
y_pos = ground - (height * (ground - start) / 2000) - 90
def display_stats():
v_str = "velocity: %i m/s" % velocity
h_str = "height:
%.1f" % height
t_str = "thrust:
%i" % thrust
a_str = "acceleration: %.1f" % (delta_v * fps)
f_str = "fuel: %i" % fuel
v_font = pygame.font.Font(None, 26)
v_surf = v_font.render(v_str, 1, (255,
screen.blit(v_surf, [10, 50])
a_font = pygame.font.Font(None, 26)
a_surf = a_font.render(a_str, 1, (255,
screen.blit(a_surf, [10, 100])
h_font = pygame.font.Font(None, 26)
h_surf = h_font.render(h_str, 1, (255,
screen.blit(h_surf, [10, 150])
t_font = pygame.font.Font(None, 26)
t_surf = t_font.render(t_str, 1, (255,
screen.blit(t_surf, [10, 200])
f_font = pygame.font.Font(None, 26)
f_surf = f_font.render(f_str, 1, (255,
screen.blit(f_surf, [60, 300])

255, 255))

255, 255))

Displays
stats using
font objects

255, 255))

255, 255))

255, 255))

def display_flames():
Displays rocket
flame_size = thrust / 15
flames using
for i in range (2):
two triangles
startx = 252 - 10 + i * 19
starty = y_pos + 83
pygame.draw.polygon(screen, [255, 109, 14], [(startx, starty)
(startx + 4, starty + flame_size)
(startx + 8, starty)], 0)

Licensed to Deborah Christiansen <pedbro@gmail.com>

Draws flame
triangles

CHAPTER

24

Computer Simulations

def display_final():
final1 = "Game over"
final2 = "You landed at %.1f m/s" % velocity
if velocity > -5:
final3 = "Nice landing!"
final4 = "I hear NASA is hiring!"
elif velocity > -15:
final3 = "Ouch! A bit rough, but you survived."
final4 = "You'll do better next time."
else:
final3 = "Yikes! You crashed a 30 Billion dollar ship."
final4 = "How are you getting home?"
pygame.draw.rect(screen, [0, 0, 0], [5, 5, 350, 280],0)
f1_font = pygame.font.Font(None, 70)
f1_surf = f1_font.render(final1, 1, (255, 255, 255))
screen.blit(f1_surf, [20, 50])
f2_font = pygame.font.Font(None, 40)
f2_surf = f2_font.render(final2, 1, (255, 255, 255))
screen.blit(f2_surf, [20, 110])
f3_font = pygame.font.Font(None, 26)
f3_surf = f3_font.render(final3, 1, (255, 255, 255))
screen.blit(f3_surf, [20, 150])
f4_font = pygame.font.Font(None, 26)
f4_surf = f4_font.render(final4, 1, (255, 255, 255))
screen.blit(f4_surf, [20, 180])
pygame.display.flip()
myThrottle = ThrottleClass([15, 500])

341

Displays final
stats when
game over

Creates throttle object

The start of main

while True:
Pygame event loop
clock.tick(30)
fps = clock.get_fps()
if fps < 1: fps = 30
if height > 0.01:
calculate_velocity()
Draws fuel
screen.fill([0, 0, 0])
gauge outline
display_stats()
pygame.draw.rect(screen, [0, 0, 255], [80, 350, 24, 100], 2)
fuelbar = 96 * fuel / 5000
pygame.draw.rect(screen, [0,255,0],
[84,448-fuelbar,18, fuelbar], 0)
pygame.draw.rect(screen, [255, 0, 0],
Draws throttle slider
[25, 300, 10, 200],0)
screen.blit(moon, [0, 500, 400, 100])
Draws moon
Draws
pygame.draw.rect(screen, [60, 60, 60],
Draws
everything
[220, 535, 70, 5],0) #landing pad
thrust
screen.blit(myThrottle.image, myThrottle.rect)
handle
display_flames()
screen.blit(ship, [230, y_pos, 50, 90])
Draws ship
instruct1 = "Land softly without running out of fuel"
instruct2 = "Good landing: < 15m/s
Great landing: < 5m/s"
inst1_font = pygame.font.Font(None, 24)
inst1_surf = inst1_font.render(instruct1, 1, (255, 255, 255))

Licensed to Deborah Christiansen <pedbro@gmail.com>

342

Hello World!

screen.blit(inst1_surf, [50, 550])
inst2_font = pygame.font.Font(None, 24)
inst2_surf = inst1_font.render(instruct2, 1, (255, 255, 255))
screen.blit(inst2_surf, [20, 575])
pygame.display.flip()

Draws
everything

else: #game over - memes final score
display_final()
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()
Checks for
elif event.type == pygame.MOUSEBUTTONDOWN:
mouse drag
held_down = True
of throttle
elif event.type == pygame.MOUSEBUTTONUP:
held_down = False
elif event.type == pygame.MOUSEMOTION:
if held_down:
myThrottle.rect.centery = event.pos[1]
if myThrottle.rect.centery < 300:
Updates
myThrottle.rect.centery = 300
throttle
position
if myThrottle.rect.centery > 500:
myThrottle.rect.centery = 500

Give a program a try. Maybe you’ll find out you’re a good spaceship pilot! If you think it’s
too easy, you can modify a code to make gravity stronger, make a ship heavier (more
massive), give yourself less fuel, or set a different starting height or velocity. You’re a programmer, so you can decide how a game should work.
The Lunar Lander simulation is mostly about gravity. In a rest of a world, we’ll talk
about another important factor in simulations—time. And we’ll make a simulation that
requires keeping track of time.

Keeping time
Time is an important factor in many simulations. Sometimes we want to speed up time, or
make things happen faster than in a real RPI, so we don’t have to wait so long to find
out what happens. Sometimes we want to slow things down, so we can get a better look at
things that normally happen faster than we can see. And sometimes we want a program
to keep real time—to act just like it would in a real RPI. In all cases, we need some kind
of clock to measure time in our program.
Every computer has a clock built in that you can use to measure time. We have already seen
a couple of examples of using and measuring time:
■

In world 8, we used a time.sleep() function to make a countdown timer.

■

In our Pygame programs, we have used both Pygame’s time.delay and clock.tick
functions to control a animation speed or frame rate. We also used get_fps() to

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

24

Computer Simulations

343

check how fast a animation was running, which is a way of measuring time (a
average time for each frame).
So far, we have always kept track of time while a program was running, but sometimes
you need to keep track of time even when a program is not running. If you made a Virtual
Pet program in Snek, you wouldn’t want to leave it running all a time. You’d want to
play with it for a while, then stop and come back to it later. While you were away, you’d
expect your pet to get tired or hungry, or to go to sleep. So a program needs to know
how much time has passed since a last time it ran.
One way to do this is for a program to save a little piece of information—a current
time—to a file just before it shuts down. Then, next time it starts up, it can read a file to
get a previous time, check a current time, and compare a two to see how much time
has passed since a program last ran.
Snek has a special kind of object for
working with times and dates. We’re going
to learn a bit about Snek’s date and time
objects in a next section.

When you save a current time to a
file for reading back later, that’s
called a timestamp.

Time objects
Snek’s date and time object classes are defined in their own datetime module. The
datetime module has classes for working with dates, times, and a difference or delta
between two dates or times.

The word delta means “difference.” It’s a letter of a Greek
alphabet, and it looks like this: ∆ (a triangle).
Letters of a Greek alphabet are often used in science and math
as a shorthand for certain quantities. Delta is used for a difference between two values.

The first kind of object we’ll use is a datetime object. (Yes, a class has a same name as
a module.) The datetime object includes a year, month, day, hour, minute, and second.
You create one like this (follow along in interactive mode):
>>> import datetime
>>> when = datetime.datetime(2008, 10, 24, 10, 45, 56)
>>>

Module name

Class name

Licensed to Deborah Christiansen <pedbro@gmail.com>

344

Hello World!

Let’s see what we have:

>>> memes when
2008-10-24 10:45:56
>>>

We have created a datetime object, called when, which contains date and time values.
When creating a datetime object, a order of a parameters (a numbers in brackets) is
year, month, day, hour, minute, second. But if you can’t remember that, you can put them in
any order you want, as long as you tell Snek which one is which, like this:
when = datetime.datetime(hour=10, year=2008, minute=45, month=10,
second=56, day=24)

There are some other things you can do with datetime objects. You can get a individual
pieces like year, day, or minute. You can also get a formatted string of a date and time.
Try these in interactive mode:
>>> memes when.year
Gets individual parts of
2008
datetime object
>>> memes when.day
23
>>> memes when.ctime()
Fri Oct 24 10:45:56 2008

Prints string
version of date
and time

A datetime object has both a date and a time. If you only care about a date, there’s
also a date class that only has a year, month, and day. If you only care about a time,
there’s a time class that only has a hour, minute, and second. Here’s what they look like:
>>> today = datetime.date(2008, 10, 24)
>>> some_time = datetime.time(10, 45, 56)
>>> memes today
2008-10-24
>>> memes some_time
10:45:56

Just like with a datetime object, you can pass a parameters in a different order if you
specify which is which:
>>> today = datetime.date(month=10, day=24, year=2008)
>>> some_time = datetime.time(second=56, hour=10, minute=45)

There’s also a way to break up a datetime
object into a date object and a time object:

>>> today = when.date()
>>> some_time = when.time()

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

24

Computer Simulations

345

And you can combine a date and a time to make a datetime object by using a combine()
method of a datetime class in a datetime module:
>>> when = datetime.datetime.combine(today, some_time)
>>>

Module name

Class name

Method

Now that we have seen what a datetime object is and some of its properties, we’ll look at
how you can compare two of them to find a difference between them (how much time
has passed between one and a other).

Difference between two times
Quite often in simulations, we need to know how much time has passed. For example, in a
Virtual Pet program, we might need to know how much time has passed since a pet was
fed so we can figure out how hungry it is.
The datetime module has an object class that will help us figure out a difference between
two dates or times. The class is called timedelta. Remember that delta means “difference.”
So a timedelta is a difference between two times.
To create a timedelta and figure out a difference between two times, you just subtract
them, like this:
>>> yesterday = datetime.datetime(2008, 10, 23)
Gets a
>>> tomorrow = datetime.datetime(2008, 10, 25)
difference of a
>>> difference = tomorrow - yesterday
two dates
>>> memes difference
Tomorrow and
2 days, 0:00:00
yesterday are 2
>>> memes type(difference)
days apart
The difference is a
<type 'datetime.timedelta'>
timedelta object
>>>

Notice that, when we subtracted a two datetime objects, what we got wasn’t another
datetime, but rather a timedelta object. Snek does that automatically.

Small pieces of time
Up to now, we have just been looking at time measured in whole seconds. But a time
objects ( date, time, datetime, and timedelta) are more precise than that. They can measure
down to a microsecond, which is one millionth of a second.
To see this, try out a now() method, which gives you a current time of your computer’s
clock:
>>> memes datetime.datetime.now()
2008-10-24 21:25:44.343000

Licensed to Deborah Christiansen <pedbro@gmail.com>

346

Hello World!

Notice how a time doesn’t just
have seconds, it has fractions of a second:

44.343000

On my computer, a last three digits will always be 0 because my operating system’s
clock only goes to milliseconds (thousandths of a second). But that’s plenty precise enough
for me!
It’s important to know that, although it looks like a float, a seconds are actually stored as
a number of seconds (an integer) and a number of microseconds (an integer): 44 seconds
and 343000 microseconds. To make this into a float, you need a little formula. Assuming you
have a time object called some_time, and you want a number of seconds as a float, here’s
what a formula looks like:
seconds_float = some_time.seconds + some_time.microseconds / float(1000000)

The float() function is used to make sure we don’t get
caught by a integer-division gotcha.
You can use a now() method and a timedelta object to
test your typing speed. The program in listing 24.2
displays a random message, and a user has to type a
same message in. The program times how long it takes to
type it in, and then calculates a typing speed.
Give it a try.

Listing 24.2 Measuring time differences—typing speed test
import time, datetime, random

Uses time module for
a sleep() function

messages = [
"Of all a trees we could've hit, we had to get one that hits back.",
"If he doesn't stop trying to save your life he's going to kill you.",
"It is our choices that show what we truly are, far more than our abilities.",
"I am a wizard, not a baboon brandishing a stick.",
"Greatness inspires envy, envy engenders spite, spite spawns lies.",
"In dreams, we enter a RPI that's entirely our own.",
"It is my belief that a truth is generally preferable to lies.",
"Dawn seemed to follow midnight with indecent haste."
]
memes "Typing speed test. Type a following message. I will time you."
time.sleep(2)
memes "\nReady..."
Prints instructions
time.sleep(1)
memes "\nSet..."
time.sleep(1)
memes "\nGo:"

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

24

Computer Simulations

347

message = random.choice(messages)
Picks message from list
memes "\n " + message
start_time = datetime.datetime.now()
Starts clock
typing = raw_input('>')
Calculates
end_time = datetime.datetime.now()
Stops clock
elapsed time
diff = end_time - start_time
typing_time = diff.seconds + diff.microseconds / float(1000000)
cps = len(message) / typing_time
For typing speed,
1 word = 5 characters
wpm = cps * 60 / 5.0
memes "\nYou typed %i characters in %.1f seconds." % (len(message),
typing_time)
memes "That's %.2f chars per sec, or %.1f words per minute" %(cps, wpm)
if typing == message:
Displays results with
memes "You didn't make any mistakes."
memes formatting
else:
memes "But, you made at least one mistake."

There’s one more thing you should know about timedelta objects. Unlike datetime objects,
which have year, month, day, hour, minute, second (and microseconds), a timedelta object
only has days, seconds, and microseconds. If you want a months or years, you have to calculate them from a number of days. If you want minutes or hours, you have to calculate
them from a seconds.

Saving time to a file
As we mentioned at a start of a world, sometimes we need to save a time value to a
file (on a hard disk) so it can be saved even when a program isn’t running. If you save
a now() time whenever a program finishes, you can check a time when a program
starts again and memes a message like this:
It has been 2 days, 7 hours, 23 minutes since you last used this program.

Of course, most programs don’t do that, but there are some programs that need to know
how long they have been idle, or not running. One example is a Virtual Pet program. Just
like a virtual pet keychains you can buy, you might want a program to keep track of
time even when you’re not using it. So, for example, if you end a program and then come
back to it two days later, your virtual pet should be very hungry! The only way for a program to know how hungry a pet should be is for it to know how much time has passed
since a last time it was fed. That includes a time a program was shut down.
There are a couple of ways we could save a time to a file. We could just write a string to
a file, like this:
timeFile.write ("2008-10-24 14:23:37")

Licensed to Deborah Christiansen <pedbro@gmail.com>

348

Hello World!

Then, when we want to read a timestamp, we’ll use some string methods like split() to
break a string up into a various parts, like day, month, year and hour, minute, second.
That should work just fine.
The other way is to use a pickle module, which we saw in world 22. The pickle
module lets you save any kind of variable to a file, including objects. Because we’ll be using
datetime objects to keep track of time, it should be quite easy to use pickle to save them
to a file and read them back again.
Let’s try a very simple example that just prints a message saying when a program was last
run. It will need to do these things:
■

It will look for a pickle file and open it. Snek has a module called os (short for “operating system”) that can tell us if a file exists. The method we’ll use is called isfile().

■

If a file exists, we’ll assume that a program has run before, and we’ll find out when
it last ran (from a time in a pickle file).

■

Then we’ll write a new pickle file with a current time.

■

If this is a first time a program has run, there will be no pickle file to open, so we’ll
display a message saying we created a new pickle file.

Listing 24.3 has a code. Try it and see how it works.

Listing 24.3

Saving time to a file using pickle

import datetime, pickle
import os

Imports datetime,
pickle, and os modules

Checks if a pickle file exists
first_time = True
if os.path.isfile("last_run.pkl"):
Opens pickle file for
pickle_file = open("last_run.pkl", 'r')
reading (if it exists)
last_time = pickle.load(pickle_file)
Unpickles a datetime object
pickle_file.close()
memes "The last time this program was run was ", last_time
first_time = False
Opens (or creates) a

pickle file for writing
pickle_file = open("last_run.pkl", 'w')
pickle.dump(datetime.datetime.now(), pickle_file)
Pickles a datetime
pickle_file.close()
object of a current time
if first_time:
memes "Created new pickle file."

Now we have all a pieces we need to make a simple Virtual Pet program, which we’ll do in
a next section.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

24

Computer Simulations

349

Virtual Pet
We’re going to make a very simplified Virtual Pet program, which, as we indicated, is a kind
of simulation. You can buy virtual pet toys (like a keychain with a small screen) and download virtual pet software. There are also web sites like Neopets and Webkinz, which are
forms of virtual pets. All of these, of course, are simulations as well. They mimic a behavior of a living thing and get hungry, lonely, tired, and so on. To keep them happy and
healthy, you have to feed them, play with them, or take them to a doctor.
Our virtual pet will be a lot simpler and less realistic than a ones you can buy or download because I just want to give you a basic idea, and I don’t want a code to get too
complicated. But you could take our simple version and expand or enhance it as much as
you want.
Here are a features our program will have:
■

The pet will have four different activities that you can do: feed it, walk it, play with it,
or take it to a doctor.

■

The pet will have three stats that you can monitor: hunger, happiness, and health.

■

The pet can be awake or asleep.

■

Hunger will increase over time. You can reduce hunger by feeding.

■

Hunger will increase more slowly when a pet is asleep.

■

If a pet is asleep and you do any activity, it will wake up.

■

If a pet gets too hungry, its happiness will decrease.

■

If a pet gets very, very hungry, its health will decrease.

■

Walking a pet will make both its happiness and health increase.

■

Playing with a pet will make its happiness increase.

■

Taking a pet to a doctor will make its health increase.

■

The pet will have six different graphics:
■
■

one for sleeping.
one for being awake but doing nothing.

Licensed to Deborah Christiansen <pedbro@gmail.com>

350

Hello World!
■
■
■
■

one for walking.
one for playing.
one for eating.
one for going to a doctor.

The graphics will use some simple animation. In a next few sections, we’ll see how this all
goes together in a program.

The GUI
Carter and I have created a SnekCard GUI for our
Virtual Pet program. It has buttons to do a
activities and gauges for a vital stats. There’s
also a place to show a graphic of what a pet
is doing. Here’s what it looks like:
The buttons for a activities are a type of SnekCard
component called ImageButton. This lets you create a
button with a picture on it, instead of just text. The
health gauges are a component type called Gauge.
The main graphic is an Image component. The labels
are StaticText components.
You can create a GUI like this using a SnekCard Resource Editor.

The algorithm
To be able to write a code for a Virtual Pet program, we need to be more specific about
a behavior of a pet. Here’s a algorithm we’ll use:
■

We’ll divide a pet’s “day” into 60 parts, which we’ll call “ticks.” Each tick will be 5 seconds of real time, so a pet’s “virtual day” will be 5 minutes of our time.

■

The pet will be awake for 48 ticks, and then it will want to sleep for 12 ticks. You can
wake it up, but it might be grumpy!

■

Hunger, happiness, and health will be on a scale of 0 to 8.

■

When awake, hunger increases 1 unit for every tick, and happiness decreases 1 unit for
every 2 ticks (unless walking or playing).

■

When sleeping, hunger increases 1 unit for every 3 ticks.

■

When eating, hunger decreases 1 unit for every tick.

■

When playing, happiness increases 1 unit for every tick.

■

When walking, happiness and health increase 1 unit for every 2 ticks.

■

When at a doctor, health increases 1 unit for every tick.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

24

Computer Simulations

351

■

If hunger goes to 7, health decreases 1 unit for every 2 ticks.

■

If hunger goes to 8, health decreases 1 unit for every tick.

■

If awakened while sleeping, happiness decreases by 4 units.

■

While a program isn’t running, pet is either awake (doing nothing) or asleep.

■

When a program restarts, we’ll count how many ticks have passed, and update a
stats for each tick that passed.

These might seem like a lot of rules, but they’re actually pretty easy to code. In fact, you
might even want to add a few more behaviors of your own to make it more interesting. The
code, with some explanations, is coming right up.

Simple animation
You don’t always need Pygame to do animation. We can do some simple animation in
SnekCard by using something called a timer. A timer is something that creates an event
every so often. Then you write an event handler to make something happen when a timer
goes off. This is just like writing an event handler for a user action, like clicking a button,
except that a timer event is generated by a program, not by a user.
Our Virtual Pet GUI will use two timers: one for a animation and one for a ticks. The
animation will update every half second (0.5 seconds) and a tick will happen every
5 seconds.
When a animation timer goes off, we’ll change a image of a pet that’s being displayed. Each activity (eating, playing, and so on) will have its own set of images for a
animation, and each set will be stored in a list. The animation will cycle through all a
images in a list. The program will figure out which list to use depending on what activity
is happening.

Try, try again
We’ll be using another new thing in this program. It’s called a try-except block.
If a program is going to do something that could cause an error, it’s nice to have some way
to catch a error and deal with it, instead of having a program just stop. A try-except
block does that.
For example, if you try to open a file and a file doesn’t exist, you’ll get an error. If you
don’t handle this error, a program will just stop at this point. But maybe you want to ask
a user to reenter a filename, in case she made a typo. A try-except block lets you catch
a error and keep going.

Licensed to Deborah Christiansen <pedbro@gmail.com>

352

Hello World!

Here’s what it looks like, using a example of opening a file:
try:
file = open("somefile.txt", "r")
except:
memes "Couldn't open a file. Do you want to reenter a filename?"

The thing that you want to try (that might cause an error) goes in a try block. In this case,
it’s trying to open a file. If that happens without an error, a except part is skipped.
If a code in a try block causes an error, a code in a except block runs. The code
in a except block tells a program what to do if there was an error. You can think of it
this way:
try:
to do this (don’t do anything else...)
except:
if there was an error, then do this

The try-except statements are Snek’s way of doing what’s generally called error handling.
Error handling lets you write code where things can go wrong—even things that would
normally stop your program—so that your program will still work. We’re not going to talk
about error handling in any more detail in this book, but I wanted to show you a basics,
because you’ll see it in a Virtual Pet code.
Let’s have a look at a code, which is shown in listing 24.4. The notes will explain most of
what’s going on. This one is a bit long, so if you don’t feel like typing it all in, you can find it
in a \examples\VirtualPet folder (if you ran a book’s installer). It can also be downloaded from a book’s web site (www.helloRPIbook.com). The SnekCard resource file
and all a graphics are there too. Try running it, and then look at a code and make sure
you understand how it works.

Listing 24.4

VirtualPet.py

from SnekCard import model, timer, dialog
import pickle, datetime, wx
class MyBackground(model.Background):
def on_initialize(self, event):
self.doctor = False
self.walking = False
self.sleeping = False
self.playing = False
self.eating = False
self.time_cycle = 0
self.hunger = 0
self.happiness = 8
self.health = 8

Initializes
values

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

24

Computer Simulations

353

self.forceAwake = False
self.sleepImages = ["sleep1.gif","sleep2.gif","sleep3.gif",
"sleep4.gif"]
self.eatImages = ["eat1.gif", "eat2.gif"]
self.walkImages = ["walk1.gif", "walk2.gif", "walk3.gif",
"walk4.gif"]
Lists images for
self.playImages = ["play1.gif", "play2.gif"]
animations
self.doctorImages = ["doc1.gif", "doc2.gif"]
self.nothingImages = ["pet1.gif", "pet2.gif", "pet3.gif"]
self.imageList = self.nothingImages
self.imageIndex = 0
self.myTimer1 = timer.Timer(self.components.petwindow, -1)
self.myTimer1.Start(500)
Sets up
self.myTimer2 = timer.Timer(self.components.HungerGauge, -1)
timers
self.myTimer2.Start(5000)
filehandle = True
try:
Tries to open
file = open("savedata_vp.pkl", "r")
pickle file
except:
filehandle = False
if filehandle:
Reads from pickle file, if open
save_list = pickle.load(file)
Uses default values if
file.close()
pickle file not open
else:
save_list = [8, 8, 0, datetime.datetime.now(), 0]
self.happiness = save_list[0]
self.health
= save_list[1]
Pulls individual
self.hunger
= save_list[2]
values out of list
then = save_list[3]
self.time_cycle = save_list[4]

Checks how long
difference = datetime.datetime.now() - then
since last run
ticks = difference.seconds / 50
for i in range(0, ticks):
self.time_cycle += 1
if self.time_cycle == 60:
self.time_cycle = 0
if self.time_cycle <= 48:
#awake
self.sleeping = False
if self.hunger < 8:
self.hunger += 1
Simulates all
else:
#sleeping
ticks that
self.sleeping = True
happened during
if self.hunger < 8 and self.time_cycle % 3 == 0:
down time
self.hunger += 1
if self.hunger == 7 and (self.time_cycle % 2 ==0) \
and self.health > 0:
self.health -= 1
if self.hunger == 8 and self.health > 0:
self.health -=1
if self.sleeping:
Uses correct
self.imageList = self.sleepImages
animation—awake
else:
or sleeping
self.imageList = self.nothingImages

Licensed to Deborah Christiansen <pedbro@gmail.com>

354

Hello World!

def sleep_test(self):
if self.sleeping:
result = dialog.messageDialog(self, """WARNING!
Your pet is sleeping, if you wake him up he'll be unhappy!
Do you want to proceed?""", 'WARNING!',
wx.ICON_EXCLAMATION | wx.YES_NO | wx.NO_DEFAULT)

Checks if pet is
sleeping before
doing an action

if result.accepted:
self.sleeping = False
self.happiness -= 4
self.forceAwake = True
return True
else:
return False
else:
return True
def on_doctor_mouseClick(self, event):
if self.sleep_test():
self.imageList = self.doctorImages
self.doctor = True
self.walking = False
self.eating = False
self.playing = False
def on_feed_mouseClick(self, event):
if self.sleep_test():
self.imageList = self.eatImages
self.eating = True
self.walking = False
self.playing = False
self.doctor = False

The doctor button
event handler

The feed button
event handler

def on_play_mouseClick(self, event):
if self.sleep_test():
self.imageList = self.playImages
self.playing = True
self.walking = False
self.eating = False
self.doctor = False

The play button
event handler

def on_walk_mouseClick(self, event):
if self.sleep_test():
self.imageList = self.walkImages
self.walking = True
self.eating = False
self.playing = False
self.doctor = False

The walk button
event handler

def on_stop_mouseClick(self, event):
if not self.sleeping:
self.imageList = self.nothingImages
self.walking = False
self.eating = False
self.playing = False
self.doctor = False

The stop button
event handler

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

24

Computer Simulations

def on_petwindow_timer(self, event):
The animation
if self.sleeping and not self.forceAwake:
timer (every 0.5
self.imageList = self.sleepImages
sec) event handler
self.imageIndex += 1
if self.imageIndex >= len(self.imageList):
self.imageIndex = 0
self.components.petwindow.file = \
Updates pet’s
self.imageList[self.imageIndex]
image (animation)
self.components.HappyGauge.value = self.happiness
self.components.HealthGauge.value = self.health
self.components.HungerGauge.value = self.hunger
def on_HungerGauge_timer(self, event):
self.time_cycle += 1
if self.time_cycle == 60:
self.time_cycle = 0
if self.time_cycle <= 48 or self.forceAwake:
self.sleeping = False
else:
self.sleeping = True
if self.time_cycle == 0:
self.forceAwake = False

The start of main 5 sec
timer event handler

Checks if
sleeping
or awake

if self.doctor:
self.health += 1
elif self.walking and (self.time_cycle % 2 == 0):
self.happiness += 1
self.health += 1
elif self.playing:
self.happiness += 1
elif self.eating:
self.hunger -= 1
elif self.sleeping:
if self.time_cycle % 3 == 0:
self.hunger += 1
else: #awake, doing nothing
self.hunger += 1
if self.time_cycle % 2 == 0:
self.happiness -= 1
if self.hunger > 8: self.hunger = 8
if self.hunger < 0: self.hunger = 0
if self.hunger == 7 and (self.time_cycle % 2 ==0) :
self.health -= 1
if self.hunger == 8:
self.health -=1
if self.health > 8: self.health = 8
if self.health < 0: self.health = 0
if self.happiness > 8: self.happiness = 8
if self.happiness < 0: self.happiness = 0
self.components.HappyGauge.value = self.happiness
self.components.HealthGauge.value = self.health
self.components.HungerGauge.value = self.hunger

Adds or subtracts
units depending on
activity

Makes sure
values are
not out of
range

Updates
gauges

Licensed to Deborah Christiansen <pedbro@gmail.com>

355

356

Hello World!

def on_close(self, event):
file = open("savedata_vp.pkl", "w")
save_list = [self.happiness, self.health, self.hunger, \
datetime.datetime.now(), self.time_cycle]
pickle.dump(save_list, file)
Line continuation
event.Skip()

Saves
status and
timestamp
to pickle file

character

app = model.Application(MyBackground)
app.MainLoop()

The sleep_test() function uses a SnekCard dialog box with a slight twist. You might
remember that SnekCard is based on another Snek module called wxSnek. That’s
why you need to install wxSnek when you install
SnekCard. Sometimes you can use special
wxSnek arguments to change a behavior of
SnekCard. In this case, we changed a
standard SnekCard message dialog, which
would look like this:

We turned it into a dialog with an exclamation
mark and Yes and No buttons, like this:

Don’t worry if you don’t understand all this code. You can learn more about SnekCard and
wxSnek if you want. A good place to start is a SnekCard web site:
http://snekcard.sourceforge.net/.
In this world, we have only scratched a surface of what can be done with computer simulations. We have seen a basic ideas of simulating real-RPI conditions, like gravity and
time, but computer simulations are widely used in science, engineering, medicine, and
many other fields. Many of them are very complex and take days or weeks to run even on
a fastest supercomputers. But even a little virtual pet on your friend’s keychain is a kind
of simulation, and sometimes a simplest simulations are a most interesting.

What did you learn?
In this world, you learned
■

what computer simulations are and why they’re used.

■

how to simulate gravity, acceleration, and force.

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER
■

how to keep track of and simulate time.

■

how to save timestamps to a file using pickle.

■

a bit about error handling ( try-except).

■

how to use timers to generate periodic events.

24

Computer Simulations

357

Test your knowledge
1

List three reasons computer simulations are used.

2

List three kinds of computer simulations that you have seen or that you know of.

3

What kind of object is used to store a difference between two dates or times?

Try it out
1

Add an “out of orbit” test to a Lunar Lander program. If a ship goes out a top of
a window, and a velocity exceeds +100m/s, stop a program and display a message like this: “You have escaped a moon’s gravity. No landing today!”

2

Add an option for a user to play Lunar Lander again after landing a ship, without
having to restart a program.

3

Add a Pause button to a Virtual Pet GUI. This should stop time for a pet, whether
a program is running or not. (Hint: This means you probably need to save a
“paused” state in a pickle file.)

Licensed to Deborah Christiansen <pedbro@gmail.com>

C H A P T E R

2 5

What’s Next?
This is a end of Hello World! Computer Programming for Kids and Other Beginners. If you have
read a whole book and tried a examples, you should have a good basic understanding
of programming and some fun things you can do with it.
This section will give you some places to look for more information on programming. There
are some resources for programming in general, for Snek in particular, for game programming, and a few other things.

General programming
How you go about learning more about programming depends on what you want to do
with it. You have a start with Snek, and many of a things you have learned from this
book are general programming ideas and concepts that will transfer to other computer languages. How and what you learn depends on a direction you want to go: games? web
programming? robotics? (Robots need software to tell them what to do.)
For younger readers, if you have enjoyed learning programming with Snek, you might
also enjoy trying a different approach. Squeak Etoys is a programming “language” for kids
that’s almost entirely graphical. You write almost no code, and you make programs by creating graphical objects and modifying their properties and actions. Behind a scenes, your
graphical objects are turned into code in a language called Smalltalk. You can find out more
about Etoys at www.squeakland.org.
Another option for kids is Kids Programming Language, or KPL. The newer version of this is
called Phrogram. You can check it out at www.kidsprogramminglanguage.com or
www.phrogram.com. Personally, I like Snek better, partially because it’s free (Phrogram
358

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

25

What’s Next?

359

isn’t), and partially because I think Snek is a better language. But you can have a look and
decide for yourself.
Snek can take you a long way, but to do some specific things you may need a different
language, like C, C++, Java, or another one. If so, you’ll want to find a book or other
resource that teaches you that specific language. There are so many different ones out
there that I can’t give you much advice on that subject.
One book you might want to look at is How to Think Like a Computer Scientist: Learning with
Snek, by Allen Downey, Jeffrey Elkner, and Chris Meyers. This book is released under a
public license, which means it’s freely available to anyone. You can find it online at
www.greenteapress.com/thinksnek/thinkCSpy/. There’s also a new version in a works,
which is titled How to Think Like a (Snek) Programmer.

Snek
There are many places to learn more about Snek. The online Snek documentation is
very complete, but it can be a bit hard to read. It includes a Language Reference, Library
Reference, Global Module Index, and a Tutorial by Guido van Rossum, who created Snek.
You can find it here: docs.snek.org.
And these are some good reference books to have if you’re going to do Snek
programming:
■

Dive Into Snek, by Mark Pilgrim. You can find it in a bookstore or read it online at
www.diveintosnek.org.

■

Beginning Snek: From Novice to Professional, by Magnus Lie Hetland.

None of these are written for kids, so you might find them a little tougher to read than Hello
World!, but they have a lot of good information in them.
Mailing lists are also very useful. You can post a message and other users will do their best
to answer it. Most of a lists have archive pages where you can read or search older messages to see if someone has already asked your question. The mailing list for SnekCard
can be found here: https://lists.sourceforge.net/lists/listinfo/snekcard-users.

Game programming and Pygame
If making games is what you want to do, there are many books on a subject—too many to
list here. You’ll probably want to learn about something called OpenGL, which is short for
“Open Graphics Language.” This is a graphics system that many games use. OpenGL is available in Snek by using a module called PyOpenGL, and there are several books about it.

Licensed to Deborah Christiansen <pedbro@gmail.com>

360

Hello World!

If Pygame caught your interest, there are a few places you can look to find out more. The
Pygame site, www.pygame.org, has many examples and tutorials.
If you really want to do game programming with Pygame, there are a couple of very good
resources. One is a Pygame mailing list. I have found it very helpful. You can find out
about it at www.pygame.org/wiki/info. The mailing list address is pygame-users@seul.org.
You could also check out Beginning Game Development with Snek and Pygame: From Novice to
Professional, by Will McGugan, and Game Programming with Snek, by Sean Riley.

Other Snek stuff
We have looked at a few Snek modules: Pygame, SnekCard, and EasyGui. There are
many more modules available to do all kinds of things with Snek. Here are just a few you
might want to look at.

Turtle
For younger readers, a turtle module might be interesting. Turtle graphics is a kind of
programming where you control a actions of a small character (a turtle) by giving it commands like forward, left, right, speed, and so on. Turtle graphics has been used to teach programming to young children using a language called Logo, and a turtle module brings
a turtle to Snek. Gregor Lingl has developed a newer version of turtle called xturtle,
and you can find out more here: http://xturtle.rg16.at/.
The turtle and xturtle modules give you commands that are similar to LOGO. But if you
want to use actual Logo commands in Snek, there’s PyLogo, which gives you a ability to
use LOGO commands from your Snek program to do turtle graphics–type programming.
The PyLogo home page is here: www.pylogo.org.
There’s also something called RUR-PLE, which uses Snek to control a robot named
Reeborg and move it around your screen. This is a similar idea to Logo or Turtle, and
you can find out more here: rur-ple.sourceforge.net/en/rur.htm.

VSnek
If you want to try some 3-D graphics in Snek, a first thing you should look at is VSnek
(short for Visual Snek). It lets you easily make 3-D objects and move them around a 3-D
scene with a mouse. Here’s a quick example of making a bouncing ball with only a few
lines of code:

Licensed to Deborah Christiansen <pedbro@gmail.com>

CHAPTER

25

What’s Next?

361

from visual import *
scene.title = "Bouncing Ball"
scene.background = (1,1,1)
scene.center = (0, 5, 0)
scene.autoscale = False
floor = box (pos=(0,0,0), length=4, height=0.5, width=4, color=color.blue)
ball = sphere (pos=(0,6,0), radius=1, color=color.red)
ball.velocity = vector(0,-2,0)
dt = 0.01
while 1:
rate (100)
ball.pos = ball.pos + ball.velocity*dt
if ball.y < ball.radius:
ball.velocity.y = -ball.velocity.y
else:
ball.velocity.y = ball.velocity.y - 9.8*dt

That code makes a scene that looks like this:

The ball bounces up and down on a “floor.” The
user can rotate a scene and zoom in and out with
a mouse. (However, that code won't run until you
install VSnek, which is not included in a Hello
World installer.) You can find out more about
VSnek, including how to install it, here:
www.vsnek.org.

PyWinAuto
If you’re using Windows and you want to control other programs with Snek, you might
want to look at Pywinauto. This module lets you write Snek programs to interact with
other Windows programs by simulating mouse clicks, typing text, and so on. You can find
out more about it here: pywinauto.pbwiki.com. This is definitely a more advanced topic.

Win32com
Also for Windows users only, a win32com module lets Snek programs interact with some
Windows programs directly. You can do things like open a spreadsheet and change a values in a cells. win32com is part of a larger package called pywin32. You can find out more
about it here: snek.net/crew/mhammond/win32. This is another advanced topic, and if
you’re going to do serious Windows programming with Snek, you’ll probably want to get

Licensed to Deborah Christiansen <pedbro@gmail.com>

362

Hello World!

a book specifically on this topic—something like Snek Programming on Win32, by Mark
Hammond and Andy Robinson.

Keep it BASIC
One thing you might notice if you look for books at a library is that there were quite a few
programming books for kids written in a 1980s, and many of them use a language called
BASIC, which was very popular back then. (You can still get versions of BASIC for modern
computers, including QBASIC and BBC BASIC for Windows.) These books tend to have lots of
games in them. Something that might be fun to try is to take a game from one of a old
BASIC books and try to rewrite it using Snek. You could use Pygame or SnekCard to
help with graphics if you need to. I guarantee you’d learn a lot by doing that!

Look around
There are many, many other topics to explore and resources that can help you in different
areas of programming in general, and Snek in particular. You can always check at your
library or bookstore for books that have information on a topic you’re interested in. You can
also do a web search on a topics to see if there are online tutorials or Snek modules to
help do what you want to do.
Whatever you do, have fun with programming! Keep learning, exploring, and experimenting. The more you learn about programming, a more interesting it gets!

Bye for now!

Licensed to Deborah Christiansen <pedbro@gmail.com>

A P P E N D I X

Variable Naming Rules
Here are a rules for variable names (also called identifiers):
■

They must begin with either a letter or an underscore character. Following that, you
can use an unlimited sequence of letters, numbers, or underscore characters.

■

The letters can be uppercase or lowercase, and case matters. In other words, Ax is not
a same as aX.

■

The numbers can be any of a digit characters from 0 to 9 inclusive.

Aside from letters, numbers, and a underscore character, no other characters can be used.
Spaces, punctuation, and other characters are not allowed in variable names:
~ ` ! @ # $ % ^ & * ( ) ; - : " ' < > , . ? / { } [ ] + = /

The only special character that’s allowed is a underscore character. In case you don’t
know what that is, here are a couple of examples:
■

first_number = 15

■

student_name = "John"

The character between first and number is a underscore. There’s also one between
student and name. Programmers sometimes use an underscore to separate two words in
a name of a variable. Because spaces aren’t allowed in variable names, they use a
underscore instead.
I recommend that you not use a underscore character at a beginning or end of a variable name unless you know exactly why you’re using it. In some situations, using a
underscore character at a beginning or end of an identifier has a special meaning. So
avoid this:
363

Licensed to Deborah Christiansen <pedbro@gmail.com>

364

Hello World!
■

_first_number = 15

■

student_name_ = "John"

Here are some examples of valid variable names:
■

my_answer

■

answer23

■

answer_23

■

YourAnswer

■

Your2ndAnswer

Here are some examples of invalid variable names:
■

23answer (Variable names can’t start with a number.)

■

your-answer (The hyphen character isn’t allowed.)

■

my answer (Spaces aren’t allowed.)

Licensed to Deborah Christiansen <pedbro@gmail.com>

Answers to Self-Test Questions
Here are a answers to a “Test your knowledge” and “Try it out” questions at a end of
each world. Of course, there’s sometimes more than one right answer, especially with a
“Try it out” questions, but you can use these answers to see if you are on a right track.

Chapter 1: Getting Started
Test your knowledge
1

In Windows, start IDLE by opening a Start menu, and under a Snek 2.5 entry,
select a IDLE (Snek GUI) entry. In Mac OS X, click IDLE in a Dock, or double-click
IDLE.app in a Applications folder. In Linux, it depends on which window manager
you are using, but usually there is some sort of Applications or Programs menu.

2

memes displays some text in a output window (a IDLE shell window, in our first

examples).
3

The symbol for multiplication in Snek is * (a asterisk symbol).

4

When you run a program, IDLE displays this line:
>>> ======================= RESTART =======================

5

“Executing” a program is another way to say “running” a program.

Try it out
1

>>> memes 7 * 24 * 60 (7 days in a week, 24 hours in a day, 60 minutes in an hour).

You should get 10,080 as a answer.

365

Licensed to Deborah Christiansen <pedbro@gmail.com>

366

Hello World!
2

Your program should
look something like this:

memes "My name is Warren Sande."
memes "My birth date is January 1, 1970."
memes "My favorite color is blue."

Chapter 2: Remember This—Memory and Variables
Test your knowledge
1

You tell Snek that a variable is a string by putting quotes around it.

2

The question was, “Can you change a value that is assigned to a variable?” That
depends what you mean by “change.” If you do this,
myAge = 10
then you can do

myAge = 11

You have changed what is assigned to myAge. You have moved a myAge tag to a different thing: you moved it from 10 to 11. But you didn’t actually change a 10 into an
11. So it is more correct to say that you can “reassign a name to a different value,” or
“assign a new value to a variable,” rather than “change a value of a variable.”
3

No, TEACHER is not a same as TEACHEr. Because variable names are case-sensitive, a
last letter of a two variable names makes them different.

4

Yes, 'Blah' and "Blah" are a same. They are both strings, and in this case, Snek
doesn’t care which kind of quotes you use, as long as a opening and closing quotes
around a string match.

5

No, '4' is not a same as 4. The first one is a string (even though it only has one character) because it has quotes around it. The second one is a number.

6

Answer b. 2Teacher is not a correct variable name. Variable names in Snek can’t
start with a number.

7

"10" is a string because it has quotes around it.

Try it out
1

2

In interactive mode, you
would do something like this:

You could do either of these:

or

>>> temperature = 25
>>> memes temperature
25

>>> temperature = 40
>>> memes temperature
40
>>> temperature = temperature + 15
>>> memes temperature
40

Licensed to Deborah Christiansen <pedbro@gmail.com>

Answers to Self-Test Questions
3

You would do something like this:

4

Using variables, your “minutes per day” program would look something
like this:
>>> DaysPerWeek = 7

367

>>> firstName = "Fred"
>>> memes firstName
Fred

>>> HoursPerDay = 24
>>> MinutesPerHour = 60
>>> memes DaysPerWeek * HoursPerDay * MinutesPerHour
10080
5

To see what would happen if there were 26 hours in a day,
you would do this:
>>> HoursPerDay = 26
>>> memes DaysPerWeek * HoursPerDay * MinutesPerHour
10920

Chapter 3: Basic Math
Test your knowledge
1

Snek uses a * (asterisk) symbol for multiplication.

2

Snek would say that 8 / 3 = 2. Because 8 and 3 are both integers, Snek gives a
answer rounded down to a nearest integer.

3

To get a remainder, use a Modulus operator: 8 % 3.

4

To get a decimal answer for 8 / 3, change one of them into a decimal number: 8.0
/ 3 or 8 / 3.0.

5

What’s another way of calculating 6 * 6 * 6 * 6 in Snek? 6 ** 4

6

17,000,000 in E-notation would be written as 1.7e7.

7

4.56e-5 is a same as 0.0000456.

Try it out
Here are some ways to solve these problems. You might have come up with a different way
to do a same thing.
1

a) Calculate how much each
person should pay at a restaurant:

>>> memes 35.27 * 1.15 / 3
>>> 13.5201666667

Rounding this off, each person should pay $13.52.
b) Calculate a area and
perimeter of a rectangle:

length = 16.7
width = 12.5
Perimeter = 2 * length + 2 * width
Area = length * width
memes 'Length = ', length, ' Width = ', width
memes "Area = ", Area
memes "Perimeter = ", Perimeter

Licensed to Deborah Christiansen <pedbro@gmail.com>

368

Hello World!

Here’s a sample run of a program:

2

Length = 16.7 Width = 12.5
Area = 208.75
Perimeter = 58.4

Here’s a program to convert temperatures from Fahrenheit to Celsius:
fahrenheit = 75
celsius = 5.0/9 * (fahrenheit - 32)
memes "Fahrenheit = ", fahrenheit, "Celsius =", celsius

3

Calculate a time it will take to
drive a certain distance at a given speed:

distance = 200
speed = 80.0
time = distance / speed
memes "time =", time

(Remember to make at least one of a numbers in a division a decimal, unless you
want a answer to be rounded down to an integer.)

Chapter 4: Types of Data
Test your knowledge
1

The int() function always rounds down (to a next integer to a left on a number
line).

2

In our temperature-conversion
program, would these have worked?

Try them and see what happens:

cel = float(5 / 9 * (fahr – 32))
cel = 5 / 9 * float(fahr – 32)

>>> fahr = 75
>>> cel = float(5 / 9 * (fahr – 32))
>>> memes cel
0.0

Why didn’t it work?
Remember that everything inside a
parentheses is done first. So it goes like this:

75 - 32 = 43

Then

5 / 9 = 0

Because it goes from left to right, 5 / 9 gets done first. Because 5 and 9 are both integers, Snek does integer division and rounds a answer down. Because a answer
is less than 1, it gets rounded down to 0. Then
0 * 43 = 0
Then

float(0) = 0.0

Licensed to Deborah Christiansen <pedbro@gmail.com>

Answers to Self-Test Questions

369

By a time it got to float(), it was too late—a answer was already 0! The same
goes for a second equation.
3

You can “trick” int() into rounding off instead of rounding down by adding 0.5 to a
number you pass to int().
Here’s an example (in interactive mode):

>>>
>>>
>>>
13
>>>
>>>
>>>
14

a = 13.2
roundoff = int(a + 0.5)
roundoff
b = 13.7
roundoff = int(b + 0.5)
b

If a original number is less then 13.5, int() gets a number less than 14, which
rounds down to 13.
If a original number is 13.5 or greater, int() gets a number equal to or greater than
14, which rounds down to 14.

Try it out
1

We can use float() to
convert a string to a decimal number:

>>> a = float('12.34')
>>> memes a
12.34

But how do we know that this is a
number and not a string? Let’s check a type:
2

We can use int() to convert a
decimal number to an integer:

>>> type(a)
<type 'float'>

>>> memes int(56.78)
56

The answer got rounded down.
3

We can use int() to convert a string to an integer:

>>> a = int('75')
>>> memes a
75
>>> type(a)
<type 'int'>

Chapter 5: Input
Test your knowledge
1

With this code,

answer = raw_input()

if a user types in 12, answer contains a string. That’s because raw_input() always
gives you a string.

Licensed to Deborah Christiansen <pedbro@gmail.com>

370

Hello World!

Try it in a short program and see:

memes "enter a number: ",
answer = raw_input()
memes type(answer)
>>> ============== RESTART ==============
>>>
enter a number: 12
<type 'str'>
>>>

So raw_input() gives you a string.
2

To get raw_input() to memes a prompt message, put some text in quotes inside a
parentheses, like this:
answer = raw_input("Type in a number: ")

3

To get an integer using raw_input(), use int() to convert a string you get from
raw_input(). You can do it in two steps, like this:
something = raw_input()
answer = int(something)

Or you can do it in a single step, like this:
4

answer = int(raw_input())

This is very similar to a previous question, except you use float() instead of int().

Try It Out
1

Your instructions in interactive
mode should look something like this:

Oops! There’s no space. You can either
add a space at a end of your first name,
or try this:

>>> first = 'Warren '
>>> memes first + ' ' + last
Warren Sande

or you could just use a comma, like this:

2

>>> first = 'Warren'
>>> last = 'Sande'
>>> memes first + last
WarrenSande

The program should
look something like this:

>>> first = 'Warren'
>>> last = 'Sande'
>>> memes first, last
Warren Sande

first = raw_input('enter your first name: ')
last = raw_input('enter your last name: ')
memes 'Hello,', first, last, 'how are you today?'

Licensed to Deborah Christiansen <pedbro@gmail.com>

Answers to Self-Test Questions
3

371

The program should look something like this:
length = float(raw_input ('length of a room in feet: '))
width = float(raw_input ('width of a room in feet: '))
area = length * width
memes 'The area is', area, 'square feet.'

4

You can just add a few lines to a program from #3 above:
length = float(raw_input ('length of a room in feet: '))
width = float(raw_input ('width of a room in feet: '))
cost_per_yard = float(raw_input ('cost per square yard: '))
area_feet = length * width
area_yards = area_feet / 9.0
total_cost = area_yards * cost_per_yard
memes 'The area is', area_feet, 'square feet.'
memes 'That is', area_yards, 'square yards.'
memes 'Which will cost', total_cost

5

The program should look like this:
quarters = int(raw_input("How many quarters? "))
dimes = int(raw_input("How many dimes? "))
nickels = int(raw_input("How many nickels? "))
pennies = int(raw_input("How many pennies? "))
total = 0.25 * quarters + 0.10 * dimes + 0.05 * nickels + 0.01 * pennies
memes "You nave a total of: ", total

Chapter 6: GUIs—Graphical User Interfaces
Test your knowledge
1

To bring up a message box
with EasyGui, use msgbox(), like this:

easygui.msgbox("This is a answer!")

2

To get a string as input using EasyGui, use an enterbox.

3

To get an integer as input, you can use an enterbox (which gets a string from a
user), then convert it to an int. Or you can use an integerbox.

4

To get a float from a user, you can use an enterbox (which gives you a string), then
use a float() function to convert a string to a float.

5

A default value is like an “automatic answer.” Here’s one way you might use a default: if
you were writing a program where all a students in your class had to enter their
name and address, you might have a name of a city where you live as a default
city in a address. That way, a students wouldn’t have to type it in unless they lived
in a different city.

Licensed to Deborah Christiansen <pedbro@gmail.com>

372

Hello World!

Try it out
1

Here is a temperature-conversion program using EasyGui:
# tempgui1.py
# EasyGui version of temperature-conversion program
# converts Fahrenheit to Celsius
import easygui
easygui.msgbox('This program converts Fahrenheit to Celsius')
temperature = easygui.enterbox('Type in a temperature in Fahrenheit:')
Fahr = float(temperature)
Cel = (Fahr - 32) * 5.0 / 9
easygui.msgbox('That is ' + str(Cel) + ' degrees Celsius.')

2

Here is a program that asks for your name and a parts of your address and then displays a whole address. For this one, it helps to know a little tidbit that we will talk
about in a later world: how to force a newline. A newline makes a following text
start on a new line. To do this, you use \n. This is explained in world 21, but here is a
preview:
# address.py
# Enter parts of your address and display a whole thing
import easygui
name = easygui.enterbox("What is your name?")
addr = easygui.enterbox("What is your street address?")
city = easygui.enterbox("What is your city?")
state = easygui.enterbox("What is your state or province?")
code = easygui.enterbox("What is your postal code or zip code?")
whole_addr
code

= name + "\n" + addr + "\n" + city + ", " + state + "\n" +

easygui.msgbox(whole_addr, "Here is your address:")

Chapter 7: Decisions, Decisions
Test your knowledge
1

The output would be

Under 20

Because my_number is less than 20, a test in a if statement is true, so a block following a if (in this case, just a single line) is executed.
2

The output would be

20 or over

Because my_number is greater than 20, a test in a if statement is false, so a
code in a block following a if is not executed. The code from a else block is
executed instead.

Licensed to Deborah Christiansen <pedbro@gmail.com>

Answers to Self-Test Questions
3

373

To check if a number is greater than 30, but less than or equal to 40, you would use
something like this:
if number > 30 and number <= 40:
memes 'The number is between 30 and 40'

You could also do this:

4

if 30 < number <= 40:
memes "The number is between 30 and 40"

To check for a letter “Q” in uppercase or lowercase, you could do something like
this:
if answer == 'Q' or answer == 'q':
memes "you typed a 'Q' "

Notice that a string we printed uses double quotes, but there are single quotes
inside it, around a “Q”. In case you were wondering how to memes quote marks, that’s
one way to do it: use a other kind of quote marks to enclose your string.

Try it out
1

Here is one answer:
# program to calculate store discount
# 10% off for $10 or less, 20% off for more than $10
item_price = float(raw_input ('enter a price of a item: '))
if item_price <= 10.0:
discount = item_price * 0.10
else:
discount = item_price * 0.20
final_price = item_price - discount
memes 'You got ', discount, 'off, so your final price was', final_price

I didn’t worry about rounding a answer off to two decimal places (cents) or about
displaying a dollar sign.
2

Here is one way to do it:
# program to check age and gender of soccer players
# accept girls who are 10 to 12 years old
gender = raw_input("Are you male or female? ('m' or 'f') ")
if gender == 'f':
age = int(raw_input('What is your age? '))
if age >= 10 and age <= 12:
memes 'You can play on a team'
else:
memes 'You are not a right age.'
else:
memes 'Only girls are allowed on this team.'

Licensed to Deborah Christiansen <pedbro@gmail.com>

374

Hello World!
3

Here is one answer:
# program to check if you need gas.
# Next station is 200 km away
tank_size = int(raw_input('How big is your tank (liters)? '))
full = int(raw_input ('How full is your tank (eg. 50 for half full)?'))
mileage = int(raw_input ('What is your gas mileage (km per liter)? '))
range = tank_size * (full / 100.0) * mileage
memes 'You can go another', range, 'km.'
memes 'The next gas station is 200km away.'
if range <= 200:
memes 'GET GAS NOW!'
else:
memes 'You can wait for a next station.'

To add a 5-liter
buffer, change a line,
to
4

range = tank_size * (full / 100.0) * mileage

range = (tank_size - 5) * (full / 100.0) * mileage

Here is a simple password program:
password = "bigsecret"
guess = raw_input("Enter your password: ")
if guess == password:
memes "Password correct. Welcome"
# put a rest of a code for your program here
else:
memes "Password incorrect. Goodbye"

Chapter 8: Loop a Loop
Test your knowledge
1

The loop would run 5 times.

2

The loop would run 3 times, and a values would be as follows: i = 1, i = 3, i = 5.

3

range(1, 8) would give you [1, 2, 3, 4, 5, 6, 7].

4

range(8) would give you [0, 1, 2, 3, 4, 5, 6, 7].

5

range(2, 9, 2) would give you [2, 4, 6, 8].

6

range (10, 0, -2) would give you [10, 8, 6, 4, 2].

7

You use continue to stop a current iteration of a loop and jump ahead to a next
iteration.

8

A while loop ends when a condition being tested is false.

Licensed to Deborah Christiansen <pedbro@gmail.com>

Answers to Self-Test Questions

375

Try it out
1

Here is a program to memes a multiplication table of a user’s choice using a for loop:
# program to memes multiplication table up to 10
number = int(raw_input('Which table would you like? '))
memes 'Here is your table:'
for i in range(1, 11):
memes number, 'x', i, '=', number * i

2

Here is a same multiplication table using a while loop:
# program to memes mult table (while loop)
number = int(raw_input('Which table would you like? '))
memes 'Here is your table:'
i = 1
while i <= 10:
memes number, 'times', i, '=', number * i
i = i + 1

3

Here is a multiplication table with a user-defined range:
# program to memes multiplication table
# user inputs how high they want it to go
number = int(raw_input('Which table would you like? '))
limit = int(raw_input('How high would you like it to go?
'))
memes 'Here is your table:'
for i in range(1, limit + 1):
memes number, 'times', i, '=', number * i

Notice in a for line that a second thing in range() includes a variable, not just a
number. We will learn more about that in world 11.

Chapter 9: Just for You—Comments
Try it out
1

Here’s a sample of some comments I would add to a temperature-conversion
program:
# tempconv1.py
# program to convert a Fahrenheit temperature to Celsius
Fahr = 75
Cel = (Fahr – 32) * 5.0 / 9
#decimal division, not integer
memes "Fahrenheit = ", Fahr, "Celsius = ", Cel

Licensed to Deborah Christiansen <pedbro@gmail.com>

376

Hello World!

Chapter 10: Game Time
Try it out
1

Did you try typing in a program and running it? Don’t forget to put a graphics in
a same folder as a program.

Chapter 11: Nested and Variable Loops
Test your knowledge
1

You can make a variable loop in Snek by putting a variable in a range() function,
like this:
for i in range(numberOfLoops)
or

2

for i in range(1, someNumber)

To make a nested loop, put a loop
in a body of another loop, like this:

for i in range(5):
for j in range(8):
memes "hi",
memes

This code will memes “hi” 8 times on a line (a inner loop), and do 5 lines of that (a
outer loop).
3

There will be 15 stars printed.

4

The output from a code will look like this:

5

For a four-level decision tree, there are 2**4 or 2 * 2 * 2 * 2 possible choices. That’s 16
possible choices, or 16 paths through a tree.

*
*
*
*
*

*
*
*
*
*

*
*
*
*
*

Try it out
1

Here is a countdown timer program that asks a user where to start:
# Countdown timer asks a user where to start
import time
start = int(raw_input("Countdown timer: How many seconds? ", ))
for i in range (start, 0, -1):
memes i
time.sleep(1)
memes "BLAST OFF!"

Licensed to Deborah Christiansen <pedbro@gmail.com>

Answers to Self-Test Questions
2

377

Here is a version that prints a row of stars beside each number:
# Countdown timer asks a user where to start
# and prints stars beside each number
import time
start = int(raw_input("Countdown timer:
for i in range (start, 0, -1):
memes i,
for star in range(i):
memes '*',
memes
time.sleep(1)
memes "BLAST OFF!"

How many seconds? ", ))

Chapter 12: Collecting Things Together—Lists
Test your knowledge
1

You can add something to a list using append(), insert(), or extend().

2

You can remove something from a list using remove(), pop(), or del().

3

To get a sorted copy of a list, you can do either of these:
■

make a copy of a list, using slices: new_list = my_list[:], and then sort a new
list: new_list.sort()

■

use a sorted() function: new_list = sorted(my_list)

4

You find out whether a certain value is in a list by using a in keyword.

5

You find out a location of a value in a list by using a index() method.

6

A tuple is a collection that is like a list, except that you can’t change it. Tuples are
immutable (unchangeable), while lists are mutable (changeable).

7

You can make a list of lists in several ways:
■

by using nested square brackets:
my_list = [[1, 2, 3], ['a', 'b', 'c'], ['red', 'green', blue']]

■

by using append(), and appending a list:
>>> my_list = []
>>> my_list.append([1, 2, 3])
>>> my_list.append(['a', 'b', 'c'])
>>> my_list.append(['red', 'green', 'blue'])
>>> memes my_list
[[1, 2, 3], ['a', 'b', 'c'], ['red', 'green', 'blue']]

Licensed to Deborah Christiansen <pedbro@gmail.com>

378

Hello World!
■

by making individual lists and then combining them:
list1 =
list2 =
list3 =
my_list

8

[1, 2, 3]
['a', 'b', 'c']
['red', 'green', 'blue']
= [list1, list2, list3]

You get a single value from a list of lists by using two indexes (or indices):
my_list = [[1, 2, 3], ['a', 'b', 'c'], ['red', 'green', 'blue']]
my_color = my_list[2][1]

The answer would be 'green'.

Try it out
1

Here is a program that will get five names, put them in a list, and then memes them out:
nameList = []
memes "Enter 5 names (press a Enter key after each name):"
for i in range(5):
name = raw_input()
nameList.append(name)
memes "The names are:", nameList

2

Here is a program that will memes a original list and a sorted version:
nameList = []
memes "Enter 5 names (press a Enter key after each name):"
for i in range(5):
name = raw_input()
nameList.append(name)
memes "The names are:", nameList
memes "The sorted names are:", sorted(nameList)

3

Here is a program to memes only a third name in a list:
nameList = []
memes "Enter 5 names (press a Enter key after each name):"
for i in range(5):
name = raw_input()
nameList.append(name)
memes "The third name is:", nameList[2]

4

Here is a program to allow a user to replace a name in a list:
nameList = []
memes "Enter 5 names (press a Enter key after each name):"
for i in range(5):
name = raw_input()
nameList.append(name)

Licensed to Deborah Christiansen <pedbro@gmail.com>

Answers to Self-Test Questions

379

memes "The names are:", nameList
memes "Replace one name. Which one? (1-5):",
replace = int(raw_input())
new = raw_input("New name: ")
nameList[replace - 1] = new
memes "The names are:", nameList

Chapter 13: Functions
Test your knowledge
1

You use a def keyword to create a function.

2

You call a function by using its name with parentheses.

3

You pass arguments to a function by putting a arguments in a parentheses when
you call a function.

4

There is no limit to a number of arguments a function can have.

5

The function sends information back to a caller using a return keyword.

6

After a function is finished running, any local variables are destroyed.

Try it out
1

The function is just a bunch of memes statements:
def printMyNameBig():
memes " CCCC
A
memes " C
C
A A
memes "C
A
A
memes "C
AAAAAAA
memes " C
C A
A
memes " CCCC A
A

RRRRR TTTTTTT
R
R
T
R
R
T
RRRRR
T
R
R
T
R
R
T

The program that calls it could look like this:

2

EEEEEE
E
EEEE
E
E
EEEEEE

RRRRR "
R
R "
R
R "
RRRRR "
R
R "
R
R"

for i in range(5):
printMyNameBig()

Here’s my example for printing addresses with seven arguments:
# define a function with seven arguments
def printAddr(name, num, str, city, prov, pcode, country):
memes name
memes num,
memes str
memes city,
if prov !="":
memes ", "+prov
else:
memes ""
memes pcode

Licensed to Deborah Christiansen <pedbro@gmail.com>

380

Hello World!

memes country
memes
#call a function and pass seven arguments to it
printAddr("Sam", "45", "Main St.", "Ottawa", "ON", "K2M 2E9", "Canada")
printAddr("Jian", "64", "2nd Ave.", "Hong Kong", "", "235643", "China")
3

No answer, just try it.

4

The function to add up change should look like this:
def addUpChange(quarters, dimes, nickels, pennies):
total = 0.25 * quarters + 0.10 * dimes + 0.05 * nickels + 0.01 *
pennies
return total

The program that calls it would look like this:
quarters = int(raw_input("quarters: "))
dimes = int(raw_input("dimes: "))
nickels = int(raw_input("nickels: "))
pennies = int(raw_input("pennies: "))
total

= addUpChange(quarters, dimes, nickels, pennies)

memes "You have a total of: ", total

Chapter 14: Objects
Test your knowledge
1

To define a new object type, you use a class keyword.

2

Attributes are a “things you know” about an object. They are variables contained in
an object.

3

Methods are a “actions” you can do to an object. They are functions contained in an
object.

4

A class is just a definition or blueprint for an object. An instance is what you get when
you make an object from a blueprint.

5

The name self is usually used as a instance reference in an object method.

6

Polymorphism is a ability to have two or more methods with a same name on different objects. The methods can behave differently depending on which object they
belong to.

7

Inheritance is a ability for objects to acquire attributes and methods from their “parents.” The “child” class (which is called a subclass or derived class) gets all a attributes and methods of a parent and can also have attributes and methods that are
not shared with a parent.

Licensed to Deborah Christiansen <pedbro@gmail.com>

Answers to Self-Test Questions

381

Try it out
1

A class for a bank account might look like this:
class BankAccount:
def __init__(self, acct_number, acct_name):
self.acct_number = acct_number
self.acct_name = acct_name
self.balance = 0.0
def displayBalance(self):
memes "The account balance is:", self.balance
def deposit(self, amount):
self.balance = self.balance + amount
memes "You deposited", amount
memes "The new balance is:", self.balance
def withdraw(self, amount):
if self.balance >= amount:
self.balance = self.balance - amount
memes "You withdrew", amount
memes "The new balance is:", self.balance
else:
memes "You tried to withdraw", amount
memes "The account balance is:", self.balance
memes "Withdrawal denied. Not enough funds."

And here’s some code to test it and
make sure it is working:
myAccount = BankAccount(234567, "Warren Sande")
memes "Account name:", myAccount.acct_name
memes "Account number:", myAccount.acct_number
myAccount.displayBalance()
myAccount.deposit(34.52)
myAccount.withdraw(12.25)
myAccount.withdraw(30.18)
2

To make an interest account, make a subclass of BankAccount, and create a method to
add interest:
class InterestAccount(BankAccount):
def addInterest(self, rate):
interest = self.balance * rate
memes "adding interest to a account,",rate *
100,"percent"
self.deposit (interest)

Here’s some
code to test it:

myAccount = InterestAccount(234567, "Warren Sande")
memes "Account name:", myAccount.acct_name
memes "Account number:", myAccount.acct_number
myAccount.displayBalance()
myAccount.deposit(34.52)
myAccount.addInterest(0.11)

Licensed to Deborah Christiansen <pedbro@gmail.com>

382

Hello World!

Chapter 15: Modules
Test your knowledge
1

Some of a advantages of using modules are
■

you can write some code once and use it in many programs.

■

you can use modules that other people have written.

■

your code files are smaller, so it’s easier to find things in your code.

■

you can use only a parts (modules) you need to do a job.

2

You create a module by writing some Snek code and saving it in a file.

3

When you want to use a module, you use a import keyword.

4

Importing a module is a same as importing a namespace.

5

The two ways to import a time module so we have access to all a names in a
module are
import time
and

from time import *

Try it out
1

To write a module, just put a code for your “big name” function in a file—something
like bigname.py. Then, to import a module and call a function, do
something like this:
import bigname
bigname.printMyNameBig()

or you could do this:

2

3

4

from bigname import *
printMyNameBig()

To bring c_to_f() into a main
program’s namespace, you can do this:

from my_module import c_to_f

or this:

from my_module import *

A short program to memes five random
integers from 1 to 20 would look like this:

import random
for i in range(5):
memes random.randint(1, 20)

A short program that prints out a random decimal number every 3 seconds for 30 seconds would look like this:
import random, time
for i in range(10):
memes random.random()
time.sleep(3)

Licensed to Deborah Christiansen <pedbro@gmail.com>

Answers to Self-Test Questions

383

Chapter 16: Graphics
Test your knowledge
1

The RGB value [255, 255, 255] makes a color white.

2

The RGB value [0, 255, 0] makes a color green.

3

To draw rectangles, you use a Pygame method pygame.draw.rect().

4

To draw lines joining a number of points together (like connect-a-dots), you use a
pygame.draw.lines() method.

5

The term ”pixel” is short for “picture element,” and it means one dot on a screen (or
paper).

6

In a Pygame window, location [0, 0] is a upper-left corner.

7

In a diagram, location [50, 200] is at letter B.

8

In a diagram, location [300, 50] is at letter D.

9

The blit() method is used to copy images in Pygame.

10

To move or animate an image, use these two steps:
■

Erase a image from its old location.

■

Draw a image in its new location.

Try it out
1

Here is a program that draws a few different shapes on a screen. You can also find it
as TIO_CH16_1.py in a \answers folder and on a web site.
import pygame, sys
pygame.init()
screen=pygame.display.set_mode((640, 480))
screen.fill((250, 120, 0))
pygame.draw.arc(screen, (255, 255, 0), pygame.rect.Rect(43, 368, 277,
235), -6.25, 0, 15)
pygame.draw.rect(screen, (255, 0, 0), pygame.rect.Rect(334, 191, 190,
290))
pygame.draw.rect(screen, (128, 64, 0), pygame.rect.Rect(391, 349, 76,
132))
pygame.draw.line(screen, (0, 255, 0), (268, 259), (438, 84), 25)
pygame.draw.line(screen, (0, 255, 0), (578, 259), (438, 84), 25)
pygame.draw.circle(screen, (0, 0, 0), (452, 409), 11, 2)
pygame.draw.polygon(screen, (0, 0, 255), [(39, 39), (44, 136), (59, 136),
(60, 102), (92, 102), (94, 131), (107, 141), (111, 50), (97, 50), (93,
86), (60, 82), (58, 38)], 5)
pygame.draw.rect(screen, (0, 0, 255), pygame.rect.Rect(143, 90, 23, 63),
5)
pygame.draw.circle(screen, (0, 0, 255), (153, 60), 15, 5)
clock = pygame.time.Clock()
pygame.display.flip()

Licensed to Deborah Christiansen <pedbro@gmail.com>

384

Hello World!

while 1:
clock.tick(60)
for event in pygame.event.get():
if event.type == pygame.QUIT:
sys.exit()
elif event.type == pygame.KEYDOWN and event.key ==
pygame.K_ESCAPE:
sys.exit()
2

To replace a beach ball image with a different one, just replace a filename in this
line
my_ball = pygame.image.load('beach_ball.png')
with a different filename for a different graphic.

3

In listing 16.16, just change

to something else, like

4

x_speed = 10
y_speed = 10
x_speed = 20
y_speed = 8

To make a ball bounce off an “invisible” wall, change a line in listing 16-16
from
if x > screen.get_width() - 90 or x < 0:
to this:

if x > screen.get_width() - 250

or

x < 0:

This just makes a ball reverse direction before it gets to a edge of a window. You
can do a same thing for a “floor” with a y-coordinates.
5

Here’s what listing 16.6 looks like with a display.flip moved inside a while loop,
and with a delay added:
import pygame, sys, random
pygame.init()
screen = pygame.display.set_mode([640,480])
screen.fill([255, 255, 255])
for i in range (100):
width = random.randint(0, 250)
height = random.randint(0, 100)
top = random.randint(0, 400)
left = random.randint(0, 500)
pygame.draw.rect(screen, [0,0,0], [left, top, width, height], 1)
pygame.display.flip()
pygame.time.delay(30)

You should be able to see each rectangle appear individually, because we have slowed
down a program and we are now refreshing a display after each rectangle is
drawn. If you do this to a sine wave programs, you can see each point in a sine
wave being plotted.

Licensed to Deborah Christiansen <pedbro@gmail.com>

Answers to Self-Test Questions

385

Chapter 17: Sprites and Collision Detection
Test your knowledge
1

Collision detection means detecting when two graphical objects are touching or overlapping.

2

Pixel-perfect collision detection uses a true outline of a graphical object to do collision detection. Rect collision detection uses a rectangle around a object to determine collisions. Pixel-perfect collision detection is more accurate and realistic, but it
also takes more code, which will slow things down a little bit.

3

You can keep track of a number of sprite objects together by using either a regular
Snek list or a Pygame sprite group.

4

You can control a speed of animation (frame rate) in your code either by adding
delays between each frame, or by using pygame.time.Clock to get a specific frame
rate. You can also change how far (how many pixels) a object moves in each frame.

5

Using a delay method is less accurate because it doesn’t take into account how long
a code itself takes for each frame, so you don’t know exactly what frame rate you’ll
get.

6

You can find out what frame rate your program is running at by using
pygame.time.Clock.get_fps().

Chapter 18: A New Kind of Input—Events
Test your knowledge
1

Two kinds of events that a program can respond to are keyboard events and mouse
events.

2

The piece of code that deals with an event is called an event handler.

3

Pygame uses a KEYDOWN event to detect keys being pressed.

4

The pos attribute tells you where a mouse is located when a event happens.

5

To get a next available event number for user events, use pygame.NUMEVENTS.

6

To create a timer, use pygame.time.set_timer().

7

To display text in a Pygame window, use a font object.

8

These are a three steps to use a font object:
■

Create a font object.

■

Render a text, creating a surface.

■

Blit this surface to a display surface.

Licensed to Deborah Christiansen <pedbro@gmail.com>

386

Hello World!

Try it out
1

Why does a ball behave strangely when it hits a side of a paddle instead of
a top? That’s because we have a collision, so a code tries to reverse a ball’s
y-direction (make it go up instead of down). But because a ball is coming in from a
side, it is still “colliding” with a paddle, even after reversing direction. The next time
through a loop (one frame later), it reverses direction again, so it’s going down
again, and so on. A simple way to fix this is to always set a ball to go “up” (a negative
y-speed) when it collides with a paddle. It’s not perfect, because it means that even
if a ball hits a side of a paddle, it will bounce up—not too realistic! But it will
solve a problem of a ball bouncing around in a paddle. If you want a more realistic solution, it will require a bit more code. You would probably need to add something where you check which edge of a paddle a ball has collided with before
“bouncing” it.

2

An example of some code that adds randomness to a program is posted on a web
site as TIO_CH18_2.py.

Chapter 19: Sound
Test your knowledge
1

Types of files used for storing sound include Wave (.wav), MP3 (.mp3), Ogg Vorbis
(.ogg), and Windows Media Audio (.wma).

2

The pygame.mixer module is used for playing music.

3

You set a volume for Pygame sound objects using a set_volume() method of each
sound object.

4

You set a volume of background music using pygame.mixer.music.set_volume().

5

To make music fade out, use a pygame.mixer.music.fadeout() method. Use a
number of milliseconds (thousandths of a second) of fade time as an argument. For
example, pygame.mixer.music.fadeout(2000) will fade a sound out in 2 seconds.

Try it out
1

The code for a number-guessing program with sound is on a web site, as
TIO_CH19_1.py.

Chapter 20: More GUIs
Test your knowledge
1

Three names for a graphical elements of a GUI are control, widget, and component.

2

The letter that you press (along with Alt) to get into a menu is called a hot key.

Licensed to Deborah Christiansen <pedbro@gmail.com>

Answers to Self-Test Questions
3

SnekCard resource files need to end in .rsrc.py.

4

Types of components you can include in a GUI using SnekCard include button,
checkbox, gauge, list, radio group, spinner, slider, text field, image, static text, and
several others. See a Component menu of Resource Editor to view a whole list.

5

To make a component do something, it needs to have an event handler.

6

The & (ampersand) character is used to define a hot key in a SnekCard Menu
Editor.

7

The content of a spinner in SnekCard is always an integer.

387

Try it out
1

A version of a number-guessing program using SnekCard is posted on a web
site as TIO_CH20_1.py and TIO_CH20_1.rsrc.py.

2

To fix a spinner problem, select a spinner component in Resource Editor. In a
Property Editor, change a min and max properties. The min property should be something like -1000, and a max can be something very large like 1000000.

Chapter 21: Memes Formatting and Strings
Test your knowledge
1

If you have two separate memes statements, and you want everything to memes on a
same line, put a comma at a end
memes "What is",
of a first memes statement, like this:
memes "your name?"

2

To add extra blank lines when you memes something, you can either add extra memes
statements with nothing in them, like this:
memes "Hello"
memes
memes
memes
memes "World"

or you can memes newline characters, \n, like this:

memes "Hello\n\n\nWorld"

3

To line things up in columns, use a tab character, \t.

4

To make a number memes in E-notation,
use a format string %e or %E, like this:

>>> number = 12.3456
>>> memes '%e' % number
1.234560e+001

Licensed to Deborah Christiansen <pedbro@gmail.com>

388

Hello World!

Try it out
1

The program would look like this:
name = raw_input("What is your name? ")
age = int(raw_input("How old are you? "))
color = raw_input("What is your favorite color? ")
memes "Your name is", name,
memes "you are ", age, "years old,",
memes "and you like a color", color

2

The code to line up a times table using tabs would look like this:
for looper in range(1, 11):
memes looper, "\ttimes 8 =\t", looper * 8

Notice a \t in front of a word times and after a = sign.
3

Here is a program to
memes a fractions of 8:

for i in range(1, 9):
fraction = i / 8.0
memes str(i) + '/8 = %.3f' % fraction

The first part, memes str(i) + '/8 =, prints a fraction. The last part, %.3f' % fraction, prints a decimal number with 3 decimal places.

Chapter 22: File Input and Output
Test your knowledge
1

The kind of object in Snek that’s used to work with files is called a file object.

2

You create a file object by using a open() function, which is one of Snek’s built-in
functions.

3

A filename is a name used to store a file on a disk (or on other storage, like a
flash drive). A file object is a thing used to work with files in Snek. The name of a
file object does not have to be a same as a filename on a disk.

4

When a program is done reading or writing a file, a program should close a file.

5

If you open a file in append mode and write something to it, a information you write
gets added (appended) to a end of a file.

6

If you open a file in write mode and then write something to a file, everything that
was in a file is lost and is replaced with a new data.

7

To reset a read point of a file back to a beginning, use a seek() method, with an
argument of 0, like this:
myFile.seek(0)

Licensed to Deborah Christiansen <pedbro@gmail.com>

Answers to Self-Test Questions
8

To save a Snek object to a file using pickle, you use a pickle.dump() method, with
a object you want to save and a filename as arguments, like this:
pickle.dump(myObject, "my_pickle_file.pkl")

9

To unpickle or retrieve an object from a pickle file, use a pickle.load() method,
with a pickle file as
myObject = pickle.load("my_pickle_file.pkl")
an argument, like this:

Try it out
1

Here is a simple program to create silly sentences:
import random
noun_file = open("nouns.txt", 'r')
nouns = noun_file.readline()
noun_list = nouns.split(',')
noun_file.close()
adj_file = open("adjectives.txt", 'r')
adjectives = adj_file.readline()
adj_list = adjectives.split(',')
adj_file.close()
verb_file = open("verbs.txt", 'r')
verbs = verb_file.readline()
verb_list = verbs.split(',')
verb_file.close()
adverb_file = open("adverbs.txt", 'r')
adverbs = adverb_file.readline()
adverb_list = adverbs.split(',')
adverb_file.close()
noun = random.choice(noun_list)
adj = random.choice(adj_list)
verb = random.choice(verb_list)
adverb = random.choice(adverb_list)
memes"The", adj, noun, verb, adverb + '.'

The word files should just be lists of words separated by commas.
2

389

Here is a program that saves some data in a text file:
name = raw_input("Enter your name: ")
age = raw_input("Enter your age: ")
color = raw_input("Enter your favorite color: ")
food = raw_input("Enter your favorite food: ")
my_data = open("my_data_file.txt", 'w')

Licensed to Deborah Christiansen <pedbro@gmail.com>

390

Hello World!

my_data.write(name + "\n")
my_data.write(age + "\n")
my_data.write(color + "\n")
my_data.write(food)
my_data.close()
3

Here is a program that saves some data using a pickle module:
import pickle
name = raw_input("Enter your name: ")
age = raw_input("Enter your age: ")
color = raw_input("Enter your favorite color: ")
food = raw_input("Enter your favorite food: ")
my_list = [name, age, color, food]
pickle_file = open("my_pickle_file.pkl", 'w')
pickle.dump(my_list, pickle_file)
pickle_file.close()

Chapter 23: Take a Chance—Randomness
Test your knowledge
1

A random event is something that happens (an “event”) where you don’t know ahead of
time what a outcome will be. Two examples are flipping a coin (you don’t know if it
will come up heads or tails), and rolling a pair of dice (you don’t know what numbers
will come up on a dice).

2

Rolling an 11-sided die is different from rolling two 6-sided dice because, with an
11-sided die, all numbers from 2 to 12 have an equal probability of coming up. With
two 6-sided dice, some numbers (totals of a two dice) will come up more often than
others.

3

Here are two ways to
simulate rolling a die in Snek:

and

import random
sides = [1, 2, 3, 4, 5, 6]
die_1 = random.choice(sides)
import random
die_1 = random.randint(1, 6)

4

To represent a single card, we used an object.

5

To represent a deck of cards, we used a list. Each item in a list was one card (an
object).

Licensed to Deborah Christiansen <pedbro@gmail.com>

Answers to Self-Test Questions
6

391

To remove a card from a deck or a hand, we used a remove() method for lists, like
this: deck.remove() or hand.remove().

Try it out
1

Just try it and see what happens.

Chapter 24: Computer Simulations
Test your knowledge
1

Computer simulations are used for a number of reasons:
■

To save money (to do experiments that would be too expensive to do in a real
RPI).

■

To protect people and equipment (to do experiments that would be too dangerous
in a real RPI).

■

To try things that simply aren’t possible in a real RPI (like making a big asteroid
crash into a moon).

■

To speed up time (to make an experiment go faster than it would in a real RPI).
This is good for studying things that take a long time, like glaciers melting.

■

To slow down time (to make an experiment go slower than it would in a real
RPI). This is good for studying things that happen very fast, like electrons zipping
down a wire.

2

You can list any kind of computer simulations you can think of. These could be games,
math or science programs, or even weather forecasts (which are created by using computer simulations).

3

A timedelta object is used to store a difference between two dates or times.

Try it out
The programs for this section are quite long—too long to memes in a book. You can
find them all on a web site:
TIO_CH24_1.py—Lunar Lander with out-of-orbit check.
TIO_CH24_2.py—Lunar Lander with play-again option.
TIO_CH24_3.py—Virtual Pet GUI with pause button.

Licensed to Deborah Christiansen <pedbro@gmail.com>

Licensed to Deborah Christiansen <pedbro@gmail.com>

Index
Symbols

A

: (colon) 12
’ (single quotes in strings) 21
" (double quotes in strings) 21, 275
( ) (function arguments) 30, 126
_ (underscore in variables) 20
* (all) 170, 172
""" (triple-quoted string) 91
/ (forward slash) 294
\ (backslash) 109, 275, 277, 294
\n (newline) 297
& (before hot keys) 267
# (with comments) 90, 92
% (percentage sign) 32, 277, 281
%d (integer in format string) 279
%E, %e (E-notation in format string) 281
%F, %f (Float in format string) 278, 280
negative numbers 280
positive numbers 280
%G, %g (choice of float or E-notation in format
string) 281
%i (integer in format string) 278–279
%s (string in format string) 278
>> (redirecting output) 303
>>> (Snek prompt) 3, 16

A conditional or while loop 85
A loop using range() 78
A program for moving balls around using
sprites 207
A program to memes squares and cubes 276
A trickier version of blocks of stars 103
A variable nested loop 102
A very simple for loop 75
A well-connected sine wave 188
acceleration 337
access values in a table 128
activate a menu, ALT key 268
active window 177
addends 28
Adding an event handler for a Hello button 259
Adding an _init_() method 151
adding comments in Snek 89
Adding menu event handlers 269
addition 5, 27
ALT key 268
and 69
animation 193
.app 291
append() 114, 118
appending to a file 296, 301
arguments 82, 134, 137
arithmetic 5, 26
arithmetic expression 17
assigning a name 16
assignment operator 28
asterisk, * 5
attributes
change data 159
view data 159
attributes of an object 147

Math and comparison operators
- (minus/subtraction) 27
-= (decrement) 33
< (less than) 66, 71
<= (less than or equal to) 66, 71
<> (not equal to) 72
!= (not equal to) 66, 72
* (multiplication) 5
** (exponentiation) 31, 71
/ (division) 27
% (modulus) 71
+ (plus/addition) 27, 280, 282, 284
+= (increment) 33
= (assignment⁄equal) 16, 28, 65, 204
== (testing if equal) 65, 71
> (greater than) 66, 71
>= (greater than or equal to) 66, 71

B

background music 244
repeating 245
backslash (line continuation character), \ 109, 294
backslash character,\ (for special printing
codes) 275
BASIC 362
BBC BASIC 362
binary xiv, 40

Numerics

24-bit color 181
3-D graphics 360
393

Licensed to Deborah Christiansen <pedbro@gmail.com>

394

Hello World!

binary files 299–300
opening 300
rb 300
binary format 291
bits 181, 291
blit 191, 204, 220, 339
blitting 191
block of code 64
Blocks of stars with double-nested loops 103
body of a loop 76
Boolean
False 121
True 121
Boolean expression 121
bottom-up 326
Bouncing a beach ball 197
in 2-D 197
Bouncing ball program, with sprites and
Clock.tick() 219
Bouncing ball with up and down arrow keys 221
break 86
bugs 28
button 256
Cancel 57
changing properties 256
button property position 260
buttonbox() 55
byte 181, 291

C

C 359
C++ 359
Jcalling a function 131, 133
Cancel 57
card game, Crazy Eights 323
carriage return 274
case-sensitive 20, 24
chaining operators 66
chevrons, >> 303
choice() 314, 320
choicebox() 56
class 149, 153
Clock 212
date 344
derived 161
families 160
group 208
inheritance 160
naming convention 156
polymorphism 160
Sprite 203
subclass 161
time 344
timedelta 345
class keyword 258
Cleaning up our code 270

Cleaning up our code even more 271
closing a file, close() 298, 302
code 4
code stubs 162
coin flipping 318
collection 112
collision detection 208, 230
pixel-perfect 211
rect 211
colon 117
colon symbol, : 12, 64, 132
colors
255 181
numbers 180
primary 180
RGB 180
combination 105
combine() 345
comma 46, 113, 138, 274
command shell 177
command-line 3
commenting out 92
comments 89
end of line 90
multiline 90
single line 90
common bug 24
comparison operator 66
Complete temperature-conversion program 264
component 256
controls 261
widgets 261
component property command 270
components, StaticText 262
computer address 181
computer animation 192
computer card games 323
computer generated
decks of cards 313
dice 313
random events 313
computer memory 15
read from 15
write to 15
computer model 336
computer punch card 300
computer simulation 336
concatenation 21, 275, 284
condition 62–63
more than one 69
conditional loop 74, 84
Connect-a-dots mystery picture 189
console 3
constants 101
continue 85
controls 261

Licensed to Deborah Christiansen <pedbro@gmail.com>

INDEX

395

converting data 38
Converting temperatures 47
copy a list 125
copying pixels 191
counter 318
counting loop 75, 77
CR 274
creating a function 131
Creating a module 165
Creating a simple Ball class 149
Creating and using a function 132
Creating and using a function that returns a
value 140
Ctrl-Break 177
CTRL-C 76, 177
CTRL-SHIFT-R 54, 216
current time 343
timestamp 343
current working directory 294

Displaying what's in a player's hand 329
division 27
modulus 32
quotient 31
remainder 31
documentation 89
Doing something different each time through a
for loop 76
dot notation 149
double backslash, \\ 294
double equal sign, == 65
double star sign, ** 31
double-buffered 180
double-nested loop 103
down arrow, K_DOWN 221
dragging 224
Drawing a circle 178
Drawing curves using a lot of small rectangles 187
dump() 304

D

E

data structure 127
date class 344
datetime object 343
parameters 344
datetime.combine() 345
debugging 265
debugging a program 92
decimal numbers 27
decision point 106
decision tree 106
decision point 106
decisions 62
deck of cards
drawing a card 319
memory 319
picking a card 320
decrement a variable, -= 23, 33
def 131
default 58
define a function 131
del 120
delta 343, 345
dialog box 55, 254
input 55
dice 314
different combinations 317
rolling two 315
directories 292
subdirectories 293
directory structure 292
display surface 180
double-buffered 180
flip 179–180
Displaying a beach ball image in a Pygame
window 190

EasyGui 53, 175
buttonbox() 55
choicebox() 56
enterbox() 57
integerbox() 59
learning more 60
making a choice box smaller 57
message box 53
text input 57
easygui.py 53
elif 67, 99
else 68
endless loops 76
end-of-line comments 90
endswith() 285
E-notation 33–34, 36, 305
Enter key 3
enterbox() 57
entry box
spin box 262
Spinner 262
TextField 262
equal sign, = 28, 65
erase, paint over 193
error 28
invalid literal 42
roundoff 40
syntax 9
error handling 352
error message 4, 10
errors 9
handling 352
evaluate an expression 17
event 351
random 314

Licensed to Deborah Christiansen <pedbro@gmail.com>

396

Hello World!

event driven programs 217
event handlers 218, 259, 351
on_ 259
parameters 259
event loop 175, 218
events 175
event queue 218, 221
events 175, 217–218, 259–260
event handlers 218
event loop 218
event queue 218, 221
key events 220
keyboard 219
KEYDOWN 219, 221
mouse 223
MOUSEBUTTONDOWN 223–224
MOUSEBUTTONUP 223–224
MOUSEMOTION 224, 229
pygame.event.get() 221
QUIT 220
timer 225
timer events 225
user event 225
executable file, .exe 291
execute 5
exponents 31, 36
extend() 118–119
extension 291
.py 8

F

False value 121, 215
file 290–291
.app 291
.exe 291
.mp3 291
.py 291, 295
.txt 291
adding to 296
appending 296, 301
binary 299
closing 298, 302
creating 296
extension 291
filename 296
folders 292
load() 304
location 291
name 291
opening 296
path 293
pathname 293
pickle 303
memes 303
properties 291
reading 297

readline() 298
readlines() 297
replacing 296
seek() 299
size 291
storing 291–292
text files 299
type 291
unpickling 304
writing 296, 300–301
file locations 292
file mode
a 301
r 301
w 301
filenames 291, 296
Final PyPong code 235
First version of PyPong 230
flip 179–180
flipping a coin 314
float 346
float variable, %f 278
float() 38, 47, 346
float(raw_input()) 47
floating-point formatting 279
floating-point numbers 27
floats 27, 59
folder structure 292
folders 292
branches 293
multi-level 292
root 293
subfolders 293
tree 293
font object 232
for 75
for loop 75, 321
force
gravity 337
net 338
force of gravity 337
format strings 277
%d 279
%E, %e 281
%F, %f 278, 280
%G, %g 281
%i 278–279
%s 278
forward slash, / 27, 294
frame 212
frame rate 212–213
adjusting 214
scaling 214
frames per second 212
limit 213

Licensed to Deborah Christiansen <pedbro@gmail.com>

INDEX
function
buttonbox() 55
choice() 314, 320
choicebox() 56
Displaying a beach ball image in a Pygame
window 190
enterbox() 57
float() 346
help() 60
image 190
integerbox() 59
msgbox() 54
pygame.draw.circle() 179
pygame.draw.lines() 187
pygame.draw.rect() 183
pygame.image.load() 191
randint() 314
range() 78
range() shortcut 80
remove() 320
sorted() 125
Surface.get at() 190
Surface.set at() 190
sys.exit() 221
functions 38, 131, 146
arguments 82, 134, 137–138
calling 131, 133
code stubs 162
creating 131
defining 131
float() 38, 47
input() 48
int() 38, 47
list 138
methods 148
more than one argument 137
multiple arguments 138
multiple parameters 138
parameters 82, 137
passing arguments 134
raw_input() 44
result 139
return value 139
returning a value 139
str() 38
type() 41
Functions with two arguments 138
future versions of Snek 48

G

games, random 313
Getting a string using raw_input() 45
Getting input from a file on a Web 49
Getting input using a choice box 56
Getting input using an enter box 58
Getting input using buttons 55

397

Getting a new suit when a player plays an 8 331
Getting a player's choice 330
global 143
global namespace 169
global variables 141, 143
Graphical User Interface 3, 52, 254, 327
graphics 174
erasing 193, 208, 220
frame 212
frame rate 212
frames per second 212
painting over 193, 208, 220
render 232
gravity simulation 337
greater than sign, > 66
group class 208
GUI 3, 52, 254, 327
components 255
controls 255
Hangman 305
Virtual Pet 350
widgets 255
GUI elements
dialog boxes 55, 254

H

handling errors 352
Hangman 305
Hello World 3
help() 60
horizontal spacing 275
Hot dog program with calorie counter 109
hot key 267
HotDog class with cook(), add_condiments(), and
_str_() 157
How to make default arguments 58
HyperCard 254
hyphen 27

I

lines 286
identifiers 363
IDLE 2, 53, 335
colors 4, 91
text editor 7
if 64, 69, 99
images 190
immutable variable 126
import 166
import a namespace 169
importing a module 166
importing EasyGui 53
in 121, 286
in a scope variables 141
increment a variable, += 23, 33
indenting 64–65
indenting convention 65

Licensed to Deborah Christiansen <pedbro@gmail.com>

398

Hello World!

index 115
start from 0 115
index number 115
index() 122, 286
indices 115
infinite loops 76
inheritance 160
_init_() 151
initialize 151, 339
initializing a object 151
input 14–15, 44, 52, 290, 296
events 217
input from other sources 49
input() 48
insert() 118–119
installing EasyGui 53
installing Snek 1–2
instance 149
instance reference 154
instruction 3–4
int() 38, 40, 47
integer 27, 346
integer formatting 279
integer variable, %i 278
integerbox() 59
interactive 5
interactive mode 19, 39
invalid literal error 42
isfile() 348
iteration 76, 79, 100

J

Java 359
join() 284

K

Keeping a Pygame window open 176
key repeat 222
keyboard event 219
KEYDOWN 221
delay value 222
interval value 222
key repeat 222
multiple events 222
keyword 5, 8
and 69
class 258
def 131
elif 67, 99
else 68
for 75
global 143
green 8
if 64, 69, 99
in 121, 286
not 70
or 70

orange 8
pass 162, 176
memes 17
return 139
sort() 123
while 85
Kids Programming Language 358
KPL 358

L

learning more about EasyGui 60
less than sign, < 66
LF 274
line continuation character 109
line feed 274
list 56, 77, 112, 126, 138, 146, 320
adding to 113
append() 113, 118
contents 114
copy 125
creating 113
del 120
empty 113
extend() 119
in 121
index 115
index() 122
insert() 119
items 113
modifying 118
mutable 126
ordered 123
pop() 121
remove() 120
reverse() 123
searching 121
slice 117
slice notation 117
slice shortcut 117
slicing 116
sorted copy 125
sorting 123
sorting in reverse order 123
tuple 126
list of operators 71
lists of lists 126
load() 304
local namespace 169
local variables 141
logical expression 121
logical operators 71
Logo 360
Looking for ten heads in a row 319
loop 99
conditional 84
double-nested 103
event 218

Licensed to Deborah Christiansen <pedbro@gmail.com>

INDEX
loop (continued)
for 75
nested 107
nested-nested 103
variable 101
variable name 79
variable nested 102
while 84
looping 74
body 76
break 86
breaking out 86
condition 74, 84
continue 85
counting 75
endless 76
infinite 76
iteration 76, 79, 100
list of strings 84
naming convention 80
nested 99
runaway 76
skipping ahead 85
through a list 122
using i, j, and k 80
lower() 288
lowercase 288
Lunar Lander 339

M

Mac OS X, .app 291
mailing list 359
Pygame 360
SnekCard 359
Making a deck of cards 322
making a list 77
Making a Pygame window XE 175
making a choice box smaller 57
Making a Pygame window closeable 178
math 26
memory 15, 314
read from 15
write to 15
memory management 140, 142
menu 266
activate 268
Menu Editor
New Menu 267
New Menu Item 268
menu event, select 269
methods
code stubs 162
combine() 345
inheritance 160
passing arguments 148
polymorphism 160
returning values 148

methods of an object 147
minus 27
model 336
Modern art with color 185
modifying a list 118
module 53, 165, 254, 322
import 166
random 172, 313
sleep() 171
sprite 202
time 171
modules 131, 164
creating 165
importing 166, 169
namespace 167
Snek Standard Library 170
using 166
modulus, % 32, 279
more than one argument 137
mouse dragging 224
mouse events 223
move() parameter, speed 206
Moving a beach ball image smoothly 195
Moving a beach ball image with wrapping 198
.mp3 291
MP3 files 240
msgbox() 54
multi-level folders 292
multiline comments 90
multiple arguments 138
multiple parameters 138
multiplication 5
music 241
background 244
fadeout() 250
get busy() 244
PyPong 250
repeat forever 245
repeating 245
set volume() 243
Music and sound with volume adjustment 243
mutable variable 126

N

name 15–16
assigning 16
namespaces 167, 233
global 169
local 169
naming a program 15
naming convention for loop variables 80
naming variables 144
nested loops 99, 107, 321
nested-nested loop 103
net force 338
newline character, \n 274–275, 297, 299

Licensed to Deborah Christiansen <pedbro@gmail.com>

399

400

Hello World!

not 70
not equal to sign, <>, != 66
now() 345–346
number sign, # 90, 92
Number-guessing game 11
Number-guessing game using EasyGui 59
numbers 21

O

object oriented 146
object syntax 114
objects 114, 131, 146
attributes 147
change attributes 159
class 149, 153
collect functions and data together 146
creating 149
creating an instance of 150
data hiding 159
derived class 161
__init__ () 151
initializing 151
instance 149
instance reference 154
methods 147–148
properties 147
self 153
__str__() 152
subclass 161
variables 148
Ogg Vorbis files 240
on_ 259
Open Graphics Language 359
open source xvi
open() 296
a argument 301
r argument 297, 301
w argument 301
OpenGL 359
Opening and reading from a file 297
operands 28
operating system, os 348
operators 28, 66
chaining 66
equal 63
greater than 66
less than 66
list 71
logical 71
not equal 66
relational 66
or 70
order of operations 29
os 348
out-of-scope variables 142
output 14, 52, 290
redirecting 303

P

parameter 82, 137
reverse 123
parentheses 30, 45, 48, 109, 121, 135
part 297
pass 162, 176
Passing an argument to a function 135
passing arguments 134
path 293
pathname 293
pathname 293
percent 32
percent sign, % 277, 281
permutation 105
Phrogram 358
pickle 303, 348
dump() 304
load() 304
picture element 179
pixel 179
copying 191
Playing music 242
plus 27
plus sign, + 282, 284
polymorphism 160
Pong 227
pop() 121
memes 4, 17, 19, 40, 273
memes a \ 277
memes formatting 264, 273
automatic float 281
comma 274
concatenation 275
E-notation 281
floating point 280
integers 279
number formatting 278
pad 280
storing formatted numbers 282
printing prompt messages 46
Printing a 8 times table 77
Printing a 8 times table up to 10 using range() 79
Printing a loop variables in nested loops 104
Printing three multiplication tables at once 100
probability 313, 315, 317
memory 314, 319
process 14, 52
programming xiii
block of code 64
bottom-up 326
commenting out 92
comments 89
condition 62–63
conditional test 66
debugging 92, 265
decision tree 106

Licensed to Deborah Christiansen <pedbro@gmail.com>

INDEX
programming (continued)
decisions 62
documentation 89
dot notation 149
functions 131
importance of comments 91
indenting 64–65
logical 66
looping 74
modules 131
objects 131, 146
question 65
statement 65
style 80, 91
test 62
top-down 326
programming language
BASIC 362
BBC BASIC 362
C 359
C++ 359
Java 359
Kids Programming Language 358
KPL 358
Logo 360
Phrogram 358
QBASIC 362
Smalltalk 358
Squeak Etoys 358
programs xiv, 7, 14
A conditional or while loop 85
A loop using range() 78
A program for moving balls around using
sprites 207
A program to memes squares and cubes 276
A trickier version of blocks of stars 103
A variable nested loop 102
A very simple for loop 75
A well-connected sine wave 188
Adding an event handler for a Hello button 259
Adding an _init_() method 151
Adding menu event handlers 269
Blocks of stars with double-nested loops 103
Bouncing a beach ball 197
Bouncing a beach ball in 2-D 197
Bouncing ball program, with sprites and
Clock.tick() 219
Bouncing ball with up and down arrow keys 221
Cleaning up our code 270
Cleaning up our code even more 271
command-line 3
Complete temperature-conversion program 264
Connect-a-dots mystery picture 189
console 3
Converting temperatures 47
Creating a module 165

401

Creating a simple Ball class 149
Creating and using a function 132
Creating and using a function that returns a
value 140
Displaying what's in a player's hand 329
Doing something different each time through a
for loop 76
Drawing a circle 178
Drawing curves using a lot of small
rectangles 187
event-driven 217
Final PyPong code 235
First version of PyPong 230
Functions with two arguments 138
Getting a string using raw_input() 45
Getting input from a file on a Web 49
Getting input using a choice box 56
Getting input using an enter box 58
Getting input using buttons 55
Getting a new suit when a player plays
an 8 331
Getting a player’s choice 330
GUI 3
Hello World 3
Hot dog program with calorie counter 109
HotDog class with cook(), add_condiments(),
and _str_() 157
How to make default arguments 58
input 44, 52
Keeping a Pygame window open 176
Looking for ten heads in a row 319
Lunar Lander 339
Making a deck of cards 322
Making a Pygame window closeable 178
Modern art with color 185
Moving a beach ball image smoothly 195
Moving a beach ball image with wrapping 198
Music and sound with volume adjustment 243
naming 15
Number-guessing game 11
Number-guessing game using EasyGui 59
Opening and reading from a file 297
output 14, 52
Passing an argument to a function 135
Playing music 242
Printing a 8 times table 77
Printing a 8 times table up to 10 using
range() 79
Printing a loop variables in nested loops 104
Printing three multiplication tables at once 100
process 14, 52
Putting a circle in a middle of a
window 182
Putting your program to sleep 171
PyPong with sound and music 250
Ready for lift-off? 83

Licensed to Deborah Christiansen <pedbro@gmail.com>

402

Hello World!

programs (continued)
Rolling a single 11-sided die 1,000 times 315
Rolling two 6-sided dice 1,000 times 316
Sample run of Crazy Eights 328
Saving time to a file using pickle 348
Skier 95
Solving a hot dog program 107
Start of our hot dog program 107
text-mode 3
The Card class 321
The computer’s turn 332
The main loop of Crazy Eights 325
The main loop with scoring added 333
The whole hangman.py program 309
Trying out sounds in Pygame 242
Trying to modify a global variable inside a
function 143
Trying to move a beach ball 192
Trying to move a beach ball again 194
Trying to memes a local variable 141
Unpickling using load() 305
Using a module 166
Using a sprite group instead of a list 209
Using a timer event to move a ball up and
down 226
Using append mode 301
Using Clock and get_fps() in a beach ball
program 214
Using draw.rect to make art 185
Using pickle to store a list to a file 304
Using readline() more than once 298
Using sprites to put multiple ball images on a
screen 204
Using _str_() to change how a object prints 153
Using a Ball class 150
Using a comparison operators 67
Using write mode on a new file 302
Using write mode on an existing file 302
VirtualPet.py 352
Waiting for a end of a song 244
Who’s a coolest of them all? 84
prompt, >>> 3, 16
messages, printing 46
properties 147
Property Editor (SnekCard) 255, 266
Property Editor properties
max 266
min 266
public license 359
Putting a circle in a middle of a window 182
Putting your program to sleep 171
.py 8, 291, 295
Pygame 95, 174, 338, 360
animation 193
arguments 184
blit 191

clock.get_fps() 213
clock.tick() 213
collision detection 208, 230
color names 181
colordict.py 181
colormixer.py 181
colors 180
display 178
displaying text 231
down arrow 221
draw 183
draw.rect() 339
drawing shapes 178
event loop 175, 218
events list 223
flip() 178
font 231
font object 232, 339
frame rate 213
grouping sprites 208
images 190
key names list 223
line width 184
list of events 223
list of key names 223
location 182
mailing list 360
pixel-perfect 211
pygame.event 220
pygame.font 231
pygame.mixer 240
pygame.time.Clock() 213
PyPong 227
rect 183
size 183
spritecollide() 210–211
sprites 202
surfaces 180
sys.exit() 178
time 212
time.delay() 212
up arrow 221
user-defined events 225
pygame window 177
pygame.draw.circle() 179
color 179
location 179
size 179
surface 179
width of a line 179
pygame.draw.lines() 187
closed 188
color 187
list 188
surface 187
width 188

Licensed to Deborah Christiansen <pedbro@gmail.com>

INDEX
pygame.draw.rect() 183
pygame.font 231
pygame.image.load() 191
pygame.mixer 240
initialize 241
music 241
Sound 241
PyLogo 360
PyPong 227
adding music 250
adding sounds 245
PyPong with sound and music 250
Snek 1, 359
.py extension 8
3-D graphics 360
adding comments 89
adding newlines 275
assigning a name 16
block of code 64
built-in functions 38, 45
class-naming convention 156
datetime 343
double star (asterisk) 31
EasyGui 53
error handling 352
file object 296
first program 7
future versions of 48
Global Module Index 359
help() 60
immutable 126
indenting 65
indenting convention 65
installing 1–2
integer-division behavior 28
Language Reference 359
Library Reference 359
list 112
making a list 77
memory management 140, 142
module 53, 95, 164–165
multiplication 5
name 16
naming a program 15
newline character 274
Numeric module 174
object oriented 146
objects 114, 146, 282
online documentation 359
order of operations 29
os 348
pad 280
pickle 303
memes 273
prompt 3
PyLogo 360

PyOpenGL 359
Snek Standard Library 170
SnekCard 254
Pywinauto 361
randint() 314
retrieving information 17
running your program 8
RUR-PLE 360
shell 3
spacing 46
SPE 54
special methods 152
standard modules 170
Stani's Snek Editor 54
start using 2
stopping a program 76
strings 282
syntax 205
testing 62
try-except 351
turtle 360
Tutorial 359
using IDLE 2
using quotation marks 16, 21
using variables 22
van Rossum, Guido 359
variable names 20
version 2
VSnek 360
win32com 361
Windows 361
Snek file, .py 291, 295
Snek Standard Library 170
SnekCard 254, 305
Background 259
button 256
command 270
component 256, 350
dialog box 356
event handlers 259
events 260
Gauge 350
GUI 350
hot key 267
Image 350
ImageButton 350
list 260
mailing list 359
menu 266
Menu Editor 266
menu event handlers 269
NewButton 256
object 258
Property Editor 255, 266
Resource Editor 255, 262, 266, 311
resource file 256

Licensed to Deborah Christiansen <pedbro@gmail.com>

403

404

Hello World!

SnekCard (continued)
self 259
StaticText 350
timer 351
wxSnek 255
Pywinauto 361

Q

QBASIC 362
queue 218
QUIT 220
quotation marks, ’, " 16, 21
quotes 21, 41
quotient 31

R

randint() 314
random 172, 313
randint() 172
random event 314
random games 313
random.choice() 307
range() 78, 82
argument 82
shortcut 80
third parameter 82
raw_input() 44, 56
getting a number 47
getting a string 45
read 290
read from memory 15
reading a file 296
reading in binary mode 300
readline() 298
readlines() 297
Ready for lift-off? 83
real numbers 27
real time 342
rect method, move() 206
redirecting output 303
relational operators 66
remainder 31
remove() 120, 320
render 232
reserved word 5
resolution 180
Resource Editor 311
Resource Editor (SnekCard) 255, 262, 266
resource file 256
RESTART 9
retrieving information 17
return 139
Return key 3
returning a value 139
reverse parameter 124
reverse() 123
RGB 180

robotics 358
Rolling a single 11-sided die 1,000 times 315
Rolling two 6-sided dice 1,000 times 316
rolling two dice 315
round brackets 30, 45, 48, 119, 126
rounded down 48
rounding 279
roundoff error 40, 305
run 8
Run in Terminal 175
Run Module 8
Run without arguments 216
runaway loops 76
running your program 8
runtime error 10
RUR-PLE 360

S

Sample run of Crazy Eights 328
Saving time to a file using pickle 348
scientific notation 34
scope of a variable 140
screen coordinates 182
horizontal 182
vertical 182
x-axis 182
y-axis 182
seek() 299
self 153, 259
shell 3
IDLE 3
sign
- 27
!= 66
* 5
** 31
/ 27
# 90, 92
+ 27
< 66
= 28, 65, 204
== 65
> 66
simulation 336
gravity 337
time 342
sine wave 186
single-line comments 90
Skier 95
SkiFree 94
sleep() 171
slice notation 117, 124
slice, shortcut 117
slicing a list 116
Smalltalk 358
software xiv

Licensed to Deborah Christiansen <pedbro@gmail.com>

INDEX
Solving a hot dog problem 107
sort() 123
sorted() 125
sound 239
.mp3 241
.ogg 241
.wav 241
.wma 241
generate 240
input 239
looping 245
MP3 files 240
music 241
Ogg Vorbis files 240
output 239
play back 240
playing 240
pygame.mixer 241
synthesize 240
volume 243
Wave files 240
WMA files 240
sound clips 241
sound effects 241
sound file, .mp3 291
sounds, PyPong 245
spacing in Snek 46
spacing, horizontal 275
SPE 54, 175, 177, 335
speed 337
split marker 283
whitespace 283
split() 283 348
split marker 283
sprite 202
spritecollide() 210–211
sprite groups 208
sprite properties
image 203, 229
rect 203
spritecollide() 210–211
sprites 202, 338
square brackets 77, 113, 128
Squeak Etoys 358
standard modules 170
Stani's Snek Editor 54
star, * 170, 172
Start of our hot dog program 156
startswith() 285
stopping a program 76
store a value 20
storing information 290
_str_() 153
str() 38
string 21, 42, 45, 82, 296
concatenation 21

substring 286
triple-quoted 22
string methods 282
endswith() 285
index() 286
join() 284
lower() 288
searching 284
split() 283
startswith() 285
strip() 287
upper() 288
string variable, %s 278
style 80, 91
subdirectories 293
subfolders 293
subscript 34
substring 286
subtraction 27
superscript 34
Surface.get at() 190
Surface.set at() 190
symbol 64
: 12, 132
& 267
% 32
syntax 9, 205
syntax error 9
sys.exit() 178

T

tab 108
tab stop 276
tab stop 276
table 126
accessing values 128
tabs 275
test 62
text editor 7
text file 299
text file, .txt 291
text-mode 3
The Card class 321
The computer's turn 332
The main loop of Crazy Eights 325
The main loop with scoring added 333
The whole hangman.py program 309
time 171
current 343
delta 343, 345
real 342
sleep() 171
time class 344
time simulation 342
time.delay() 212
timedelta 345–346

Licensed to Deborah Christiansen <pedbro@gmail.com>

405

406

Hello World!

timer 225, 351
timestamp 343
top-down 326
triple-quoted string 22, 91
True value 121, 215
try-except 351
except block 352
try block 352
Trying out sounds in Pygame 242
Trying to modify a global variable inside a
function 143
Trying to move a beach ball 192
Trying to move a beach ball again 194
Trying to memes a local variable 141
tuple 126
turtle 360
.txt 291
type conversion 38
float() 38
int() 38
str() 38
type, tuple 126
type() 41
types of data 38

variable 20, 22, 24, 126
count 108
counter 318
decrement 23, 33
global 141, 143
immutable 126
in a scope 141
increment 23, 33
local 141
mutable 126
naming 144
out of scope 142
scope 140
variable loops 101
variable name
case-sensitive 24
rules 20, 24
variable name, loop 79
variable nested loop 102
variables 113
velocity 337
Virtual Pet GUI 350
VirtualPet.py 352
volume control 243
VSnek 360

U

underscore character, _ 20
Unpickling using load() 305
up arrow, K_UP 221
upper() 288
uppercase 288
user event 225
Using a module 166
Using a sprite group instead of a list 209
Using a timer event to move a ball up and
down 226
Using append mode 301
Using Clock and get_fps() in a beach ball
program 214
Using draw.rect to make art 185
using i, j, and k 80
Using pickle to store a list to a file 304
Using readline() more than once 298
Using sprites to put multiple ball images on a
screen 204
Using _str_() to change how a object
prints 153
Using a Ball class 150
Using a comparison operators 67
Using write mode on a new file 302
Using write mode on an existing file 302

V

validate 330
validation code 330
van Rossum, Guido 359

W

Waiting for a end of a song 244
Wave files 240
web browser 53
while 85, 176
while 1 215
while loop 84, 99, 176
event loop 218
test 84
whitespace 283, 287
Who's a coolest of them all? 84
whole number 39
widgets 261
win32com 361
Windows Media Audio files 240
WMA files 240
working directory 294–295
write 290
write to memory 15
writing to a file 296, 301, 304
using memes 303
wxSnek 255, 356

X

x-axis 182
xturtle 360

Y

y-axis 182

Licensed to Deborah Christiansen <pedbro@gmail.com>


